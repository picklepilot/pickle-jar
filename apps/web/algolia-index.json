[
  {
    "objectID": "/docs/component",
    "title": "Component",
    "content": "<script setup lang=\"ts\">\nimport { computed, defineAsyncComponent, shallowRef, watch } from 'vue'\nimport { useRoute } from 'vue-router'\nimport DocsLayout from '@/components/docs/DocsLayout.vue'\n\nconst route = useRoute()\nconst componentName = computed(() => route.params.component as string)\n\n// Use shallowRef to hold the async component\nconst AsyncComp = shallowRef(\n    defineAsyncComponent(\n        () => import(`./components/${componentName.value}.vue`)\n    )\n)\n\nwatch(componentName, () => {\n    console.log('componentName', componentName.value)\n    AsyncComp.value = defineAsyncComponent(\n        () => import(`./components/${componentName.value}.vue`)\n    )\n})\n</script>\n\n<template>\n    <DocsLayout>\n        <AsyncComp />\n    </DocsLayout>\n</template>\n",
    "url": "/docs/component",
    "source": "docs"
  },
  {
    "objectID": "/docs/button",
    "title": "Button",
    "content": "<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport {\n    Button,\n    CodeBlock,\n    Tabs,\n    TabsList,\n    TabsTrigger,\n    TabsContent,\n    TabsPanel,\n    Table,\n    TableHeader,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n} from '@picklepilot/pickle-jar-ui'\nimport { PlusIcon } from 'lucide-vue-next'\n\nconst componentData = computed(() => ({\n    title: 'Button',\n    description:\n        'A versatile button component with multiple variants, sizes, and states. Supports loading states, custom themes, and accessibility features.',\n    props: [\n        {\n            name: 'variant',\n            type: 'string',\n            default: 'default',\n            description: 'The visual style of the button',\n            options: [\n                'default',\n                'destructive',\n                'outline',\n                'secondary',\n                'ghost',\n                'link',\n            ],\n        },\n        {\n            name: 'size',\n            type: 'string',\n            default: 'default',\n            description: 'The size of the button',\n            options: ['default', 'sm', 'lg', 'xs', 'icon'],\n        },\n        {\n            name: 'disabled',\n            type: 'boolean',\n            default: 'false',\n            description:\n                'Whether the button is disabled. When true, the button cannot be clicked and shows a disabled state.',\n        },\n        {\n            name: 'processing',\n            type: 'boolean',\n            default: 'false',\n            description:\n                'Whether the button is in a processing state. When true, displays a loading indicator.',\n        },\n        {\n            name: 'round',\n            type: 'boolean',\n            default: 'false',\n            description:\n                'Whether the button should have a round/circular shape. When true, uses rounded-full instead of rounded-md.',\n        },\n        {\n            name: 'theme',\n            type: 'object',\n            default: '{}',\n            description:\n                \"Locally customize the component's theme properties including button, buttonDisabled, and buttonIcon styles.\",\n        },\n    ],\n    events: [\n        {\n            name: 'click',\n            description:\n                'Emitted when the button is clicked. Receives the MouseEvent as payload.',\n        },\n    ],\n    slots: [\n        {\n            name: 'default',\n            description: 'The default slot for the button content',\n        },\n        {\n            name: 'processing',\n            description:\n                'Optional slot for custom loading indicator content when processing is true',\n        },\n    ],\n    codeBlocks: {\n        oneLineUsage: `<Button variant='outline' size='default'>Click me</Button>`,\n        basic: `<template>\n  <Button variant='default' size='default'>\n    Click me\n  </Button>\n</template>\n\n<script setup>\nimport { Button } from '@picklepilot/pickle-jar-ui'\n<\\/script>`,\n        basicUsage: `<template>\n  <Button>\n    Click me\n  </Button>\n</template>\n\n<script setup>\nimport { Button } from '@picklepilot/pickle-jar-ui'\n<\\/script>`,\n        variants: `<template>\n  <div class='space-x-4'>\n    <Button variant='default'>Default</Button>\n    <Button variant='secondary'>Secondary</Button>\n    <Button variant='outline'>Outline</Button>\n    <Button variant='ghost'>Ghost</Button>\n  </div>\n</template>\n\n<script setup>\nimport { Button } from '@picklepilot/pickle-jar-ui'\n<\\/script>`,\n        sizes: `<template>\n  <div class='space-x-4'>\n    <Button size='sm'>Small</Button>\n    <Button size='default'>Default</Button>\n    <Button size='lg'>Large</Button>\n  </div>\n</template>\n\n<script setup>\nimport { Button } from '@picklepilot/pickle-jar-ui'\n<\\/script>`,\n        icon: `<template>   \n  <Button>\n    <template #icon>\n      <PlusIcon class='size-4' />\n    </template>\n    With Icon\n  </Button>\n</template>\n\n<script setup>\nimport { Button } from '@picklepilot/pickle-jar-ui'\n<\\/script>`,\n        processing: `<template>\n  <div class='space-x-4'>\n    <Button processing>\n      Loading...\n      <template #processing>\n        <span>‚è≥</span>\n      </template>\n    </Button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { Button } from '@picklepilot/pickle-jar-ui'\n<\\/script>`,\n        round: `<template>\n  <div class='space-x-4'>\n    <Button round>Round</Button>\n    <Button round variant='destructive'>Delete</Button>\n    <Button round size='icon'>\n      <PlusIcon class='size-4' />\n    </Button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { Button } from '@picklepilot/pickle-jar-ui'\nimport { PlusIcon, TrashIcon } from 'lucide-vue-next'\n<\\/script>`,\n        iconButton: `<template>\n  <div class='space-x-4'>\n    <Button size='icon'>\n      <PlusIcon class='size-4' />\n      <span class='sr-only'>Add</span>\n    </Button>\n    <Button size='icon' variant='outline'>\n      <TrashIcon class='size-4' />\n      <span class='sr-only'>Delete</span>\n    </Button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { Button } from '@picklepilot/pickle-jar-ui'\n<\\/script>`,\n        disabled: `<template>\n  <div class='space-x-4'>\n    <Button disabled>\n      Disabled Button\n    </Button>\n    <Button disabled variant='destructive'>\n      Disabled Destructive\n    </Button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { Button } from '@picklepilot/pickle-jar-ui'\n<\\/script>`,\n        import: `import { Button } from '@picklepilot/pickle-jar-ui'`,\n        routerLink: `<Button to='/'>Go Home</Button>`,\n    },\n}))\n\n// const handleClick = () => {\n//     alert('clicked')\n// }\n</script>\n\n<template>\n    <div class=\"prose prose-gray max-w-none\">\n        <h1>{{ componentData.title }}</h1>\n        <p class=\"lead\">{{ componentData.description }}</p>\n\n        <!-- <h2>Usage</h2> -->\n\n        <!-- <Tabs class=\"mt-10 px-2 h-72\">\n            <TabsList class=\"relative z-2\">\n                <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                <TabsTrigger value=\"code\">Code</TabsTrigger>\n            </TabsList>\n            <TabsContent class=\"-mx-2 grow min-h-px\">\n                <TabsPanel value=\"preview\" class=\"h-full\">\n                    <div\n                        class=\"flex items-center justify-center p-8 h-full bg-neutral-100 rounded-lg\"\n                    >\n                        <Button @click=\"handleClick\">Click me</Button>\n                    </div>\n                </TabsPanel>\n                <TabsPanel value=\"code\" class=\"grow min-h-px\">\n                    <CodeBlock\n                        language=\"vue\"\n                        :code=\"componentData.codeBlocks.basic\"\n                        auto-theme\n                        light-theme=\"github-light\"\n                        dark-theme=\"github-dark\"\n                        class=\"border-none shadow-none\"\n                    />\n                </TabsPanel>\n            </TabsContent>\n        </Tabs> -->\n\n        <div class=\"mt-10 space-y-4\">\n            <h3>Usage</h3>\n            <CodeBlock\n                language=\"ts\"\n                :code=\"componentData.codeBlocks.import\"\n                auto-theme\n                light-theme=\"github-light\"\n                dark-theme=\"github-dark\"\n                class=\"border-none shadow-none\"\n            />\n            <CodeBlock\n                language=\"vue\"\n                :code=\"componentData.codeBlocks.oneLineUsage\"\n                auto-theme\n                light-theme=\"github-light\"\n                dark-theme=\"github-dark\"\n                class=\"border-none shadow-none\"\n            />\n        </div>\n\n        <!-- Variants Example -->\n        <div class=\"space-y-4 mt-8\">\n            <h3>With Variants</h3>\n            <Tabs class=\"px-2 pt-2 bg-background border rounded-lg\">\n                <TabsList class=\"relative z-2\">\n                    <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                    <TabsTrigger value=\"code\">Code</TabsTrigger>\n                </TabsList>\n                <TabsContent class=\"-mx-2 grow min-h-px\">\n                    <TabsPanel value=\"preview\" class=\"h-full border-t\">\n                        <div\n                            class=\"flex items-center justify-center gap-2 p-8 h-full min-h-72 rounded-lg\"\n                        >\n                            <Button variant=\"default\">Default</Button>\n                            <Button variant=\"secondary\">Secondary</Button>\n                            <Button variant=\"outline\">Outline</Button>\n                            <Button variant=\"ghost\">Ghost</Button>\n                        </div>\n                    </TabsPanel>\n                    <TabsPanel value=\"code\" class=\"grow min-h-px border-t\">\n                        <CodeBlock\n                            language=\"vue\"\n                            :code=\"componentData.codeBlocks.... [truncated]",
    "url": "/docs/button",
    "source": "docs"
  },
  {
    "objectID": "/docs/checkbox",
    "title": "Checkbox",
    "content": "<script setup lang=\"ts\">\nimport { computed, ref } from 'vue'\nimport {\n    Checkbox,\n    CodeBlock,\n    Tabs,\n    TabsList,\n    TabsTrigger,\n    TabsContent,\n    TabsPanel,\n    Table,\n    TableHeader,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n} from '@picklepilot/pickle-jar-ui'\n\n// Import code examples from separate file\nimport { checkboxCodeExamples } from './checkbox-code-examples'\n\nconst componentData = computed(() => ({\n    title: 'Checkbox',\n    description:\n        'A customizable checkbox component with accessibility features, theme support, and v-model integration. Supports indeterminate state and keyboard navigation.',\n    props: [\n        {\n            name: 'modelValue',\n            type: 'boolean',\n            default: 'false',\n            description: 'The current checked state of the checkbox',\n        },\n        {\n            name: 'disabled',\n            type: 'boolean',\n            default: 'false',\n            description:\n                'Whether the checkbox is disabled. When true, the checkbox cannot be interacted with and shows a disabled state.',\n        },\n        {\n            name: 'indeterminate',\n            type: 'boolean',\n            default: 'false',\n            description:\n                'Whether the checkbox is in an indeterminate state. When true, shows a different visual state (typically a dash instead of a check).',\n        },\n        {\n            name: 'id',\n            type: 'string',\n            default: 'auto-generated',\n            description:\n                'The unique identifier for the checkbox. Used for accessibility and form association.',\n        },\n        {\n            name: 'name',\n            type: 'string',\n            default: '',\n            description:\n                'The name attribute for the checkbox. Used for form submission and grouping.',\n        },\n        {\n            name: 'value',\n            type: 'string | number',\n            default: '',\n            description:\n                'The value attribute for the checkbox. Used for form submission.',\n        },\n        {\n            name: 'required',\n            type: 'boolean',\n            default: 'false',\n            description: 'Whether the checkbox is required in a form.',\n        },\n        {\n            name: 'theme',\n            type: 'object',\n            default: '{}',\n            description:\n                \"Locally customize the component's theme properties including checkbox, container, and label styles.\",\n        },\n    ],\n    events: [\n        {\n            name: 'update:modelValue',\n            description:\n                'Emitted when the checkbox state changes (for v-model). Receives the new boolean value as payload.',\n        },\n        {\n            name: 'change',\n            description:\n                'Emitted when the checkbox state changes. Receives the new boolean value as payload.',\n        },\n        {\n            name: 'click',\n            description:\n                'Emitted when the checkbox is clicked. Receives the MouseEvent as payload.',\n        },\n    ],\n    slots: [\n        {\n            name: 'default',\n            description: 'The label content for the checkbox.',\n        },\n    ],\n    codeBlocks: checkboxCodeExamples,\n}))\n\nconst checked = ref(false)\n</script>\n\n<template>\n    <div class=\"prose prose-gray max-w-none\">\n        <h1 class=\"\">\n            {{ componentData.title }}\n        </h1>\n        <p class=\"lead\">\n            {{ componentData.description }}\n        </p>\n\n        <div class=\"mt-10 space-y-4\">\n            <h3>Usage</h3>\n            <CodeBlock\n                language=\"ts\"\n                :code=\"componentData.codeBlocks.import\"\n                auto-theme\n                light-theme=\"github-light\"\n                dark-theme=\"github-dark\"\n                class=\"border-none shadow-none\"\n            />\n            <CodeBlock\n                language=\"vue\"\n                :code=\"componentData.codeBlocks.basicUsage\"\n                auto-theme\n                light-theme=\"github-light\"\n                dark-theme=\"github-dark\"\n                class=\"border-none shadow-none\"\n            />\n        </div>\n\n        <!-- Basic Usage Example -->\n        <div class=\"space-y-4 mt-8\">\n            <h3>Basic Usage</h3>\n            <Tabs class=\"px-2 pt-2 border rounded-lg\">\n                <TabsList class=\"relative z-2\">\n                    <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                    <TabsTrigger value=\"code\">Code</TabsTrigger>\n                </TabsList>\n                <TabsContent class=\"-mx-2 grow min-h-px border-none\">\n                    <TabsPanel value=\"preview\" class=\"h-full border-t\">\n                        <div\n                            class=\"flex items-center justify-center gap-2 p-8 h-full min-h-72 bg-white rounded-lg\"\n                        >\n                            <Checkbox v-model=\"checked\">\n                                Accept terms and conditions\n                            </Checkbox>\n                        </div>\n                    </TabsPanel>\n                    <TabsPanel value=\"code\" class=\"grow min-h-px border-t\">\n                        <CodeBlock\n                            language=\"vue\"\n                            :code=\"componentData.codeBlocks.basicUsage\"\n                            auto-theme\n                            light-theme=\"github-light\"\n                            dark-theme=\"github-dark\"\n                            class=\"border-none rounded-t-none shadow-none\"\n                        />\n                    </TabsPanel>\n                </TabsContent>\n            </Tabs>\n        </div>\n\n        <div class=\"mt-10 space-y-4\">\n            <h2>Props</h2>\n            <div class=\"overflow-x-auto border rounded-lg shadow-sm\">\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHead>Name</TableHead>\n                            <TableHead>Type</TableHead>\n                            <TableHead>Default</TableHead>\n                            <TableHead>Description</TableHead>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        <TableRow\n                            v-for=\"prop in componentData.props\"\n                            :key=\"prop.name\"\n                        >\n                            <TableCell>\n                                <code>{{ prop.name }}</code>\n                            </TableCell>\n                            <TableCell>\n                                <code>{{ prop.type }}</code>\n                            </TableCell>\n                            <TableCell>\n                                <code>{{ prop.default }}</code>\n                            </TableCell>\n                            <TableCell>\n                                {{ prop.description }}\n                                <div\n                                    v-if=\"prop.options\"\n                                    class=\"mt-1 text-sm text-neutral-500\"\n                                >\n                                    Options: {{ prop.options.join(', ') }}\n                                </div>\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </div>\n        </div>\n\n        <div class=\"mt-10 space-y-4\">\n            <h2>Events</h2>\n            <div class=\"overflow-x-auto border rounded-lg shadow-sm\">\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHead>Name</TableHead>\n                            <TableHead>Description</TableHead>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        <TableRow\n                            v-for=\"event in componentData.events\"\n                            :key=\"event.name\"\n                        >\n                            <TableCell>\n                                <code>{{ event.name }}</code>\n                            </TableCell>\n                            <TableCell>\n                                {{ event.description }}\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </div>\n        </div>\n\n        <div class=\"mt-10 space-y-4\">\n            <h2>Slots</h2>\n            <div class=\"overflow-x-auto border rounded-lg shadow-sm\">\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHead>Name</TableHead>\n                            <TableHead>Description</TableHead>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        <TableRow\n                            v-for=\"slot in componentData.slots\"\n                            :key=\"slot.name\"\n                        >\n                            <TableCell>\n                                <code>{{ slot.name }}</code>\n                            </TableCell>\n                            <TableCell>\n                                {{ slot.description }}\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </div>\n        </div>\n    </div>\n</template>\n",
    "url": "/docs/checkbox",
    "source": "docs"
  },
  {
    "objectID": "/docs/column-manager",
    "title": "Column Manager",
    "content": "<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport DocsLayout from '@/components/docs/DocsLayout.vue'\nimport {\n    ColumnManager,\n    CodeBlock,\n    DropdownItem,\n    DropdownSeparator,\n} from '@picklepilot/pickle-jar-ui'\nimport type {\n    ColumnDefinition,\n    ColumnGroupDefinition,\n} from '@picklepilot/pickle-jar-ui'\n\nconst columns = ref<ColumnDefinition[]>([\n    { id: 'name', label: 'Name', name: 'Name', type: 'string', group: 'main' },\n    {\n        id: 'email',\n        label: 'Email',\n        name: 'Email',\n        type: 'string',\n        group: 'main',\n    },\n    { id: 'role', label: 'Role', name: 'Role', type: 'string', group: 'main' },\n    {\n        id: 'status',\n        label: 'Status',\n        name: 'Status',\n        type: 'string',\n        group: 'main',\n    },\n    {\n        id: 'created_at',\n        label: 'Created At',\n        name: 'Created At',\n        type: 'date',\n        group: 'main',\n    },\n    {\n        id: 'last_login',\n        label: 'Last Login',\n        name: 'Last Login',\n        type: 'date',\n        group: 'meta',\n    },\n    {\n        id: 'department',\n        label: 'Department',\n        name: 'Department',\n        type: 'string',\n        group: 'meta',\n    },\n    {\n        id: 'salary',\n        label: 'Salary',\n        name: 'Salary',\n        type: 'number',\n        group: 'system',\n    },\n    {\n        id: 'is_active',\n        label: 'Active',\n        name: 'Active',\n        type: 'boolean',\n        group: 'system',\n    },\n    {\n        id: 'avatar',\n        label: 'Avatar',\n        name: 'Avatar',\n        type: 'image',\n        group: 'system',\n    },\n])\n\nconst groups = ref<ColumnGroupDefinition[]>([\n    { id: 'main', name: 'Main Columns', color: '#bae6fd' },\n    { id: 'meta', name: 'Meta Columns', color: '#fbcfe8' },\n    { id: 'system', name: 'System Info', color: '#dcfce7' },\n])\n\nconst searcher = async (query: string) => {\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 100))\n    return columns.value.filter(col =>\n        col.name.toLowerCase().includes(query.toLowerCase())\n    )\n}\n\nconst focusedColumn = ref<ColumnDefinition | null>(null)\n</script>\n\n<template>\n    <DocsLayout>\n        <div class=\"prose prose-gray max-w-none\">\n            <h1>Column Manager</h1>\n            <p class=\"lead\">\n                The Column Manager is a powerful UI module for managing and\n                configuring data table columns, supporting grouping,\n                drag-and-drop, and customization.\n            </p>\n\n            <h2>Usage</h2>\n            <div class=\"rounded-lg bg-gray-50 p-4 mb-6\">\n                <pre class=\"language-vue\"><code>&lt;template&gt;\n  &lt;ColumnManager\n    :columns=\"columns\"\n    :groups=\"groups\"\n    :searcher=\"searcher\"\n    @update:columns=\"columns = $event\"\n    @update:groups=\"groups = $event\"\n  /&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { ref } from 'vue'\nimport { ColumnManager } from '@picklepilot/pickle-jar-ui'\nconst columns = ref([...])\nconst groups = ref([...])\n&lt;/script&gt;</code></pre>\n            </div>\n\n            <h2>Props</h2>\n            <div class=\"overflow-x-auto mb-8\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Type</th>\n                            <th>Default</th>\n                            <th>Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td><code>columns</code></td>\n                            <td><code>ColumnDefinition[]</code></td>\n                            <td><code>[]</code></td>\n                            <td>List of all available columns.</td>\n                        </tr>\n                        <tr>\n                            <td><code>groups</code></td>\n                            <td><code>ColumnGroupDefinition[]</code></td>\n                            <td><code>[]</code></td>\n                            <td>\n                                List of column groups and their configuration.\n                            </td>\n                        </tr>\n                        <tr>\n                            <td><code>disabled</code></td>\n                            <td><code>string[]</code></td>\n                            <td><code>[]</code></td>\n                            <td>\n                                Array of features to disable (e.g.\n                                <code>['groups']</code>).\n                            </td>\n                        </tr>\n                        <tr>\n                            <td><code>defaultGroupColor</code></td>\n                            <td><code>string</code></td>\n                            <td><code>'#e7e5e4'</code></td>\n                            <td>Default color for new groups.</td>\n                        </tr>\n                        <tr>\n                            <td><code>theme</code></td>\n                            <td><code>Record&lt;string, string&gt;</code></td>\n                            <td><code>{}</code></td>\n                            <td>Custom theme variables.</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <h2>Live Demo!</h2>\n            <CodeBlock\n                language=\"vue\"\n                auto-theme\n                light-theme=\"min-light\"\n                dark-theme=\"min-dark\"\n                code=\"<template>\n  <ColumnManager\n    :columns='columns'\n    :groups='groups'\n    :searcher='async () => []'\n    @update:columns='columns = $event'\n    @update:groups='groups = $event'\n  />\n</template>\n\n<script setup>\nimport { ref } from 'vue'\nimport { ColumnManager } from '@picklepilot/pickle-jar-ui'\n\nconst columns = ref([\n  { id: 'name', label: 'Name', type: 'string' },\n  { id: 'email', label: 'Email', type: 'string' },\n  { id: 'role', label: 'Role', type: 'string' },\n  { id: 'status', label: 'Status', type: 'string' },\n  { id: 'created_at', label: 'Created At', type: 'date' },\n  { id: 'last_login', label: 'Last Login', type: 'date' },\n  { id: 'department', label: 'Department', type: 'string' },\n  { id: 'salary', label: 'Salary', type: 'number' },\n  { id: 'is_active', label: 'Active', type: 'boolean' },\n  { id: 'avatar', label: 'Avatar', type: 'image' },\n])\n\nconst groups = ref([\n  { id: 'main', name: 'Main Columns', color: '#bae6fd' },\n  { id: 'meta', name: 'Meta Columns', color: '#fbcfe8' },\n  { id: 'system', name: 'System Info', color: '#dcfce7' },\n])\n</script>\"\n            >\n                <template #demo>\n                    <div\n                        class=\"-m-4 flex items-center justify-center rounded-lg\"\n                    >\n                        <div class=\"w-full\">\n                            <ColumnManager\n                                :columns=\"columns\"\n                                :groups=\"groups\"\n                                :searcher=\"searcher\"\n                                v-model:focused-column=\"focusedColumn\"\n                                @update:focused-column=\"focusedColumn = $event\"\n                                @update:columns=\"columns = $event\"\n                                @update:groups=\"groups = $event\"\n                            >\n                                <template #option=\"{ item }\">\n                                    <div class=\"flex-1\">\n                                        <span class=\"font-medium\">{{\n                                            item.name\n                                        }}</span>\n                                        <span class=\"text-muted-foreground ml-2\"\n                                            >({{ item.type }})</span\n                                        >\n                                    </div>\n                                </template>\n\n                                <template\n                                    #dropdown-content=\"{\n                                        // group,\n                                        groupData,\n                                        emit,\n                                    }\"\n                                >\n                                    <DropdownItem @select=\"emit('add-column')\">\n                                        Add column\n                                    </DropdownItem>\n                                    <DropdownItem>\n                                        Add custom column\n                                    </DropdownItem>\n                                    <DropdownSeparator />\n                                    <DropdownItem\n                                        @select=\"emit('edit-group', groupData)\"\n                                    >\n                                        Edit group\n                                    </DropdownItem>\n                                    <DropdownItem\n                                        @select=\"\n                                            emit('delete-group', groupData)\n                                        \"\n                                    >\n                                        Delete group\n                                    </DropdownItem>\n                                </template>\n\n                                <div\n                                    class=\"p-4 grow border-l border-ring\"\n             ... [truncated]",
    "url": "/docs/column-manager",
    "source": "docs"
  },
  {
    "objectID": "/docs/drawer",
    "title": "Drawer",
    "content": "<script setup lang=\"ts\">\nimport { computed, ref } from 'vue'\nimport {\n    Button,\n    CodeBlock,\n    Drawer,\n    DrawerContent,\n    DrawerTrigger,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n    Tabs,\n    TabsContent,\n    TabsList,\n    TabsPanel,\n    TabsTrigger,\n} from '@picklepilot/pickle-jar-ui'\n\n// Import code examples from separate file\nimport { drawerCodeExamples } from './drawer-code-examples'\nimport { parseMarkdown } from '@picklepilot/pickle-jar-core'\n\nconst componentData = computed(() => ({\n    title: 'Drawer',\n    description:\n        'A smooth and modern drawer component with gesture-driven animations. This is a wrapper around the Vue port of the [Vaul Drawer](https://vaul.unovue.com/) component.',\n    props: [],\n    events: [],\n    slots: [\n        {\n            name: 'default',\n            description: 'The content of the drawer.',\n        },\n        {\n            name: 'trigger',\n            description: 'The trigger for the drawer.',\n        },\n    ],\n    codeBlocks: drawerCodeExamples,\n}))\n</script>\n\n<template>\n    <div class=\"prose prose-gray max-w-none\">\n        <h1>{{ componentData.title }}</h1>\n        <p\n            class=\"lead markdown-it-content\"\n            v-html=\"parseMarkdown(componentData.description)\"\n        />\n\n        <!-- Basic Usage Example -->\n        <div class=\"space-y-4 mt-8\">\n            <h3>Basic Usage</h3>\n            <Tabs class=\"px-2 pt-2 border rounded-lg\">\n                <TabsList class=\"relative z-2\">\n                    <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                    <TabsTrigger value=\"code\">Code</TabsTrigger>\n                </TabsList>\n                <TabsContent class=\"-mx-2 grow min-h-px border-none\">\n                    <TabsPanel value=\"preview\" class=\"h-full border-t\">\n                        <div\n                            class=\"flex items-center justify-center gap-2 p-8 h-full min-h-72 bg-white rounded-lg\"\n                        >\n                            <Drawer>\n                                <template #trigger>\n                                    <DrawerTrigger>\n                                        <Button variant=\"outline\">Open</Button>\n                                    </DrawerTrigger>\n                                </template>\n                                <DrawerContent class=\"max-h-[50%]\">\n                                    <div\n                                        class=\"mx-auto w-full max-w-md border rounded-lg p-4\"\n                                    >\n                                        <p>Content</p>\n                                    </div>\n                                </DrawerContent>\n                            </Drawer>\n                        </div>\n                    </TabsPanel>\n                    <TabsPanel value=\"code\" class=\"grow min-h-px border-t\">\n                        <CodeBlock\n                            language=\"vue\"\n                            :code=\"componentData.codeBlocks.basicUsage\"\n                            auto-theme\n                            light-theme=\"github-light\"\n                            dark-theme=\"github-dark\"\n                            class=\"border-none rounded-t-none shadow-none\"\n                        />\n                    </TabsPanel>\n                </TabsContent>\n            </Tabs>\n        </div>\n\n        <div class=\"mt-10 space-y-4\">\n            <h2>Slots</h2>\n            <div class=\"overflow-x-auto border rounded-lg shadow-sm\">\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHead>Name</TableHead>\n                            <TableHead>Description</TableHead>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        <TableRow\n                            v-for=\"slot in componentData.slots\"\n                            :key=\"slot.name\"\n                        >\n                            <TableCell>\n                                <code>{{ slot.name }}</code>\n                            </TableCell>\n                            <TableCell>\n                                {{ slot.description }}\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </div>\n        </div>\n    </div>\n</template>\n",
    "url": "/docs/drawer",
    "source": "docs"
  },
  {
    "objectID": "/docs/dropdown",
    "title": "Dropdown",
    "content": "<script setup lang=\"ts\">\nimport { computed, ref } from 'vue'\nimport {\n    Dropdown,\n    DropdownTrigger,\n    DropdownContent,\n    DropdownItem,\n    DropdownLabel,\n    DropdownSeparator,\n    // DropdownSub,\n    // DropdownSubTrigger,\n    // DropdownSubContent,\n    Button,\n    CodeBlock,\n    Tabs,\n    TabsList,\n    TabsTrigger,\n    TabsContent,\n    TabsPanel,\n    Table,\n    TableHeader,\n    TableBody,\n    TableRow,\n    TableCell,\n    TableHead,\n} from '@picklepilot/pickle-jar-ui'\n\n// Import code examples from separate file\nimport { dropdownCodeExamples } from './dropdown-code-examples'\n\nconst componentData = computed(() => ({\n    title: 'Dropdown',\n    description:\n        'A flexible dropdown menu component with support for submenus, keyboard navigation, and accessibility features. Built with floating UI for precise positioning.',\n    props: [\n        {\n            name: 'side',\n            type: 'string',\n            default: 'bottom',\n            description:\n                'The side of the trigger where the dropdown should appear',\n            options: ['top', 'right', 'bottom', 'left'],\n        },\n        {\n            name: 'align',\n            type: 'string',\n            default: 'start',\n            description:\n                'The alignment of the dropdown relative to the trigger',\n            options: ['start', 'center', 'end'],\n        },\n        {\n            name: 'sideOffset',\n            type: 'number',\n            default: '4',\n            description: 'The distance in pixels from the trigger',\n        },\n        {\n            name: 'alignOffset',\n            type: 'number',\n            default: '0',\n            description: 'The offset in pixels from the start or end alignment',\n        },\n        {\n            name: 'avoidCollisions',\n            type: 'boolean',\n            default: 'true',\n            description:\n                'Whether to automatically flip the dropdown when it would overflow the viewport',\n        },\n    ],\n    events: [\n        {\n            name: 'select',\n            description:\n                'Fired when an item is selected (via keyboard or mouse)',\n        },\n        {\n            name: 'click',\n            description: 'Fired when the dropdown is clicked (via mouse)',\n        },\n    ] as Array<{ name: string; description: string }>,\n    slots: [\n        {\n            name: 'default',\n            description:\n                'The dropdown content including trigger and menu items',\n        },\n    ],\n    codeBlocks: dropdownCodeExamples,\n}))\n\nconst selectedAction = ref('')\nconst handleAction = (action: string) => {\n    selectedAction.value = action\n}\n</script>\n\n<template>\n    <div class=\"prose prose-gray max-w-none\">\n        <h1>{{ componentData.title }}</h1>\n        <p class=\"lead\">{{ componentData.description }}</p>\n\n        <div class=\"mt-10 space-y-4\">\n            <h3>Usage</h3>\n            <CodeBlock\n                language=\"ts\"\n                :code=\"componentData.codeBlocks.import\"\n                auto-theme\n                light-theme=\"github-light\"\n                dark-theme=\"github-dark\"\n                class=\"border-none shadow-none\"\n            />\n            <!-- <CodeBlock\n                language=\"vue\"\n                :code=\"componentData.codeBlocks.oneLineUsage\"\n                auto-theme\n                light-theme=\"github-light\"\n                dark-theme=\"github-dark\"\n                class=\"border-none shadow-none\"\n            /> -->\n        </div>\n\n        <!-- Basic Usage Example -->\n        <div class=\"space-y-4 mt-8\">\n            <h3>Basic Usage</h3>\n            <Tabs class=\"px-2 pt-2 border rounded-lg\">\n                <TabsList class=\"relative z-2\">\n                    <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                    <TabsTrigger value=\"code\">Code</TabsTrigger>\n                </TabsList>\n                <TabsContent class=\"-mx-2 grow min-h-px border-none\">\n                    <TabsPanel value=\"preview\" class=\"h-full border-t\">\n                        <div\n                            class=\"flex items-center justify-center p-8 h-full min-h-72 bg-white rounded-lg\"\n                        >\n                            <Dropdown>\n                                <DropdownTrigger>\n                                    <Button>Open Menu</Button>\n                                </DropdownTrigger>\n                                <DropdownContent>\n                                    <DropdownItem\n                                        @click=\"handleAction('profile')\"\n                                        >Profile</DropdownItem\n                                    >\n                                    <DropdownItem\n                                        @click=\"handleAction('settings')\"\n                                        >Settings</DropdownItem\n                                    >\n                                    <DropdownItem\n                                        @click=\"handleAction('logout')\"\n                                        >Logout</DropdownItem\n                                    >\n                                </DropdownContent>\n                            </Dropdown>\n                        </div>\n                    </TabsPanel>\n                    <TabsPanel value=\"code\" class=\"grow min-h-px border-t\">\n                        <CodeBlock\n                            language=\"vue-html\"\n                            :code=\"componentData.codeBlocks.basicUsage\"\n                            auto-theme\n                            light-theme=\"github-light\"\n                            dark-theme=\"github-dark\"\n                            class=\"border-none rounded-t-none shadow-none\"\n                        />\n                    </TabsPanel>\n                </TabsContent>\n            </Tabs>\n        </div>\n\n        <!-- With Labels Example -->\n        <div class=\"space-y-4 mt-8\">\n            <h3>With Labels</h3>\n            <Tabs class=\"px-2 pt-2 border rounded-lg\">\n                <TabsList class=\"relative z-2\">\n                    <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                    <TabsTrigger value=\"code\">Code</TabsTrigger>\n                </TabsList>\n                <TabsContent class=\"-mx-2 grow min-h-px border-none\">\n                    <TabsPanel value=\"preview\" class=\"h-full border-t\">\n                        <div\n                            class=\"flex items-center justify-center p-8 h-full min-h-72 bg-white rounded-lg\"\n                        >\n                            <Dropdown>\n                                <DropdownTrigger>\n                                    <Button>Account</Button>\n                                </DropdownTrigger>\n                                <DropdownContent>\n                                    <DropdownLabel>User Account</DropdownLabel>\n                                    <DropdownItem\n                                        @click=\"handleAction('profile')\"\n                                        >Profile</DropdownItem\n                                    >\n                                    <DropdownItem\n                                        @click=\"handleAction('settings')\"\n                                        >Settings</DropdownItem\n                                    >\n                                    <DropdownSeparator />\n                                    <DropdownLabel>Actions</DropdownLabel>\n                                    <DropdownItem\n                                        @click=\"handleAction('logout')\"\n                                        >Logout</DropdownItem\n                                    >\n                                </DropdownContent>\n                            </Dropdown>\n                        </div>\n                    </TabsPanel>\n                    <TabsPanel value=\"code\" class=\"grow min-h-px border-t\">\n                        <CodeBlock\n                            language=\"vue\"\n                            :code=\"componentData.codeBlocks.withLabels\"\n                            auto-theme\n                            light-theme=\"github-light\"\n                            dark-theme=\"github-dark\"\n                            class=\"border-none rounded-t-none shadow-none\"\n                        />\n                    </TabsPanel>\n                </TabsContent>\n            </Tabs>\n        </div>\n\n        <!-- With Submenus Example -->\n        <!-- <div class=\"space-y-4 mt-8\">\n            <h3>With Su... [truncated]",
    "url": "/docs/dropdown",
    "source": "docs"
  },
  {
    "objectID": "/docs/index",
    "title": "Index",
    "content": "<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport DocsLayout from '@/components/docs/DocsLayout.vue'\n// import { Button } from '@picklepilot/pickle-jar-ui'\nimport {\n    MousePointer,\n    Type,\n    //  Palette,\n    Search,\n    Settings,\n    Layers,\n    MessageSquare,\n    FileText,\n    Grid,\n    Zap,\n} from 'lucide-vue-next'\n\nconst componentCategories = computed(() => [\n    {\n        title: 'Form Elements',\n        description: 'Interactive form components for user input',\n        icon: Type,\n        components: [\n            {\n                name: 'Button',\n                href: '/docs/components/button',\n                description:\n                    'Versatile button component with multiple variants',\n            },\n            {\n                name: 'Input',\n                href: '/docs/components/input',\n                description: 'Text input field with validation support',\n            },\n            {\n                name: 'Combobox',\n                href: '/docs/components/combobox',\n                description: 'Searchable dropdown with keyboard navigation',\n            },\n            {\n                name: 'Typeahead',\n                href: '/docs/components/typeahead',\n                description: 'Autocomplete input with suggestions',\n            },\n            {\n                name: 'Color Picker',\n                href: '/docs/components/color-picker',\n                description: 'Color selection component with palette',\n            },\n        ],\n    },\n    {\n        title: 'Overlay Components',\n        description: 'Components that appear above other content',\n        icon: Layers,\n        components: [\n            {\n                name: 'Tooltip',\n                href: '/docs/components/tooltip',\n                description: 'Contextual information on hover',\n            },\n            {\n                name: 'Popover',\n                href: '/docs/components/popover',\n                description: 'Floating content container',\n            },\n            {\n                name: 'Dropdown',\n                href: '/docs/components/dropdown',\n                description: 'Menu with multiple options',\n            },\n        ],\n    },\n    {\n        title: 'Feedback & Status',\n        description: 'Components for user feedback and status indication',\n        icon: MessageSquare,\n        components: [\n            {\n                name: 'Alert',\n                href: '/docs/components/alert',\n                description: 'Important message display',\n            },\n            {\n                name: 'Badge',\n                href: '/docs/components/badge',\n                description: 'Status indicator or count display',\n            },\n            {\n                name: 'Empty State',\n                href: '/docs/components/empty-state',\n                description: 'Placeholder for empty content',\n            },\n        ],\n    },\n    {\n        title: 'Content Display',\n        description: 'Components for displaying structured content',\n        icon: FileText,\n        components: [\n            {\n                name: 'Code Block',\n                href: '/docs/components/code-block',\n                description: 'Syntax-highlighted code display',\n            },\n        ],\n    },\n    {\n        title: 'Advanced Modules',\n        description: 'Complex components for specific use cases',\n        icon: Zap,\n        components: [\n            {\n                name: 'Command Palette',\n                href: '/docs/components/command-palette',\n                description: 'Global search and command interface',\n            },\n            {\n                name: 'Confirmation Dialog',\n                href: '/docs/components/confirmation-dialog',\n                description: 'Modal for user confirmations',\n            },\n            {\n                name: 'Tabs Navigation',\n                href: '/docs/components/tabs-nav',\n                description: 'Tabbed content organization',\n            },\n            {\n                name: 'Column Manager',\n                href: '/docs/components/column-manager',\n                description: 'Data table column configuration',\n            },\n            {\n                name: 'Fluent Query Builder',\n                href: '/docs/components/fluent-query-builder',\n                description: 'Dynamic query construction interface',\n            },\n        ],\n    },\n    {\n        title: 'Utilities',\n        description: 'Helper components and utilities',\n        icon: Settings,\n        components: [\n            {\n                name: 'Theme Toggle',\n                href: '/docs/components/theme-toggle',\n                description: 'Dark/light mode switcher',\n            },\n        ],\n    },\n])\n\nconst allComponents = computed(() =>\n    componentCategories.value.flatMap(category => category.components)\n)\n</script>\n\n<template>\n    <DocsLayout>\n        <div class=\"prose prose-gray max-w-none\">\n            <div class=\"mb-8\">\n                <h1 class=\"text-4xl font-bold tracking-tight\">Components</h1>\n                <p class=\"text-xl text-muted-foreground mt-4\">\n                    A collection of beautifully designed, accessible components\n                    built with Vue 3 and TypeScript.\n                </p>\n            </div>\n\n            <!-- Quick Search -->\n            <div class=\"mb-12\">\n                <div class=\"relative\">\n                    <Search\n                        class=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\"\n                    />\n                    <input\n                        type=\"text\"\n                        placeholder=\"Search components...\"\n                        class=\"w-full pl-10 pr-4 py-3 border border-border rounded-lg bg-background text-foreground placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent\"\n                    />\n                </div>\n            </div>\n\n            <!-- Component Categories -->\n            <div class=\"space-y-12\">\n                <div\n                    v-for=\"category in componentCategories\"\n                    :key=\"category.title\"\n                    class=\"space-y-6\"\n                >\n                    <div class=\"flex items-center gap-3\">\n                        <component\n                            :is=\"category.icon\"\n                            class=\"h-6 w-6 text-primary\"\n                        />\n                        <h2 class=\"text-2xl font-semibold\">\n                            {{ category.title }}\n                        </h2>\n                    </div>\n                    <p class=\"text-muted-foreground text-lg\">\n                        {{ category.description }}\n                    </p>\n\n                    <div\n                        class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"\n                    >\n                        <RouterLink\n                            v-for=\"component in category.components\"\n                            :key=\"component.name\"\n                            :to=\"component.href\"\n                            class=\"group block p-6 border border-border rounded-lg bg-card hover:bg-accent/50 transition-all duration-200 hover:border-primary/20 hover:shadow-md\"\n                        >\n                            <div class=\"flex items-start justify-between mb-3\">\n                                <h3\n                                    class=\"font-semibold text-lg group-hover:text-primary transition-colors\"\n                                >\n                                    {{ component.name }}\n                                </h3>\n                                <MousePointer\n                                    class=\"h-4 w-4 text-muted-foreground group-hover:text-primary transition-colors\"\n                                />\n                            </div>\n                            <p\n                                class=\"text-sm text-muted-foreground leading-relaxed\"\n                            >\n                                {{ component.description }}\n                            </p>\n                        </RouterLink>\n                    </div>\n                </div>\n            </div>\n\n            <!-- All Components Grid -->\n            <div class=\"mt-16 pt-12 border-t border-border\">\n                <div class=\"flex items-center gap-3 mb-8\">\n                    <Grid class=\"h-6 w-6 text-primary\" />\n                    <h2 class=\"text-2xl font-semibold\">All Components</h2>\n                </div>\n\n                <div\n                    class=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3\"\n                >\n                    <RouterLink\n                        v-for=\"component in allComponents\"\n                        :key=\"component.name\"\n                        :to=\"component.href\"\n                        class=\"group block p-4 border border-border rounded-lg bg-card hover:bg-accent/50 transition-all duration-200 hover:border-primary/20 text-center\"\n                    >\n                        <h3\n                            class=\"font-medium text-sm group-hover:text-primary transition-colors\"\n                        >\n                            {{ component.name }}\n                        </h3>\n                    </RouterLink>\n                </div>\n            </div>\n\n            <!-- Getting Started CTA -->\n            <di... [truncated]",
    "url": "/docs/index",
    "source": "docs"
  },
  {
    "objectID": "/docs/input",
    "title": "Input",
    "content": "<script setup lang=\"ts\">\nimport { computed, ref } from 'vue'\nimport {\n    Input,\n    CodeBlock,\n    Tabs,\n    TabsList,\n    TabsTrigger,\n    TabsContent,\n    TabsPanel,\n    Table,\n    TableHeader,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n} from '@picklepilot/pickle-jar-ui'\n\n// Import code examples from separate file\nimport { inputCodeExamples } from './input-code-examples'\n\nconst componentData = computed(() => ({\n    title: 'Input',\n    description:\n        'A versatile input component with support for different types, themes, and accessibility features. Supports v-model and custom styling.',\n    props: [\n        {\n            name: 'type',\n            type: 'string',\n            default: 'text',\n            description: 'The type of input field',\n            options: ['text', 'email', 'password', 'number', 'tel', 'url'],\n        },\n        {\n            name: 'placeholder',\n            type: 'string',\n            default: '',\n            description: 'Placeholder text for the input field',\n        },\n        {\n            name: 'value',\n            type: 'string',\n            default: '',\n            description: 'The input value (for named v-model)',\n        },\n        {\n            name: 'modelValue',\n            type: 'string',\n            default: '',\n            description: 'The input value (for v-model)',\n        },\n        {\n            name: 'disabled',\n            type: 'boolean',\n            default: 'false',\n            description:\n                'Whether the input is disabled. When true, the input cannot be interacted with and shows a disabled state.',\n        },\n        {\n            name: 'theme',\n            type: 'object',\n            default: '{}',\n            description:\n                \"Locally customize the component's theme properties including input styles.\",\n        },\n    ],\n    events: [\n        {\n            name: 'update:modelValue',\n            description:\n                'Emitted when the input value changes (for v-model). Receives the new value as payload.',\n        },\n        {\n            name: 'update:value',\n            description:\n                'Emitted when the input value changes (for named v-model). Receives the new value as payload.',\n        },\n        {\n            name: 'input',\n            description:\n                'Emitted when the input value changes. Receives the new value as payload.',\n        },\n    ],\n    slots: [],\n    codeBlocks: inputCodeExamples,\n}))\n\nconst inputValue = ref('Hello World')\n</script>\n\n<template>\n    <div class=\"prose prose-gray max-w-none\">\n        <h1>{{ componentData.title }}</h1>\n        <p class=\"lead\">{{ componentData.description }}</p>\n\n        <div class=\"mt-10 space-y-4\">\n            <h3>Usage</h3>\n            <CodeBlock\n                language=\"ts\"\n                :code=\"componentData.codeBlocks.import\"\n                auto-theme\n                light-theme=\"github-light\"\n                dark-theme=\"github-dark\"\n                class=\"border-none shadow-none\"\n            />\n            <CodeBlock\n                language=\"vue\"\n                :code=\"componentData.codeBlocks.oneLineUsage\"\n                auto-theme\n                light-theme=\"github-light\"\n                dark-theme=\"github-dark\"\n                class=\"border-none shadow-none\"\n            />\n        </div>\n\n        <!-- Basic Usage Example -->\n        <div class=\"space-y-4 mt-8\">\n            <h3>Basic Usage</h3>\n            <Tabs class=\"px-2 pt-2 border rounded-lg\">\n                <TabsList class=\"relative z-2\">\n                    <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                    <TabsTrigger value=\"code\">Code</TabsTrigger>\n                </TabsList>\n                <TabsContent class=\"-mx-2 grow min-h-px border-none\">\n                    <TabsPanel value=\"preview\" class=\"h-full border-t\">\n                        <div\n                            class=\"flex items-center justify-center gap-2 p-8 h-full min-h-72 bg-white rounded-lg\"\n                        >\n                            <Input type=\"text\" placeholder=\"Enter text...\" />\n                        </div>\n                    </TabsPanel>\n                    <TabsPanel value=\"code\" class=\"grow min-h-px border-t\">\n                        <CodeBlock\n                            language=\"vue\"\n                            :code=\"componentData.codeBlocks.basicUsage\"\n                            auto-theme\n                            light-theme=\"github-light\"\n                            dark-theme=\"github-dark\"\n                            class=\"border-none rounded-t-none shadow-none\"\n                        />\n                    </TabsPanel>\n                </TabsContent>\n            </Tabs>\n        </div>\n\n        <!-- With Value Example -->\n        <div class=\"space-y-4 mt-8\">\n            <h3>With Value</h3>\n            <Tabs class=\"px-2 pt-2 border rounded-lg\">\n                <TabsList class=\"relative z-2\">\n                    <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                    <TabsTrigger value=\"code\">Code</TabsTrigger>\n                </TabsList>\n                <TabsContent class=\"-mx-2 grow min-h-px border-none\">\n                    <TabsPanel value=\"preview\" class=\"h-full border-t\">\n                        <div\n                            class=\"flex items-center justify-center gap-2 p-8 h-full min-h-72 bg-white rounded-lg\"\n                        >\n                            <Input\n                                type=\"text\"\n                                placeholder=\"Enter text...\"\n                                v-model=\"inputValue\"\n                            />\n                        </div>\n                    </TabsPanel>\n                    <TabsPanel value=\"code\" class=\"grow min-h-px border-t\">\n                        <CodeBlock\n                            language=\"vue\"\n                            :code=\"componentData.codeBlocks.withValue\"\n                            auto-theme\n                            light-theme=\"github-light\"\n                            dark-theme=\"github-dark\"\n                            class=\"border-none rounded-t-none shadow-none\"\n                        />\n                    </TabsPanel>\n                </TabsContent>\n            </Tabs>\n        </div>\n\n        <!-- Input Types Example -->\n        <div class=\"space-y-4 mt-8\">\n            <h3>Input Types</h3>\n            <Tabs class=\"px-2 pt-2 border rounded-lg\">\n                <TabsList class=\"relative z-2\">\n                    <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                    <TabsTrigger value=\"code\">Code</TabsTrigger>\n                </TabsList>\n                <TabsContent class=\"-mx-2 grow min-h-px border-none\">\n                    <TabsPanel value=\"preview\" class=\"h-full border-t\">\n                        <div\n                            class=\"flex flex-col items-center justify-center gap-4 p-8 h-full min-h-72 bg-white rounded-lg\"\n                        >\n                            <Input type=\"text\" placeholder=\"Text input...\" />\n                            <Input type=\"email\" placeholder=\"Email input...\" />\n                            <Input\n                                type=\"password\"\n                                placeholder=\"Password input...\"\n                            />\n                            <Input\n                                type=\"number\"\n                                placeholder=\"Number input...\"\n                            />\n                        </div>\n                    </TabsPanel>\n                    <TabsPanel value=\"code\" class=\"grow min-h-px border-t\">\n                        <CodeBlock\n                            language=\"vue\"\n                            :code=\"componentData.codeBlocks.types\"\n                            auto-theme\n                            light-theme=\"github-light\"\n                            dark-theme=\"github-dark\"\n                            class=\"border-none rounded-t-none shadow-none\"\n                        />\n                    </TabsPanel>\n                </TabsContent>\n            </Tabs>\n        </div>\n\n        <!-- Disabled State Example -->\n        <div class=\"space-y-4 mt-8\">\n            <h3>Disabled State</h3>\n            <Tabs class=\"px-2 pt-2 border rounded-lg\">\n                <TabsList class=\"relative z-2\">\n                    <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                    <TabsTrigger value=\"code\">Code</TabsTrigger>\n                </TabsList>\n                <TabsContent class=\"-mx-2 grow min-h-px border-none\">\n                    <TabsPanel value=\"preview\" class=\"h-full border-t\">\n                        <div\n                            class=\"flex items-center justify-center gap-2 p-8 h-full min-h-72 bg-white rounded-lg\"\n                        >\n                            <Input\n                                type=\"text\"\n                                placeholder=\"Disabled input...\"\n                                disabled\n                            />\n                        </div>\n                    </TabsPanel>\n                    <TabsPanel value=\"code\" class=\"grow min-h-px border-... [truncated]",
    "url": "/docs/input",
    "source": "docs"
  },
  {
    "objectID": "/docs/label",
    "title": "Label",
    "content": "<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport {\n    CodeBlock,\n    Input,\n    Label,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableHeader,\n    TableRow,\n    Tabs,\n    TabsContent,\n    TabsList,\n    TabsPanel,\n    TabsTrigger,\n} from '@picklepilot/pickle-jar-ui'\n\nconst componentData = computed(() => ({\n    title: 'Label',\n    description:\n        'A simple, accessible label component for form controls. Applies consistent styling and ensures proper association with inputs for accessibility.',\n    props: [],\n    events: [] as Array<{ name: string; description: string }>,\n    slots: [\n        {\n            name: 'default',\n            description: 'The label text or content',\n        },\n    ],\n    codeBlocks: {\n        import: `import Label from '@picklepilot/pickle-jar-ui/src/components/label/Label.vue'`,\n        basicUsage: `<Label for=\\\"email\\\">Email Address</Label>\\n<input id=\\\"email\\\" type=\\\"email\\\" class=\\\"input\\\" />`,\n        withInput: `<div class=\\\"flex flex-col gap-2\\\">\\n  <Label for=\\\"username\\\">Username</Label>\\n  <input id=\\\"username\\\" type=\\\"text\\\" class=\\\"input\\\" />\\n</div>`,\n        withCustomContent: `<Label for=\\\"terms\\\">\\n  <span>I agree to the <a href=\\\"/terms\\\" class=\\\"underline\\\">terms and conditions</a></span>\\n</Label>\\n<input id=\\\"terms\\\" type=\\\"checkbox\\\" />`,\n    },\n}))\n</script>\n\n<template>\n    <div class=\"prose prose-gray max-w-none\">\n        <h1>{{ componentData.title }}</h1>\n        <p class=\"lead\">{{ componentData.description }}</p>\n\n        <div class=\"mt-10 space-y-4\">\n            <h3>Usage</h3>\n            <CodeBlock\n                language=\"ts\"\n                :code=\"componentData.codeBlocks.import\"\n                auto-theme\n                light-theme=\"github-light\"\n                dark-theme=\"github-dark\"\n                class=\"border-none shadow-none\"\n            />\n            <CodeBlock\n                language=\"vue-html\"\n                :code=\"componentData.codeBlocks.basicUsage\"\n                auto-theme\n                light-theme=\"github-light\"\n                dark-theme=\"github-dark\"\n                class=\"border-none shadow-none\"\n            />\n        </div>\n\n        <!-- With Input Example -->\n        <div class=\"space-y-4 mt-8\">\n            <h3>With Input</h3>\n            <Tabs class=\"px-2 pt-2 border rounded-lg\">\n                <TabsList class=\"relative z-2\">\n                    <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                    <TabsTrigger value=\"code\">Code</TabsTrigger>\n                </TabsList>\n                <TabsContent class=\"-mx-2 grow min-h-px border-none\">\n                    <TabsPanel value=\"preview\" class=\"h-full border-t\">\n                        <div\n                            class=\"p-8 h-full min-h-32 max-w-md bg-white rounded-lg flex flex-col gap-2\"\n                        >\n                            <Label for=\"username\">Username</Label>\n                            <Input\n                                id=\"username\"\n                                type=\"text\"\n                                class=\"input border px-2 py-1 rounded\"\n                                placeholder=\"Enter your username\"\n                            />\n                        </div>\n                    </TabsPanel>\n                    <TabsPanel value=\"code\" class=\"grow min-h-px border-t\">\n                        <CodeBlock\n                            language=\"vue-html\"\n                            :code=\"componentData.codeBlocks.withInput\"\n                            auto-theme\n                            light-theme=\"github-light\"\n                            dark-theme=\"github-dark\"\n                            class=\"border-none rounded-t-none shadow-none\"\n                        />\n                    </TabsPanel>\n                </TabsContent>\n            </Tabs>\n        </div>\n\n        <!-- With Custom Content Example -->\n        <div class=\"space-y-4 mt-8\">\n            <h3>With Custom Content</h3>\n            <Tabs class=\"px-2 pt-2 border rounded-lg\">\n                <TabsList class=\"relative z-2\">\n                    <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                    <TabsTrigger value=\"code\">Code</TabsTrigger>\n                </TabsList>\n                <TabsContent class=\"-mx-2 grow min-h-px border-none\">\n                    <TabsPanel value=\"preview\" class=\"h-full border-t\">\n                        <div\n                            class=\"p-8 h-full min-h-32 bg-white rounded-lg flex flex-col gap-2\"\n                        >\n                            <Label for=\"terms\">\n                                <span\n                                    >I agree to the\n                                    <a href=\"/terms\" class=\"underline\"\n                                        >terms and conditions</a\n                                    ></span\n                                >\n                            </Label>\n                            <input id=\"terms\" type=\"checkbox\" />\n                        </div>\n                    </TabsPanel>\n                    <TabsPanel value=\"code\" class=\"grow min-h-px border-t\">\n                        <CodeBlock\n                            language=\"vue\"\n                            :code=\"componentData.codeBlocks.withCustomContent\"\n                            auto-theme\n                            light-theme=\"github-light\"\n                            dark-theme=\"github-dark\"\n                            class=\"border-none rounded-t-none shadow-none\"\n                        />\n                    </TabsPanel>\n                </TabsContent>\n            </Tabs>\n        </div>\n\n        <div class=\"mt-10 space-y-4\">\n            <h2>Props</h2>\n            <div class=\"overflow-x-auto border rounded-lg shadow-sm\">\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHead>Name</TableHead>\n                            <TableHead>Type</TableHead>\n                            <TableHead>Default</TableHead>\n                            <TableHead>Description</TableHead>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell\n                                colspan=\"4\"\n                                class=\"text-center text-muted-foreground\"\n                            >\n                                No props\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </div>\n        </div>\n\n        <div class=\"mt-10 space-y-4\">\n            <h2>Events</h2>\n            <div class=\"overflow-x-auto border rounded-lg shadow-sm\">\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHead>Name</TableHead>\n                            <TableHead>Description</TableHead>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell\n                                colspan=\"2\"\n                                class=\"text-center text-muted-foreground\"\n                            >\n                                No events\n                            </TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </div>\n        </div>\n\n        <div class=\"mt-10 space-y-4\">\n            <h2>Slots</h2>\n            <div class=\"overflow-x-auto border rounded-lg shadow-sm\">\n                <Table>\n                    <TableHeader>\n                        <TableRow>\n                            <TableHead>Name</TableHead>\n                            <TableHead>Description</TableHead>\n                        </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                        <TableRow>\n                            <TableCell><code>default</code></TableCell>\n                            <TableCell>The label text or content</TableCell>\n                        </TableRow>\n                    </TableBody>\n                </Table>\n            </div>\n        </div>\n\n        <div class=\"mt-10 space-y-4\">\n            <h2>Accessibility</h2>\n            <p>\n                The <code>Label</code> component renders a semantic\n                <code>&lt;label&gt;</code> element and should be associated with\n                a form control using the <code>for</code> attribute (matching\n                the <code>id</code> of the input). This ensures screen readers\n                and assistive technologies can properly announce the label.\n            </p>\n            <ul>\n                <li>\n                    Always use <code>for</code> on <code>Label</code> and\n                    <code>id</code> on the input.\n                </li>\n                <li>\n                    Supports keyboard navigation and improves form\n                    accessibility.\n                </li>\n                <li>Use semantic and descriptive label text.</li>\n            </ul>\n        </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nexport default {\n    components: { Label },\n}\n</script>\n",
    "url": "/docs/label",
    "source": "docs"
  },
  {
    "objectID": "/docs/table",
    "title": "Table",
    "content": "<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport {\n    Table,\n    TableHeader,\n    TableBody,\n    TableFooter,\n    TableHead,\n    TableRow,\n    TableCell,\n    TableCaption,\n    CodeBlock,\n    Tabs,\n    TabsList,\n    TabsTrigger,\n    TabsContent,\n    TabsPanel,\n} from '@picklepilot/pickle-jar-ui'\n\n// Import code examples from separate file\nimport { tableCodeExamples } from './table-code-examples'\n\nconst componentData = computed(() => ({\n    title: 'Table',\n    description:\n        'A flexible table component with support for headers, footers, captions, and various styling options. Built with semantic HTML and accessible by default.',\n    props: [\n        {\n            name: 'class',\n            type: 'string',\n            default: '',\n            description: 'Additional CSS classes to apply to the table',\n        },\n        {\n            name: 'striped',\n            type: 'boolean',\n            default: 'false',\n            description:\n                'Whether to apply alternating row colors for better readability',\n        },\n        {\n            name: 'spacing',\n            type: 'string',\n            default: 'normal',\n            description: 'The spacing between table cells',\n            options: ['normal', 'compact'],\n        },\n    ],\n    events: [] as Array<{ name: string; description: string }>,\n    slots: [\n        {\n            name: 'default',\n            description:\n                'The table content including headers, body, and footer',\n        },\n    ],\n    codeBlocks: tableCodeExamples,\n}))\n\nconst tableData = [\n    { name: 'John Doe', email: 'john@example.com', role: 'Admin' },\n    { name: 'Jane Smith', email: 'jane@example.com', role: 'User' },\n    { name: 'Bob Johnson', email: 'bob@example.com', role: 'Editor' },\n]\n\nconst salesData = [\n    {\n        product: 'Widget A',\n        category: 'Electronics',\n        sales: '1,250',\n        revenue: '$18,750',\n        growth: '+15%',\n    },\n    {\n        product: 'Widget B',\n        category: 'Home & Garden',\n        sales: '980',\n        revenue: '$16,660',\n        growth: '+21%',\n    },\n    {\n        product: 'Widget C',\n        category: 'Sports',\n        sales: '720',\n        revenue: '$8,640',\n        growth: '+12%',\n    },\n]\n</script>\n\n<template>\n    <div class=\"prose prose-gray max-w-none\">\n        <h1>{{ componentData.title }}</h1>\n        <p class=\"lead\">{{ componentData.description }}</p>\n\n        <div class=\"mt-10 space-y-4\">\n            <h3>Usage</h3>\n            <CodeBlock\n                language=\"ts\"\n                :code=\"componentData.codeBlocks.import\"\n                auto-theme\n                light-theme=\"github-light\"\n                dark-theme=\"github-dark\"\n                class=\"border-none shadow-none\"\n            />\n            <CodeBlock\n                language=\"vue\"\n                :code=\"componentData.codeBlocks.oneLineUsage\"\n                auto-theme\n                light-theme=\"github-light\"\n                dark-theme=\"github-dark\"\n                class=\"border-none shadow-none\"\n            />\n        </div>\n\n        <!-- Basic Usage Example -->\n        <div class=\"space-y-4 mt-8\">\n            <h3>Basic Usage</h3>\n            <Tabs class=\"px-2 pt-2 border rounded-lg\">\n                <TabsList class=\"relative z-2\">\n                    <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                    <TabsTrigger value=\"code\">Code</TabsTrigger>\n                </TabsList>\n                <TabsContent class=\"-mx-2 grow min-h-px border-none\">\n                    <TabsPanel value=\"preview\" class=\"h-full border-t\">\n                        <div class=\"p-8 h-full min-h-72 bg-white rounded-lg\">\n                            <Table>\n                                <TableHeader>\n                                    <TableRow>\n                                        <TableHead>Name</TableHead>\n                                        <TableHead>Email</TableHead>\n                                        <TableHead>Role</TableHead>\n                                    </TableRow>\n                                </TableHeader>\n                                <TableBody>\n                                    <TableRow\n                                        v-for=\"row in tableData\"\n                                        :key=\"row.name\"\n                                    >\n                                        <TableCell>{{ row.name }}</TableCell>\n                                        <TableCell>{{ row.email }}</TableCell>\n                                        <TableCell>{{ row.role }}</TableCell>\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </div>\n                    </TabsPanel>\n                    <TabsPanel value=\"code\" class=\"grow min-h-px border-t\">\n                        <CodeBlock\n                            language=\"vue\"\n                            :code=\"componentData.codeBlocks.basicUsage\"\n                            auto-theme\n                            light-theme=\"github-light\"\n                            dark-theme=\"github-dark\"\n                            class=\"border-none rounded-t-none shadow-none\"\n                        />\n                    </TabsPanel>\n                </TabsContent>\n            </Tabs>\n        </div>\n\n        <!-- With Caption Example -->\n        <div class=\"space-y-4 mt-8\">\n            <h3>With Caption</h3>\n            <Tabs class=\"px-2 pt-2 border rounded-lg\">\n                <TabsList class=\"relative z-2\">\n                    <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                    <TabsTrigger value=\"code\">Code</TabsTrigger>\n                </TabsList>\n                <TabsContent class=\"-mx-2 grow min-h-px border-none\">\n                    <TabsPanel value=\"preview\" class=\"h-full border-t\">\n                        <div class=\"p-8 h-full min-h-72 bg-white rounded-lg\">\n                            <Table>\n                                <TableCaption\n                                    >A list of users in the\n                                    system.</TableCaption\n                                >\n                                <TableHeader>\n                                    <TableRow>\n                                        <TableHead>Name</TableHead>\n                                        <TableHead>Email</TableHead>\n                                        <TableHead>Role</TableHead>\n                                    </TableRow>\n                                </TableHeader>\n                                <TableBody>\n                                    <TableRow\n                                        v-for=\"row in tableData\"\n                                        :key=\"row.name\"\n                                    >\n                                        <TableCell>{{ row.name }}</TableCell>\n                                        <TableCell>{{ row.email }}</TableCell>\n                                        <TableCell>{{ row.role }}</TableCell>\n                                    </TableRow>\n                                </TableBody>\n                            </Table>\n                        </div>\n                    </TabsPanel>\n                    <TabsPanel value=\"code\" class=\"grow min-h-px border-t\">\n                        <CodeBlock\n                            language=\"vue\"\n                            :code=\"componentData.codeBlocks.withCaption\"\n                            auto-theme\n                            light-theme=\"github-light\"\n                            dark-theme=\"github-dark\"\n                            class=\"border-none rounded-t-none shadow-none\"\n                        />\n                    </TabsPanel>\n                </TabsContent>\n            </Tabs>\n        </div>\n\n        <!-- With Footer Example -->\n        <div class=\"space-y-4 mt-8\">\n            <h3>With Footer</h3>\n            <Tabs class=\"px-2 pt-2 border rounded-lg\">\n                <TabsList class=\"relative z-2\">\n                    <TabsTrigger value=\"preview\">Preview</TabsTrigger>\n                    <TabsTrigger value=\"code\">Code</TabsTrigger>\n                </TabsList>\n                <TabsContent class=\"-mx-2 grow min-h-px border-none\">\n                    <TabsPanel value=\"preview\" class=\"h-full border-t\">\n                        <div class=\"p-8 h-full min-h-72 bg-white rounded-lg\">\n                            <Table>\n                                <TableHeader>\n                                    <TableRow>\n                                        <TableHead>Product</TableHead>\n                                        <TableHead>Price</TableHead>\n                                        <TableHead>Quantity</TableHead>\n                                        <TableHead>Total</TableHead>\n                                    </TableRow>\n                                </TableHeader>\n ... [truncated]",
    "url": "/docs/table",
    "source": "docs"
  },
  {
    "objectID": "/docs/installation",
    "title": "Installation",
    "content": "<script setup lang=\"ts\">\nimport DocsLayout from '@/components/docs/DocsLayout.vue'\nimport {\n    CodeBlock,\n    CodeBlockTabButton,\n    CodeBlockTab,\n    Drawer,\n    DrawerContent,\n    DrawerTrigger,\n    Button,\n    Tabs,\n    TabsList,\n    TabsTrigger,\n    TabsContent,\n    TabsPanel,\n} from '@picklepilot/pickle-jar-ui'\nimport { Play } from 'lucide-vue-next'\n</script>\n\n<template>\n    <DocsLayout>\n        <div class=\"prose prose-gray max-w-none\">\n            <h1>Installation</h1>\n            <p class=\"lead\">Install and configure pickle jar using Vite.</p>\n\n            <h2>Prerequisites</h2>\n            <p>Before you begin, make sure you have the following installed:</p>\n            <ul class=\"text-foreground font-light space-y-1\">\n                <li>Node.js 18.x or later</li>\n                <li>Vue 3.5.x or later</li>\n                <li>Tailwind CSS 4.x</li>\n                <li>TypeScript 5.x</li>\n                <li>pnpm (recommended) or npm/yarn</li>\n            </ul>\n\n            <div>\n                <h2>Installation Steps</h2>\n                <p>\n                    You can install pickle jar using your preferred package\n                    manager:\n                </p>\n\n                <Tabs class=\"mt-4 px-2 pt-2 rounded-lg bg-muted\">\n                    <TabsList class=\"relative z-2\">\n                        <TabsTrigger value=\"pnpm\">pnpm</TabsTrigger>\n                        <TabsTrigger value=\"npm\">npm</TabsTrigger>\n                        <TabsTrigger value=\"yarn\">yarn</TabsTrigger>\n                    </TabsList>\n                    <TabsContent class=\"-mx-2 grow min-h-px border-none\">\n                        <TabsPanel\n                            value=\"pnpm\"\n                            class=\"h-full border-t border-background\"\n                        >\n                            <CodeBlock\n                                language=\"bash\"\n                                code=\"pnpm add @picklepilot/pickle-jar-ui\"\n                                auto-theme\n                                light-theme=\"github-light\"\n                                dark-theme=\"github-dark\"\n                                class=\"border-none rounded-t-none shadow-none\"\n                            />\n                        </TabsPanel>\n                        <TabsPanel\n                            value=\"npm\"\n                            class=\"grow min-h-px border-t border-background\"\n                        >\n                            <CodeBlock\n                                language=\"bash\"\n                                code=\"npm install @picklepilot/pickle-jar-ui\"\n                                auto-theme\n                                light-theme=\"github-light\"\n                                dark-theme=\"github-dark\"\n                                class=\"border-none rounded-t-none shadow-none\"\n                            />\n                        </TabsPanel>\n                        <TabsPanel\n                            value=\"yarn\"\n                            class=\"grow min-h-px border-t border-background\"\n                        >\n                            <CodeBlock\n                                language=\"bash\"\n                                code=\"yarn add @picklepilot/pickle-jar-ui\"\n                                auto-theme\n                                light-theme=\"github-light\"\n                                dark-theme=\"github-dark\"\n                                class=\"border-none rounded-t-none shadow-none\"\n                            />\n                        </TabsPanel>\n                    </TabsContent>\n                </Tabs>\n            </div>\n\n            <div>\n                <h2>Configuring Tailwind</h2>\n                <p>This project assumes that you're using Tailwind CSS 4.x.</p>\n                <Tabs class=\"mt-4 px-2 pt-2 bg-muted rounded-lg\">\n                    <TabsList class=\"relative z-2\">\n                        <TabsTrigger value=\"pnpm\">pnpm</TabsTrigger>\n                        <TabsTrigger value=\"npm\">npm</TabsTrigger>\n                        <TabsTrigger value=\"yarn\">yarn</TabsTrigger>\n                    </TabsList>\n                    <TabsContent class=\"-mx-2 grow min-h-px border-none\">\n                        <TabsPanel\n                            value=\"pnpm\"\n                            class=\"h-full border-t border-background\"\n                        >\n                            <CodeBlock\n                                language=\"bash\"\n                                code=\"pnpm add tailwindcss @tailwindcss/vite\"\n                                auto-theme\n                                light-theme=\"github-light\"\n                                dark-theme=\"github-dark\"\n                                class=\"border-none rounded-t-none shadow-none\"\n                            />\n                        </TabsPanel>\n                        <TabsPanel\n                            value=\"npm\"\n                            class=\"grow min-h-px border-t border-background\"\n                        >\n                            <CodeBlock\n                                language=\"bash\"\n                                code=\"npm install tailwindcss @tailwindcss/vite\"\n                                auto-theme\n                                light-theme=\"github-light\"\n                                dark-theme=\"github-dark\"\n                                class=\"border-none rounded-t-none shadow-none\"\n                            />\n                        </TabsPanel>\n                        <TabsPanel\n                            value=\"yarn\"\n                            class=\"grow min-h-px border-t border-background\"\n                        >\n                            <CodeBlock\n                                language=\"bash\"\n                                code=\"yarn add tailwindcss @tailwindcss/vite\"\n                                auto-theme\n                                light-theme=\"github-light\"\n                                dark-theme=\"github-dark\"\n                                class=\"border-none rounded-t-none shadow-none\"\n                            />\n                        </TabsPanel>\n                    </TabsContent>\n                </Tabs>\n\n                <div class=\"mt-6\">\n                    <p>\n                        Then make sure the top of your\n                        <code>style.css</code> file looks something like this:\n                    </p>\n                    <CodeBlock\n                        code=\"@import '@picklepilot/pickle-jar-ui/base.css';\n@import 'tailwindcss';\"\n                        language=\"css\"\n                        auto-theme\n                        light-theme=\"github-light\"\n                        dark-theme=\"github-dark\"\n                        class=\"border-none shadow-none mt-4\"\n                    />\n                </div>\n            </div>\n\n            <div>\n                <h2>Configuring Vite</h2>\n                <p>\n                    This project assumes that you're using Vite. If not already\n                    done, you'll need to configure Vite to use Tailwind CSS 4.x.\n                </p>\n                <CodeBlock\n                    code=\"import { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\nimport tailwindcss from '@tailwindcss/vite' // [!code highlight]\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    tailwindcss(), // [!code highlight]\n  ],\n})\"\n                    language=\"typescript\"\n                    auto-theme\n                    light-theme=\"github-light\"\n                    dark-theme=\"github-dark\"\n                    class=\"border-none shadow-none mt-4\"\n                />\n            </div>\n        </div>\n    </DocsLayout>\n</template>\n",
    "url": "/docs/installation",
    "source": "docs"
  },
  {
    "objectID": "/docs/introduction",
    "title": "Introduction",
    "content": "<script setup lang=\"ts\">\nimport DocsLayout from '@/components/docs/DocsLayout.vue'\nimport { getLogoUrl } from '@/utils/logos'\nimport {\n    FileCode,\n    MonitorSmartphone,\n    Moon,\n    PersonStanding,\n} from 'lucide-vue-next'\n</script>\n\n<template>\n    <DocsLayout>\n        <div class=\"prose prose-gray max-w-none\">\n            <h1 class=\"font-medium\">Introduction</h1>\n\n            <p class=\"lead\">Before we even get started, the answer is \"yes\".</p>\n\n            <p class=\"max-w-2xl\">\n                <span class=\"font-light\">pickle jar</span> is essentially a Vue\n                (and eventually, web component) based port of the heavily-loved\n                <a\n                    href=\"https://ui.shadcn.com/\"\n                    target=\"_blank\"\n                    class=\"underline hover:text-primary/80\"\n                    >shadcn/ui</a\n                >\n                project. So then, why roll another \"shadcn-like\" when I could\n                just leverage one of the others based on the same source? I have\n                always wanted to create and maintain my own collection of the\n                components that I find myself needing in just about every\n                project. I also have a cache of more advanced components that\n                I'd like to share with the community.\n            </p>\n\n            <h2>Features</h2>\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6 my-8\">\n                <div\n                    class=\"group relative bg-muted rounded-xl p-6 py-8 flex flex-col items-center justify-center gap-3\"\n                >\n                    <img\n                        :src=\"getLogoUrl('vuedotjs')\"\n                        alt=\"Vue.js logo\"\n                        class=\"w-12 h-12 object-contain\"\n                    />\n                    <span\n                        class=\"text-sm text-center font-medium text-foreground\"\n                    >\n                        Vue.js 3\n                    </span>\n                </div>\n\n                <div\n                    class=\"group relative bg-muted rounded-xl p-6 py-8 flex flex-col items-center justify-center gap-3\"\n                >\n                    <img\n                        :src=\"getLogoUrl('tailwindcss')\"\n                        alt=\"Tailwind CSS logo\"\n                        class=\"w-12 h-12 object-contain\"\n                    />\n                    <span\n                        class=\"text-sm text-center font-medium text-foreground\"\n                    >\n                        Tailwind CSS 4\n                    </span>\n                </div>\n\n                <div\n                    class=\"group relative bg-muted rounded-xl p-6 py-8 flex flex-col items-center justify-center gap-3\"\n                >\n                    <FileCode class=\"w-12 h-12\" stroke-width=\"1\" />\n\n                    <span\n                        class=\"text-sm text-center font-medium text-foreground\"\n                    >\n                        HTML custom elements <br />\n                        <span class=\"text-muted-foreground/70 font-normal\"\n                            >(coming soon)</span\n                        >\n                    </span>\n                </div>\n\n                <div\n                    class=\"group relative bg-muted rounded-xl p-6 py-8 flex flex-col items-center justify-center gap-3\"\n                >\n                    <MonitorSmartphone class=\"w-12 h-12\" stroke-width=\"1\" />\n\n                    <span\n                        class=\"text-sm text-center font-medium text-foreground\"\n                    >\n                        Fully responsive\n                    </span>\n                </div>\n\n                <div\n                    class=\"group relative bg-muted rounded-xl p-6 py-8 flex flex-col items-center justify-center gap-3\"\n                >\n                    <PersonStanding class=\"w-12 h-12\" stroke-width=\"1\" />\n\n                    <span\n                        class=\"text-sm text-center font-medium text-foreground\"\n                    >\n                        Accessible\n                    </span>\n                </div>\n\n                <div\n                    class=\"group relative bg-muted rounded-xl p-6 py-8 flex flex-col items-center justify-center gap-3\"\n                >\n                    <Moon class=\"w-12 h-12\" stroke-width=\"1\" />\n\n                    <span\n                        class=\"text-sm text-center font-medium text-foreground\"\n                    >\n                        Dark mode\n                    </span>\n                </div>\n            </div>\n        </div>\n    </DocsLayout>\n</template>\n",
    "url": "/docs/introduction",
    "source": "docs"
  },
  {
    "objectID": "/docs/theming",
    "title": "Theming",
    "content": "<script setup lang=\"ts\">\nimport DocsLayout from '@/components/docs/DocsLayout.vue'\nimport { CodeBlock } from '@picklepilot/pickle-jar-ui'\n</script>\n\n<template>\n    <DocsLayout>\n        <div class=\"prose prose-gray max-w-none\">\n            <h1>Theming</h1>\n            <p class=\"lead\">pickle jar is designed to be easily themed.</p>\n\n            <div>\n                <h2>CSS Variables</h2>\n                <p>\n                    The preferred way to customize the look and feel of pickle\n                    jar components is to use CSS variables to override the\n                    default values. I may re-integrate the configuration based\n                    theming eventually, as it provides more fine-grained\n                    control.\n                </p>\n\n                <CodeBlock\n                    language=\"vue-html\"\n                    code=\"<div class='bg-primary text-primary-foreground'>Hey there!</div>\"\n                    auto-theme\n                    light-theme=\"github-light\"\n                    dark-theme=\"github-dark\"\n                    class=\"mt-4 border-none shadow-none\"\n                />\n            </div>\n\n            <div>\n                <h2>Convention (over configuration)</h2>\n                <p>\n                    We're trying to use the most sensible and asthetically\n                    pleasing defaults for the components. This means that the\n                    default styling of the components is ready-to-use. The\n                    following conventions are lifted stright from shadcn/ui.\n                </p>\n\n                <p>\n                    We make use of the <code>background</code> and\n                    <code>foreground</code> CSS variables to set the colors of\n                    the various layers of the components.\n                </p>\n            </div>\n\n            <div>\n                <h2>List of CSS Variables</h2>\n                <p>\n                    The out-of-the-box color palette is \"neutral\" from\n                    <a\n                        href=\"https://tailwindcss.com/docs/colors\"\n                        target=\"_blank\"\n                        class=\"underline hover:text-primary/80\"\n                        >Tailwind CSS</a\n                    >. The following CSS variables are available for\n                    customization:\n                </p>\n                <CodeBlock\n                    :custom-theme=\"{ content: 'max-h-full' }\"\n                    code=\":root {\n    /* Colors */\n    --background: oklch(0.985 0 0);\n    --foreground: oklch(0.145 0 0);\n\n    --card: oklch(0.985 0 0);\n    --card-foreground: oklch(0.145 0 0);\n\n    --popover: oklch(0.98 0 0);\n    --popover-foreground: oklch(0.1 0 0);\n\n    --primary: oklch(0.14 0 0);\n    --primary-foreground: oklch(0.99 0 0);\n\n    --secondary: oklch(0.97 0 0);\n    --secondary-foreground: oklch(0.14 0 0);\n\n    --muted: oklch(0.97 0 0);\n    --muted-foreground: oklch(0.708 0 0);\n\n    --accent: oklch(0.922 0 0);\n    --accent-foreground: oklch(0.145 0 0);\n\n    --destructive: oklch(0.7 0.25 25);\n    --destructive-foreground: oklch(0.971 0.013 17.38);\n\n    --tooltip: oklch(0.145 0 0);\n    --tooltip-foreground: oklch(0.985 0 0);\n\n    --border: oklch(0.87 0 0 / 0.8);\n    --input: oklch(0.9 0.01 30);\n    --ring: oklch(0.87 0 0);\n\n    /* Sidebar Colors */\n    --sidebar: oklch(0.985 0 0);\n    --sidebar-foreground: oklch(0.145 0 0);\n    --sidebar-primary: oklch(0.205 0 0);\n    --sidebar-primary-foreground: oklch(0.985 0 0);\n    --sidebar-accent: oklch(0.97 0 0);\n    --sidebar-accent-foreground: oklch(0.205 0 0);\n    --sidebar-border: oklch(0.922 0 0);\n    --sidebar-ring: oklch(0.708 0 0);\n\n    /* Surface Colors */\n    --surface: oklch(0.985 0 0);\n    --surface-foreground: oklch(0.145 0 0);\n\n    /* Code Colors */\n    --code: oklch(0.95 0 0);\n    --code-foreground: oklch(0.145 0 0);\n    --code-highlight: oklch(0.9 0.1 60);\n    --code-number: oklch(0.6 0.1 250);\n\n    /* Selection Colors */\n    --selection: oklch(0.8 0.1 250 / 0.3);\n    --selection-foreground: oklch(0.145 0 0);\n\n    /* Border Radius */\n    --radius: 0.625rem;\n}\n\n.dark {\n    --background: oklch(0.145 0 0);\n    --foreground: oklch(0.985 0 0);\n\n    --card: oklch(0.205 0 0);\n    --card-foreground: oklch(0.985 0 0);\n\n    --popover: oklch(0.269 0 0);\n    --popover-foreground: oklch(0.985 0 0);\n\n    --primary: oklch(0.922 0 0);\n    --primary-foreground: oklch(0.205 0 0);\n\n    --secondary: oklch(0.269 0 0);\n    --secondary-foreground: oklch(0.985 0 0);\n\n    --muted: oklch(0.269 0 0);\n    --muted-foreground: oklch(0.708 0 0);\n\n    --accent: oklch(0.371 0 0);\n    --accent-foreground: oklch(0.985 0 0);\n\n    --destructive: oklch(0.704 0.191 22.216);\n    --destructive-foreground: oklch(0.985 0 0);\n\n    --border: oklch(1 0 0 / 10%);\n    --input: oklch(1 0 0 / 15%);\n    --ring: oklch(0.371 0 0);\n\n    --tooltip: oklch(0.985 0 0);\n    --tooltip-foreground: oklch(0.145 0 0);\n\n    /* Sidebar Colors */\n    --sidebar: oklch(0.205 0 0);\n    --sidebar-foreground: oklch(0.985 0 0);\n    --sidebar-primary: oklch(0.488 0.243 264.376);\n    --sidebar-primary-foreground: oklch(0.985 0 0);\n    --sidebar-accent: oklch(0.269 0 0);\n    --sidebar-accent-foreground: oklch(0.985 0 0);\n    --sidebar-border: oklch(1 0 0 / 10%);\n    --sidebar-ring: oklch(0.556 0 0);\n\n    /* Surface Colors */\n    --surface: oklch(0.205 0 0);\n    --surface-foreground: oklch(0.985 0 0);\n\n    /* Code Colors */\n    --code: oklch(0.2 0 0);\n    --code-foreground: oklch(0.985 0 0);\n    --code-highlight: oklch(0.3 0.1 60);\n    --code-number: oklch(0.7 0.1 250);\n\n    /* Selection Colors */\n    --selection: oklch(0.3 0.1 250 / 0.3);\n    --selection-foreground: oklch(0.985 0 0);\n}\"\n                    language=\"css\"\n                    auto-theme\n                    light-theme=\"github-light\"\n                    dark-theme=\"github-dark\"\n                    class=\"border-none shadow-none mt-4\"\n                />\n            </div>\n        </div>\n    </DocsLayout>\n</template>\n",
    "url": "/docs/theming",
    "source": "docs"
  },
  {
    "objectID": "/components/alert/Alert",
    "title": "Alert",
    "content": "<template>\n    <AlertRoot :flush=\"flush\" :variant=\"variant\" :theme=\"theme\">\n        <slot />\n        <AlertClose v-if=\"dismissable\" @close=\"emit('close', $event)\" />\n    </AlertRoot>\n</template>\n\n<script setup lang=\"ts\">\nimport AlertRoot from './AlertRoot.vue'\nimport AlertClose from './AlertClose.vue'\n\nconst emit = defineEmits<{\n    close: [value: boolean]\n}>()\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * Can the alert be dismissed by clicking an 'x' button?\n         * @type {boolean}\n         */\n        dismissable?: boolean\n\n        /**\n         * Fluently tell the component to remove rounded corners\n         * @type {boolean}\n         */\n        flush?: boolean\n\n        /**\n         * The type of alert to display\n         * @type {'info' | 'processing' | 'warning' | 'error' | 'success' | 'muted'}\n         */\n        variant?:\n            | 'info'\n            | 'processing'\n            | 'warning'\n            | 'error'\n            | 'success'\n            | 'muted'\n\n        /**\n         * Locally customize the component's theme properties.\n         *\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            alert?: string\n        }\n    }>(),\n    {\n        dismissable: false,\n        flush: false,\n        variant: 'info',\n        theme: () => ({\n            alert: '',\n        }),\n    }\n)\n</script>\n",
    "url": "/components/alert/Alert",
    "source": "components"
  },
  {
    "objectID": "/components/alert/AlertAction",
    "title": "AlertAction",
    "content": "<template>\n    <div class=\"flex items-center\">\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\n// This component provides the action area styling for alerts\n// It handles the flex layout for action buttons and controls\n</script>\n",
    "url": "/components/alert/AlertAction",
    "source": "components"
  },
  {
    "objectID": "/components/alert/AlertClose",
    "title": "AlertClose",
    "content": "<template>\n    <button\n        @click=\"$emit('close', false)\"\n        class=\"absolute right-4 top-4 text-zinc-400 hover:text-zinc-800\"\n    >\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"20\"\n            height=\"20\"\n            fill=\"currentColor\"\n            class=\"bi bi-x h-6 w-6\"\n            viewBox=\"0 0 16 16\"\n        >\n            <path\n                d=\"M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708\"\n            />\n        </svg>\n    </button>\n</template>\n\n<script setup lang=\"ts\">\nconst emit = defineEmits<{\n    close: [value: boolean]\n}>()\n</script>\n",
    "url": "/components/alert/AlertClose",
    "source": "components"
  },
  {
    "objectID": "/components/alert/AlertContent",
    "title": "AlertContent",
    "content": "<template>\n    <div class=\"flex\">\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\n// This component provides the basic flex layout structure for alerts\n// Users compose the content using AlertTitle, AlertDescription, etc.\n</script>\n",
    "url": "/components/alert/AlertContent",
    "source": "components"
  },
  {
    "objectID": "/components/alert/AlertDescription",
    "title": "AlertDescription",
    "content": "<template>\n    <div\n        class=\"text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed\"\n    >\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\n// This component provides the description/body styling for alerts\n// It includes the margin and flex grow behavior for proper layout\n</script>\n",
    "url": "/components/alert/AlertDescription",
    "source": "components"
  },
  {
    "objectID": "/components/alert/AlertIcon",
    "title": "AlertIcon",
    "content": "<template>\n    <div class=\"shrink-0\">\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\n// This component provides the icon container styling for alerts\n// It ensures the icon area doesn't shrink and maintains proper spacing\n</script>\n",
    "url": "/components/alert/AlertIcon",
    "source": "components"
  },
  {
    "objectID": "/components/alert/AlertRoot",
    "title": "AlertRoot",
    "content": "<template>\n    <div\n        :class=\"\n            m(\n                flush ? 'rounded-0' : 'rounded-md',\n                'relative w-full rounded-lg border border-ring px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current bg-card text-card-foreground',\n                theme.alert\n            )\n        \"\n    >\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, provide } from 'vue'\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * Fluently tell the component to remove rounded corners\n         * @type {boolean}\n         */\n        flush?: boolean\n\n        /**\n         * The type of alert to display\n         * @type {'info' | 'processing' | 'warning' | 'error' | 'success' | 'muted'}\n         */\n        variant?:\n            | 'info'\n            | 'processing'\n            | 'warning'\n            | 'error'\n            | 'success'\n            | 'muted'\n\n        /**\n         * Locally customize the component's theme properties.\n         *\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            alert?: string\n        }\n    }>(),\n    {\n        flush: false,\n        variant: 'info',\n        theme: () => ({\n            alert: '',\n        }),\n    }\n)\n\nconst bgClasses = computed(() => ({\n    'bg-sky-50': props.variant === 'info' || props.variant === 'processing',\n    'bg-yellow-50': props.variant === 'warning',\n    'bg-red-50': props.variant === 'error',\n    'bg-green-50': props.variant === 'success',\n    'bg-zinc-50': props.variant === 'muted',\n}))\n\nconst borderClasses = computed(() => ({\n    'border-sky-200':\n        props.variant === 'info' || props.variant === 'processing',\n    'border-yellow-200': props.variant === 'warning',\n    'border-red-200': props.variant === 'error',\n    'border-green-200': props.variant === 'success',\n    'border-zinc-200': props.variant === 'muted',\n}))\n\nconst colorClass = computed(() => ({\n    'text-sky-800': props.variant === 'info' || props.variant === 'processing',\n    'text-yellow-800': props.variant === 'warning',\n    'text-red-800': props.variant === 'error',\n    'text-green-800': props.variant === 'success',\n    'text-zinc-800': props.variant === 'muted',\n}))\n\n// Provide context to child components\nprovide('alert-context', {\n    variant: props.variant,\n    bgClasses: bgClasses.value,\n    borderClasses: borderClasses.value,\n    colorClass: colorClass.value,\n})\n</script>\n",
    "url": "/components/alert/AlertRoot",
    "source": "components"
  },
  {
    "objectID": "/components/alert/AlertTitle",
    "title": "AlertTitle",
    "content": "<template>\n    <div class=\"col-start-2 line-clamp-1 min-h-4 font-medium\">\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\n// This component provides the title styling and structure for alerts\n// It includes the margin and flex grow behavior for proper layout\n</script>\n",
    "url": "/components/alert/AlertTitle",
    "source": "components"
  },
  {
    "objectID": "/components/badge/Badge",
    "title": "Badge",
    "content": "<template>\n    <span\n        :class=\"\n            m(\n                'inline-flex items-center justify-center rounded-full px-2.5 py-0.5 font-medium transition-colors',\n                // Variant styles\n                variant === 'default' &&\n                    'bg-primary text-primary-foreground hover:bg-primary/80',\n                variant === 'secondary' &&\n                    'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n                variant === 'destructive' &&\n                    'bg-destructive text-destructive-foreground hover:bg-destructive/80',\n                variant === 'outline' &&\n                    'text-foreground border border-border hover:bg-accent hover:text-accent-foreground',\n\n                // Size styles\n                size === 'default' && 'text-xs h-6',\n                size === 'sm' && 'text-xs h-5',\n                size === 'lg' && 'text-sm h-7',\n\n                theme.badge\n            )\n        \"\n    >\n        <slot></slot>\n    </span>\n</template>\n\n<script setup lang=\"ts\">\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nwithDefaults(\n    defineProps<{\n        /**\n         * The variant of the badge.\n         * @type {'default' | 'secondary' | 'destructive' | 'outline'}\n         */\n        variant?: 'default' | 'secondary' | 'destructive' | 'outline'\n\n        /**\n         * The size of the badge.\n         * @type {'default' | 'sm' | 'lg'}\n         */\n        size?: 'default' | 'sm' | 'lg'\n\n        /**\n         * Locally customize the component's theme properties.\n         *\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            badge?: string\n        }\n    }>(),\n    {\n        variant: 'default',\n        size: 'default',\n        theme: () => ({\n            badge: '',\n        }),\n    }\n)\n</script>\n",
    "url": "/components/badge/Badge",
    "source": "components"
  },
  {
    "objectID": "/components/breadcrumbs/BreadcrumbEllipsis",
    "title": "BreadcrumbEllipsis",
    "content": "<template>\n    <span\n        :class=\"\n            m(\n                'flex size-9 items-center justify-center',\n                'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n                'rounded-sm focus-visible:ring-offset-background',\n                theme.ellipsis\n            )\n        \"\n        role=\"presentation\"\n        tabindex=\"0\"\n    >\n        <slot>\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\"\n                height=\"24\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                stroke-width=\"2\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                class=\"size-4\"\n            >\n                <circle cx=\"12\" cy=\"12\" r=\"1\" />\n                <circle cx=\"19\" cy=\"12\" r=\"1\" />\n                <circle cx=\"5\" cy=\"12\" r=\"1\" />\n            </svg>\n        </slot>\n    </span>\n</template>\n\n<script setup lang=\"ts\">\nimport { m } from '../../utils'\n\ninterface Props {\n    /**\n     * Locally customize the component's theme properties\n     */\n    theme?: {\n        ellipsis?: string\n    }\n}\n\nwithDefaults(defineProps<Props>(), {\n    theme: () => ({\n        ellipsis: '',\n    }),\n})\n</script>\n",
    "url": "/components/breadcrumbs/BreadcrumbEllipsis",
    "source": "components"
  },
  {
    "objectID": "/components/breadcrumbs/BreadcrumbItem",
    "title": "BreadcrumbItem",
    "content": "<template>\n    <li class=\"inline-flex items-center gap-1.5\">\n        <slot />\n    </li>\n</template>\n\n<script setup lang=\"ts\">\n// No additional logic needed for the item wrapper\n</script>\n",
    "url": "/components/breadcrumbs/BreadcrumbItem",
    "source": "components"
  },
  {
    "objectID": "/components/breadcrumbs/BreadcrumbLink",
    "title": "BreadcrumbLink",
    "content": "<template>\n    <component\n        :is=\"tag\"\n        :href=\"href\"\n        :to=\"to\"\n        :class=\"\n            m(\n                'transition-colors hover:text-foreground',\n                'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n                'rounded-sm focus-visible:ring-offset-background',\n                theme.link\n            )\n        \"\n        @click=\"handleClick\"\n    >\n        <slot />\n    </component>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { m } from '../../utils'\n\ninterface Props {\n    /**\n     * The href attribute for the link\n     */\n    href?: string\n\n    /**\n     * The route to navigate to (for Vue Router)\n     */\n    to?: string | object\n\n    /**\n     * Whether to render as a child component\n     */\n    asChild?: boolean\n\n    /**\n     * Locally customize the component's theme properties\n     */\n    theme?: {\n        link?: string\n    }\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    href: undefined,\n    to: undefined,\n    asChild: false,\n    theme: () => ({\n        link: '',\n    }),\n})\n\nconst emit = defineEmits<{\n    click: [event: MouseEvent]\n}>()\n\nconst tag = computed(() => {\n    if (props.asChild) {\n        return 'slot'\n    }\n    return props.to ? 'router-link' : 'a'\n})\n\nfunction handleClick(event: MouseEvent) {\n    emit('click', event)\n}\n</script>\n",
    "url": "/components/breadcrumbs/BreadcrumbLink",
    "source": "components"
  },
  {
    "objectID": "/components/breadcrumbs/BreadcrumbList",
    "title": "BreadcrumbList",
    "content": "<template>\n    <ol\n        class=\"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground\"\n    >\n        <slot />\n    </ol>\n</template>\n\n<script setup lang=\"ts\">\n// No additional logic needed for the list wrapper\n</script>\n",
    "url": "/components/breadcrumbs/BreadcrumbList",
    "source": "components"
  },
  {
    "objectID": "/components/breadcrumbs/BreadcrumbPage",
    "title": "BreadcrumbPage",
    "content": "<template>\n    <span\n        :class=\"\n            m(\n                'font-normal text-foreground',\n                'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n                'rounded-sm focus-visible:ring-offset-background',\n                theme.page\n            )\n        \"\n        tabindex=\"0\"\n    >\n        <slot />\n    </span>\n</template>\n\n<script setup lang=\"ts\">\nimport { m } from '../../utils'\n\ninterface Props {\n    /**\n     * Locally customize the component's theme properties\n     */\n    theme?: {\n        page?: string\n    }\n}\n\nwithDefaults(defineProps<Props>(), {\n    theme: () => ({\n        page: '',\n    }),\n})\n</script>\n",
    "url": "/components/breadcrumbs/BreadcrumbPage",
    "source": "components"
  },
  {
    "objectID": "/components/breadcrumbs/BreadcrumbSeparator",
    "title": "BreadcrumbSeparator",
    "content": "<template>\n    <span :class=\"m('size-3.5', theme.separator)\" role=\"presentation\">\n        <slot>\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\"\n                height=\"24\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                stroke-width=\"2\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                class=\"size-3.5\"\n            >\n                <path d=\"m9 18 6-6-6-6\" />\n            </svg>\n        </slot>\n    </span>\n</template>\n\n<script setup lang=\"ts\">\nimport { m } from '../../utils'\n\ninterface Props {\n    /**\n     * Locally customize the component's theme properties\n     */\n    theme?: {\n        separator?: string\n    }\n}\n\nwithDefaults(defineProps<Props>(), {\n    theme: () => ({\n        separator: '',\n    }),\n})\n</script>\n",
    "url": "/components/breadcrumbs/BreadcrumbSeparator",
    "source": "components"
  },
  {
    "objectID": "/components/breadcrumbs/Breadcrumbs",
    "title": "Breadcrumbs",
    "content": "<template>\n    <nav aria-label=\"Breadcrumb\" class=\"flex\">\n        <slot />\n    </nav>\n</template>\n\n<script setup lang=\"ts\">\nimport { provide, ref, computed, reactive, type ComputedRef } from 'vue'\n\ninterface BreadcrumbItem {\n    id: string\n    label: string\n    href?: string\n    isCurrentPage?: boolean\n}\n\ninterface BreadcrumbContext {\n    items: ComputedRef<BreadcrumbItem[]>\n    addItem: (item: BreadcrumbItem) => void\n    removeItem: (id: string) => void\n    updateItem: (id: string, updates: Partial<BreadcrumbItem>) => void\n    getItems: () => BreadcrumbItem[]\n}\n\nconst items = ref<BreadcrumbItem[]>([])\n\nconst context = reactive<BreadcrumbContext>({\n    items: computed(() => items.value),\n    addItem: (item: BreadcrumbItem) => {\n        const existingIndex = items.value.findIndex(i => i.id === item.id)\n        if (existingIndex >= 0) {\n            items.value[existingIndex] = {\n                ...items.value[existingIndex],\n                ...item,\n            }\n        } else {\n            items.value.push(item)\n        }\n    },\n    removeItem: (id: string) => {\n        const index = items.value.findIndex(item => item.id === id)\n        if (index >= 0) {\n            items.value.splice(index, 1)\n        }\n    },\n    updateItem: (id: string, updates: Partial<BreadcrumbItem>) => {\n        const index = items.value.findIndex(item => item.id === id)\n        if (index >= 0) {\n            items.value[index] = { ...items.value[index], ...updates }\n        }\n    },\n    getItems: () => items.value,\n})\n\nprovide('breadcrumb', context)\n</script>\n",
    "url": "/components/breadcrumbs/Breadcrumbs",
    "source": "components"
  },
  {
    "objectID": "/components/button/Button",
    "title": "Button",
    "content": "<template>\n    <component\n        :is=\"isRouterLink ? 'RouterLink' : 'button'\"\n        ref=\"buttonRef\"\n        @click=\"handleClick\"\n        :to=\"isRouterLink ? to : undefined\"\n        :class=\"\n            m(\n                'inline-flex items-center cursor-pointer justify-center whitespace-nowrap text-sm ring-offset-background focus:outline-none focus:ring-3 focus:ring-ring/40 transition-[box-shadow,color] disabled:pointer-events-none disabled:opacity-50 gap-1.5',\n\n                // Svg styles\n                `[&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0`,\n\n                // Border radius - round prop overrides default rounded-md\n                round ? 'rounded-full' : 'rounded-md',\n\n                // Variant styles\n                variant === 'default' &&\n                    'bg-primary text-primary-foreground hover:bg-primary/90',\n                variant === 'destructive' &&\n                    'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n                variant === 'outline' &&\n                    'border border-ring bg-background hover:bg-accent hover:text-accent-foreground',\n                variant === 'secondary' &&\n                    'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n                variant === 'ghost' &&\n                    'hover:bg-accent hover:text-accent-foreground',\n                variant === 'link' &&\n                    'text-primary underline-offset-4 hover:underline',\n\n                // Size styles\n                size === 'default' && 'px-4 py-2',\n                size === 'lg' && 'px-5 py-2 text-lg',\n                size === 'sm' && 'px-3 py-1.5',\n                size === 'xs' && 'px-2 py-1',\n                size === 'icon' && 'size-9',\n\n                isDropdownTrigger && 'outline-none ring-3 ring-ring',\n\n                theme.button\n            )\n        \"\n        :aria-disabled=\"disabled\"\n        :aria-busy=\"processing\"\n        :aria-expanded=\"isDropdownTrigger\"\n        :disabled=\"disabled\"\n    >\n        <slot></slot>\n        <span v-if=\"processing\" aria-hidden=\"true\">\n            <span v-if=\"$slots.processing\">\n                <slot name=\"processing\" />\n            </span>\n        </span>\n    </component>\n</template>\n\n<script setup lang=\"ts\">\nimport { inject, computed, ref } from 'vue'\nimport type { RouteLocationRaw } from 'vue-router'\nimport { m } from '../../utils'\n\nconst emit = defineEmits(['click'])\n\n// Inject dropdown context to check if this button is a dropdown trigger\ninterface DropdownContext {\n    isOpen: any\n    triggerRef: any\n    open: () => void\n    close: () => void\n    toggle: () => void\n    setTriggerRef: (ref: HTMLElement) => void\n    registerItem: (itemRef: HTMLElement, itemId: string) => void\n    unregisterItem: (itemId: string) => void\n    focusNext: () => void\n    focusPrevious: () => void\n    focusFirst: () => void\n    focusLast: () => void\n    focusItem: (itemId: string) => void\n    getActiveItemId: () => string | null\n}\n\nconst dropdown = inject<DropdownContext>('dropdown')\nconst buttonRef = ref<HTMLElement>()\n\n// Check if this button is the trigger for an active dropdown\n// Compare the button ref with the trigger ref to see if they are the same element\nconst isDropdownTrigger = computed(() => {\n    dropdown?.triggerRef?.value\n    const triggerRefButton =\n        dropdown?.triggerRef?.value?.querySelector('button')\n    return (\n        triggerRefButton === buttonRef.value && dropdown?.isOpen?.value === true\n    )\n})\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * The variant of the button.\n         * @type {'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link'}\n         */\n        variant?:\n            | 'default'\n            | 'destructive'\n            | 'outline'\n            | 'secondary'\n            | 'ghost'\n            | 'link'\n\n        /**\n         * The size of the button.\n         * @type {'default' | 'sm' | 'lg' | 'xs' | 'icon'}\n         */\n        size?: 'default' | 'sm' | 'lg' | 'xs' | 'icon'\n\n        /**\n         * Whether the button is disabled.\n         * When true, the button cannot be clicked and shows a disabled state.\n         *\n         * @type {boolean}\n         */\n        disabled?: boolean\n\n        /**\n         * Whether the button is in a processing state.\n         * When true, displays a loading indicator before the button content.\n         *\n         * @type {boolean}\n         */\n        processing?: boolean\n\n        /**\n         * Whether the button should have a round/circular shape.\n         * When true, the button will have rounded-full class instead of rounded-md.\n         *\n         * @type {boolean}\n         */\n        round?: boolean\n\n        /**\n         * The route to navigate to when clicked.\n         * When provided, the button will render as a RouterLink instead of a button.\n         *\n         * @type {string | RouteLocationRaw}\n         */\n        to?: string | RouteLocationRaw\n\n        /**\n         * Locally customize the component's theme properties.\n         *\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            button?: string\n            buttonDisabled?: string\n            buttonIcon?: string\n        }\n\n        /**\n         * Whether the button is an icon button.\n         * When true, the button will have a smaller size and no padding.\n         *\n         * @type {boolean}\n         */\n        icon?: boolean\n    }>(),\n    {\n        disabled: false,\n        processing: false,\n        size: 'default',\n        round: false,\n        theme: () => ({\n            button: '',\n            buttonDisabled: '',\n            buttonIcon: '',\n        }),\n        variant: 'default',\n    }\n)\n\n// Determine if this should render as a RouterLink\nconst isRouterLink = computed(() => {\n    return !!props.to && !props.disabled\n})\n\nfunction handleClick(evt: MouseEvent) {\n    // Only prevent default and emit click for button elements, not RouterLink\n    if (!isRouterLink.value) {\n        evt.preventDefault()\n        emit('click', evt)\n    }\n}\n</script>\n\n<style scoped>\n.sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border-width: 0;\n}\n</style>\n",
    "url": "/components/button/Button",
    "source": "components"
  },
  {
    "objectID": "/components/card/Card",
    "title": "Card",
    "content": "<template>\n    <div\n        class=\"rounded-lg border border-border bg-card text-card-foreground shadow-sm\"\n    >\n        <slot />\n    </div>\n</template>\n",
    "url": "/components/card/Card",
    "source": "components"
  },
  {
    "objectID": "/components/card/CardAction",
    "title": "CardAction",
    "content": "<template>\n    <div class=\"flex items-center justify-end\">\n        <slot />\n    </div>\n</template>\n",
    "url": "/components/card/CardAction",
    "source": "components"
  },
  {
    "objectID": "/components/card/CardContent",
    "title": "CardContent",
    "content": "<template>\n    <div class=\"p-6 pt-0\">\n        <slot />\n    </div>\n</template>\n",
    "url": "/components/card/CardContent",
    "source": "components"
  },
  {
    "objectID": "/components/card/CardDescription",
    "title": "CardDescription",
    "content": "<template>\n    <p class=\"text-sm text-muted-foreground\">\n        <slot />\n    </p>\n</template>\n",
    "url": "/components/card/CardDescription",
    "source": "components"
  },
  {
    "objectID": "/components/card/CardFooter",
    "title": "CardFooter",
    "content": "<template>\n    <div class=\"flex items-center p-6 pt-0\">\n        <slot />\n    </div>\n</template>\n",
    "url": "/components/card/CardFooter",
    "source": "components"
  },
  {
    "objectID": "/components/card/CardHeader",
    "title": "CardHeader",
    "content": "<template>\n    <div class=\"flex flex-col gap-1.5 p-6\">\n        <slot />\n    </div>\n</template>\n",
    "url": "/components/card/CardHeader",
    "source": "components"
  },
  {
    "objectID": "/components/card/CardTitle",
    "title": "CardTitle",
    "content": "<template>\n    <h3 class=\"text-lg font-semibold leading-none\">\n        <slot />\n    </h3>\n</template>\n",
    "url": "/components/card/CardTitle",
    "source": "components"
  },
  {
    "objectID": "/components/checkbox/Checkbox",
    "title": "Checkbox",
    "content": "<template>\n    <div class=\"flex items-center space-x-2\" :class=\"[theme?.container || '']\">\n        <button\n            ref=\"checkboxRef\"\n            :id=\"id\"\n            type=\"button\"\n            role=\"checkbox\"\n            :aria-checked=\"indeterminate ? 'mixed' : modelValue\"\n            :aria-disabled=\"disabled\"\n            :disabled=\"disabled\"\n            @click=\"handleClick\"\n            @keydown=\"handleKeydown\"\n            :class=\"\n                m(\n                    'peer size-4 shrink-0 rounded flex items-center shadow-xs justify-center border border-ring bg-background ring-offset-background focus-visible:outline-none focus-visible:ring-3 focus-visible:ring-ring/40 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground data-[state=checked]:border-primary data-[state=indeterminate]:text-primary-foreground data-[state=indeterminate]:border-primary/10 data-[state=indeterminate]:bg-primary/60 min-w-4 min-h-4',\n                    theme?.checkbox || ''\n                )\n            \"\n            :data-state=\"\n                indeterminate\n                    ? 'indeterminate'\n                    : modelValue\n                      ? 'checked'\n                      : 'unchecked'\n            \"\n        >\n            <CheckIcon v-if=\"modelValue && !indeterminate\" class=\"size-3\" />\n            <MinusIcon v-if=\"indeterminate\" class=\"size-3\" />\n        </button>\n        <Label\n            v-if=\"$slots.default\"\n            :for=\"id\"\n            :class=\"\n                m(\n                    'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer select-none',\n                    theme?.label || ''\n                )\n            \"\n            @click=\"handleLabelClick\"\n            :id=\"`${id}-label`\"\n        >\n            <slot></slot>\n        </Label>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport { m } from '../../utils'\nimport { CheckIcon, MinusIcon } from 'lucide-vue-next'\nimport Label from '../label/Label.vue'\n\ninterface Props {\n    /**\n     * The current checked state of the checkbox.\n     * @type {boolean}\n     */\n    modelValue?: boolean\n\n    /**\n     * Whether the checkbox is disabled.\n     * When true, the checkbox cannot be interacted with and shows a disabled state.\n     * @type {boolean}\n     */\n    disabled?: boolean\n\n    /**\n     * Whether the checkbox is in an indeterminate state.\n     * When true, shows a different visual state (typically a dash instead of a check).\n     * @type {boolean}\n     */\n    indeterminate?: boolean\n\n    /**\n     * The unique identifier for the checkbox.\n     * Used for accessibility and form association.\n     * @type {string}\n     */\n    id?: string\n\n    /**\n     * The name attribute for the checkbox.\n     * Used for form submission and grouping.\n     * @type {string}\n     */\n    name?: string\n\n    /**\n     * The value attribute for the checkbox.\n     * Used for form submission.\n     * @type {string | number}\n     */\n    value?: string | number\n\n    /**\n     * Whether the checkbox is required in a form.\n     * @type {boolean}\n     */\n    required?: boolean\n\n    /**\n     * Locally customize the component's theme properties.\n     * @type {Partial<CheckboxTheme>}\n     */\n    theme?: {\n        container?: string\n        checkbox?: string\n        label?: string\n    }\n}\n\ninterface Emits {\n    (e: 'update:modelValue', value: boolean): void\n    (e: 'change', value: boolean): void\n    (e: 'click', event: MouseEvent): void\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    modelValue: false,\n    disabled: false,\n    indeterminate: false,\n    required: false,\n    theme: () => ({\n        checkbox: '',\n        container: '',\n        label: '',\n    }),\n})\n\nconst emit = defineEmits<Emits>()\n\nconst checkboxRef = ref<HTMLButtonElement>()\n\n// Generate a unique ID if none provided\nconst id = computed(\n    () => props.id || `checkbox-${Math.random().toString(36).substr(2, 9)}`\n)\n\nconst handleClick = (event: MouseEvent) => {\n    if (props.disabled) return\n\n    // If indeterminate, set to checked. Otherwise, toggle the current state\n    const newValue = props.indeterminate ? true : !props.modelValue\n    emit('update:modelValue', newValue)\n    emit('change', newValue)\n    emit('click', event)\n}\n\nconst handleLabelClick = (event: MouseEvent) => {\n    console.log('handleLabelClick', event)\n    if (props.disabled) return\n\n    // Prevent double-triggering when clicking the label\n    event.preventDefault()\n    handleClick(event)\n}\n\nconst handleKeydown = (event: KeyboardEvent) => {\n    if (props.disabled) return\n\n    if (event.key === 'Enter' || event.key === ' ') {\n        event.preventDefault()\n        handleClick(event as unknown as MouseEvent)\n    }\n}\n</script>\n",
    "url": "/components/checkbox/Checkbox",
    "source": "components"
  },
  {
    "objectID": "/components/code-block/CodeBlock",
    "title": "CodeBlock",
    "content": "<template>\n    <div\n        :class=\"\n            m(\n                'relative overflow-hidden rounded-lg border border-border bg-muted/50',\n                customTheme.container\n            )\n        \"\n    >\n        <!-- Tab Navigation -->\n        <div\n            v-if=\"showHeader && (hasTabs || hasDemoSlot)\"\n            :class=\"\n                m(\n                    'flex border-b border-border bg-muted/30 h-10 pr-4',\n                    customTheme.tabNav\n                )\n            \"\n        >\n            <!-- Custom tabs -->\n            <template v-if=\"hasTabs\">\n                <slot name=\"tabs\" />\n            </template>\n\n            <!-- Legacy demo/code tabs (for backward compatibility) -->\n            <template v-else-if=\"hasDemoSlot\">\n                <button\n                    @click=\"activeTab = 'demo'\"\n                    :class=\"\n                        m(\n                            'px-4 py-2 text-sm font-medium transition-colors',\n                            activeTab === 'demo'\n                                ? 'bg-background text-foreground border-b-2 border-primary'\n                                : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'\n                        )\n                    \"\n                >\n                    Demo\n                </button>\n                <button\n                    @click=\"activeTab = 'code'\"\n                    :class=\"\n                        m(\n                            'px-4 py-2 text-sm font-medium transition-colors',\n                            activeTab === 'code'\n                                ? 'bg-background text-foreground border-b-2 border-primary'\n                                : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'\n                        )\n                    \"\n                >\n                    Code\n                </button>\n            </template>\n\n            <span\n                :class=\"\n                    m(\n                        'ml-auto self-center font-mono text-muted-foreground capitalize text-sm',\n                        customTheme.languageLabel\n                    )\n                \"\n            >\n                {{ language }}\n            </span>\n        </div>\n\n        <!-- Custom tab content -->\n        <template v-if=\"hasTabs\">\n            <slot />\n        </template>\n\n        <!-- Legacy demo/code content (for backward compatibility) -->\n        <template v-else>\n            <!-- Demo Content -->\n            <div\n                v-if=\"hasDemoSlot && activeTab === 'demo'\"\n                :class=\"m('p-4', customTheme.demo)\"\n            >\n                <slot name=\"demo\" />\n            </div>\n\n            <!-- Code Content -->\n            <div v-if=\"!hasDemoSlot || activeTab === 'code'\">\n                <!-- Code content -->\n                <div :class=\"m('relative', customTheme.content)\">\n                    <Button\n                        v-if=\"showCopyButton\"\n                        @click=\"copyToClipboard\"\n                        :class=\"\n                            m(\n                                'absolute right-2 top-2 z-10 inline-flex items-center gap-1 rounded bg-transparent size-9 px-2 py-1 text-xs font-medium text-muted-foreground transition-colors hover:bg-transparent hover:text-accent-foreground',\n                                customTheme.copyButton\n                            )\n                        \"\n                        :aria-label=\"copyButtonLabel\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                    >\n                        <Check\n                            v-if=\"copied\"\n                            class=\"size-4 text-green-500 shrink-0\"\n                        />\n                        <Clipboard v-else class=\"size-4 shrink-0\" />\n                    </Button>\n                    <div\n                        :class=\"\n                            m('overflow-auto max-h-96', customTheme.content)\n                        \"\n                    >\n                        <div\n                            v-if=\"!isLoading\"\n                            :class=\"\n                                m(\n                                    'font-mono text-sm leading-relaxed',\n                                    customTheme.pre\n                                )\n                            \"\n                            v-html=\"highlightedCode\"\n                        ></div>\n\n                        <!-- Loading state -->\n                        <div\n                            v-else\n                            :class=\"\n                                m(\n                                    'flex items-center justify-center py-8 text-muted-foreground',\n                                    customTheme.loading\n                                )\n                            \"\n                        >\n                            <span class=\"text-sm\"\n                                >Loading syntax highlighting...</span\n                            >\n                        </div>\n\n                        <!-- Error state -->\n                        <div\n                            v-if=\"error\"\n                            :class=\"\n                                m(\n                                    'flex items-center justify-center py-8 text-destructive',\n                                    customTheme.error\n                                )\n                            \"\n                        >\n                            <span class=\"text-sm\">{{ error }}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </template>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\nimport { ref, onMounted, watch, computed, useSlots } from 'vue'\nimport Button from '../button/Button.vue'\nimport { Check, Clipboard } from 'lucide-vue-next'\nimport { useStorybookTheme } from '../../composables/useStorybookTheme'\nimport { provideCodeBlockContext } from './useCodeBlockContext'\nimport { transformerNotationHighlight } from '@shikijs/transformers'\n\n// Define only the languages we actually use\nconst SUPPORTED_LANGUAGES = [\n    'vue',\n    'typescript',\n    'javascript',\n    'js',\n    'ts',\n    'html',\n    'css',\n    'json',\n    'bash',\n    'shell',\n    'markdown',\n    'md',\n] as const\ntype SupportedLanguage = (typeof SUPPORTED_LANGUAGES)[number]\n\n// Map common language aliases to supported languages\nconst LANGUAGE_ALIASES: Record<string, SupportedLanguage> = {\n    js: 'javascript',\n    ts: 'typescript',\n    md: 'markdown',\n    sh: 'bash',\n    shell: 'bash',\n}\n\n// Normalize language to supported language\nconst normalizeLanguage = (lang: string): SupportedLanguage => {\n    const normalized = lang.toLowerCase()\n    return (LANGUAGE_ALIASES[normalized] || normalized) as SupportedLanguage\n}\n\n// Cache for loaded highlighters\nconst highlighterCache = new Map<string, any>()\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\ninterface Props {\n    code: string\n    language?: string\n    shikiTheme?: string\n    autoTheme?: boolean\n    darkTheme?: string\n    lightTheme?: string\n    showHeader?: boolean\n    showCopyButton?: boolean\n    copyButtonLabel?: string\n    codeToHtmlOptions?: {\n        lang?: string\n        theme?: string\n        colorReplacements?: Record<string, string>\n        [key: string]: any\n    }\n    customTheme?: {\n        container?: string\n        header?: string\n        languageLabel?: string\n        copyButton?: string\n        content?: string\n        pre?: string\n        code?: string\n        loading?: string\n        error?: string\n        tabNav?: string\n        demo?: string\n    }\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    language: 'typescript',\n    shikiTheme: 'min-dark',\n    autoTheme: false,\n    darkTheme: 'min-dark',\n    lightTheme: 'min-light',\n    showHeader: true,\n    showCopyButton: true,\n    copyButtonLabel: 'Copy',\n    codeToHtmlOptions: () => ({}),\n    customTheme: () => ({\n        container: '',\n        header: '',\n        languageLabel: '',\n        copyButton: '',\n        content: '',\n        pre: '',\n        code: '',\n        loading: '',\n        error: '',\n        tabNav: '',\n        demo: '',\n    }),\n})\n\nconst slots = useSlots()\nconst activeTab = ref<'demo' | 'code'>('demo')\nconst highlightedCode = ref<string>('')\nconst isLoading = ref<boolean>(true)\nconst error = ref<string>('')\nconst copied = ref<boolean>(false)\nconst highlighter = ref<any>(null)\n\n// Check if demo slot is provided\n// const hasDemoSlot = computed(() => !!slots.demo)\n\n// Provide context for tab system\nconst { hasTabs, hasDemoSlot } = provideCodeBlockContext()\n\n// Use the Storybook theme composable\nconst { isDark } = useStorybookTheme()\n\nconst shikiThemeComputed = computed(() => {\n    if (props.autoTheme) {\n        return isDark.value ? props.darkTheme : props.lightTheme\n    }\n    return props.shikiTheme\n})\n\nconst shikiThemesComputed = computed(() => {\n    if (props.autoTheme) {\n        return [props.lightTheme, props.darkTheme]\n    }\n    return [props.shikiTheme]\n})\n\nconst initializeHighlighter = async () => {\n    try {\n        isLoading.value = true\n        ... [truncated]",
    "url": "/components/code-block/CodeBlock",
    "source": "components"
  },
  {
    "objectID": "/components/code-block/CodeBlockTab",
    "title": "CodeBlockTab",
    "content": "<template>\n    <div v-if=\"isActive\" :class=\"m('p-4', customTheme)\">\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\nimport { computed, onMounted, onUnmounted } from 'vue'\nimport { useCodeBlockContext, type CodeBlockTab } from './useCodeBlockContext'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\ninterface Props {\n    id: string\n    label: string\n    icon?: string\n    disabled?: boolean\n    customTheme?: string\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    disabled: false,\n    customTheme: '',\n})\n\nconst { activeTab, registerTab, unregisterTab } = useCodeBlockContext()\n\nconst isActive = computed(() => activeTab.value === props.id)\n\nconst tab: CodeBlockTab = {\n    id: props.id,\n    label: props.label,\n    icon: props.icon,\n    disabled: props.disabled,\n}\n\nonMounted(() => {\n    registerTab(tab)\n})\n\nonUnmounted(() => {\n    unregisterTab(props.id)\n})\n</script>\n",
    "url": "/components/code-block/CodeBlockTab",
    "source": "components"
  },
  {
    "objectID": "/components/code-block/CodeBlockTabButton",
    "title": "CodeBlockTabButton",
    "content": "<template>\n    <button\n        @click=\"handleClick\"\n        :disabled=\"disabled\"\n        :class=\"\n            m(\n                'px-4 py-2 text-sm font-medium transition-colors flex items-center',\n                isActive\n                    ? 'bg-background text-foreground border-b-2 border-primary'\n                    : 'text-muted-foreground hover:text-foreground hover:bg-muted/50',\n                disabled && 'opacity-50 cursor-not-allowed',\n                customTheme\n            )\n        \"\n    >\n        <component v-if=\"icon\" :is=\"icon\" class=\"mr-2 size-4\" />\n        {{ label }}\n    </button>\n</template>\n\n<script setup lang=\"ts\">\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\nimport { computed } from 'vue'\nimport { useCodeBlockContext } from './useCodeBlockContext'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\ninterface Props {\n    id: string\n    label: string\n    icon?: any\n    disabled?: boolean\n    customTheme?: string\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    disabled: false,\n    customTheme: '',\n})\n\nconst { activeTab, setActiveTab } = useCodeBlockContext()\n\nconst isActive = computed(() => activeTab.value === props.id)\n\nconst handleClick = () => {\n    if (!props.disabled) {\n        setActiveTab(props.id)\n    }\n}\n</script>\n",
    "url": "/components/code-block/CodeBlockTabButton",
    "source": "components"
  },
  {
    "objectID": "/components/color-picker/ColorPicker",
    "title": "ColorPicker",
    "content": "<template>\n    <div>\n        <div class=\"w-full space-y-3\">\n            <div\n                v-for=\"(colors, color) in tailwindColorDefs\"\n                :key=\"`color-${color}`\"\n                class=\"flex w-full items-center space-x-3\"\n            >\n                <div\n                    v-for=\"swatch in colors\"\n                    :key=\"`${color}-${swatch.name}`\"\n                    :class=\"\n                        clsx(\n                            'flex h-6 w-6 items-center justify-center rounded-full text-xs text-foreground',\n                            'hover:ring-[1.5px] hover:ring-ring hover:ring-offset-2',\n                            'relative',\n                            swatch.background,\n                            swatch.text,\n                            {\n                                'ring-[1.5px] ring-ring ring-offset-2':\n                                    editableValue === swatch.hex,\n                            }\n                        )\n                    \"\n                    @click=\"handleColorClick(swatch.hex)\"\n                >\n                    <div\n                        v-if=\"flashColor === swatch.hex\"\n                        class=\"absolute inset-0 rounded-full animate-color-flash\"\n                        :class=\"swatch.background\"\n                    ></div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport clsx from 'clsx'\nimport { computed, ref } from 'vue'\n\ninterface Props {\n    /**\n     * A hex color string value\n     * @example '#f0fdf4'\n     *\n     * @default ''\n     * @type {string}\n     */\n    modelValue: string\n}\n\nconst props = withDefaults(defineProps<Props>(), {})\n\nconst tailwindColorDefs = ref({\n    green: [\n        {\n            name: 'green-50',\n            background: 'bg-green-50',\n            text: 'text-green-800',\n            ring: 'ring-green-50',\n            hex: '#f0fdf4',\n        },\n        {\n            name: 'green-100',\n            background: 'bg-green-100',\n            text: 'text-green-800',\n            hex: '#dcfce7',\n        },\n        {\n            name: 'green-200',\n            background: 'bg-green-200',\n            text: 'text-green-800',\n            hex: '#bbf7d0',\n        },\n        {\n            name: 'green-300',\n            background: 'bg-green-300',\n            text: 'text-green-800',\n            hex: '#86efac',\n        },\n        {\n            name: 'green-400',\n            background: 'bg-green-400',\n            text: 'text-green-800',\n            hex: '#4ade80',\n        },\n        {\n            name: 'green-500',\n            background: 'bg-green-500',\n            text: 'text-green-800',\n            hex: '#22c55e',\n        },\n        {\n            name: 'green-600',\n            background: 'bg-green-600',\n            text: 'text-green-200',\n            hex: '#16a34a',\n        },\n        {\n            name: 'green-700',\n            background: 'bg-green-700',\n            text: 'text-green-200',\n            hex: '#15803d',\n        },\n        {\n            name: 'green-800',\n            background: 'bg-green-800',\n            text: 'text-green-200',\n            hex: '#166534',\n        },\n        {\n            name: 'green-900',\n            background: 'bg-green-900',\n            text: 'text-green-200',\n            hex: '#14532d',\n        },\n    ],\n\n    blue: [\n        {\n            name: 'blue-50',\n            background: 'bg-blue-50',\n            text: 'text-blue-800',\n            hex: '#eff6ff',\n        },\n        {\n            name: 'blue-100',\n            background: 'bg-blue-100',\n            text: 'text-blue-800',\n            hex: '#dbeafe',\n        },\n        {\n            name: 'blue-200',\n            background: 'bg-blue-200',\n            text: 'text-blue-800',\n            hex: '#bfdbfe',\n        },\n        {\n            name: 'blue-300',\n            background: 'bg-blue-300',\n            text: 'text-blue-800',\n            hex: '#93c5fd',\n        },\n        {\n            name: 'blue-400',\n            background: 'bg-blue-400',\n            text: 'text-blue-800',\n            hex: '#60a5fa',\n        },\n        {\n            name: 'blue-500',\n            background: 'bg-blue-500',\n            text: 'text-blue-800',\n            hex: '#3b82f6',\n        },\n        {\n            name: 'blue-600',\n            background: 'bg-blue-600',\n            text: 'text-blue-200',\n            hex: '#2563eb',\n        },\n        {\n            name: 'blue-700',\n            background: 'bg-blue-700',\n            text: 'text-blue-200',\n            hex: '#1d4ed8',\n        },\n        {\n            name: 'blue-800',\n            background: 'bg-blue-800',\n            text: 'text-blue-200',\n            hex: '#1e40af',\n        },\n        {\n            name: 'blue-900',\n            background: 'bg-blue-900',\n            text: 'text-blue-200',\n            hex: '#1e3a8a',\n        },\n    ],\n\n    yellow: [\n        {\n            name: 'yellow-50',\n            background: 'bg-yellow-50',\n            text: 'text-yellow-800',\n            hex: '#fefce8',\n        },\n        {\n            name: 'yellow-100',\n            background: 'bg-yellow-100',\n            text: 'text-yellow-800',\n            hex: '#fef9c3',\n        },\n        {\n            name: 'yellow-200',\n            background: 'bg-yellow-200',\n            text: 'text-yellow-800',\n            hex: '#fef08a',\n        },\n        {\n            name: 'yellow-300',\n            background: 'bg-yellow-300',\n            text: 'text-yellow-800',\n            hex: '#fde047',\n        },\n        {\n            name: 'yellow-400',\n            background: 'bg-yellow-400',\n            text: 'text-yellow-800',\n            hex: '#facc15',\n        },\n        {\n            name: 'yellow-500',\n            background: 'bg-yellow-500',\n            text: 'text-yellow-800',\n            hex: '#eab308',\n        },\n        {\n            name: 'yellow-600',\n            background: 'bg-yellow-600',\n            text: 'text-yellow-200',\n            hex: '#ca8a04',\n        },\n        {\n            name: 'yellow-700',\n            background: 'bg-yellow-700',\n            text: 'text-yellow-200',\n            hex: '#a16207',\n        },\n        {\n            name: 'yellow-800',\n            background: 'bg-yellow-800',\n            text: 'text-yellow-200',\n            hex: '#854d0e',\n        },\n        {\n            name: 'yellow-900',\n            background: 'bg-yellow-900',\n            text: 'text-yellow-200',\n            hex: '#713f12',\n        },\n    ],\n\n    red: [\n        {\n            name: 'red-50',\n            background: 'bg-red-50',\n            text: 'text-red-800',\n            hex: '#fef2f2',\n        },\n        {\n            name: 'red-100',\n            background: 'bg-red-100',\n            text: 'text-red-800',\n            hex: '#fee2e2',\n        },\n        {\n            name: 'red-200',\n            background: 'bg-red-200',\n            text: 'text-red-800',\n            hex: '#fecaca',\n        },\n        {\n            name: 'red-300',\n            background: 'bg-red-300',\n            text: 'text-red-800',\n            hex: '#fca5a5',\n        },\n        {\n            name: 'red-400',\n            background: 'bg-red-400',\n            text: 'text-red-800',\n            hex: '#f87171',\n        },\n        {\n            name: 'red-500',\n            background: 'bg-red-500',\n            text: 'text-red-800',\n            hex: '#ef4444',\n        },\n        {\n            name: 'red-600',\n            background: 'bg-red-600',\n            text: 'text-red-200',\n            hex: '#dc2626',\n        },\n        {\n            name: 'red-700',\n            background: 'bg-red-700',\n            text: 'text-red-200',\n            hex: '#b91c1c',\n        },\n        {\n            name: 'red-800',\n            background: 'bg-red-800',\n            text: 'text-red-200',\n            hex: '#991b1b',\n        },\n        {\n            name: 'red-900',\n            background: 'bg-red-900',\n            text: 'text-red-200',\n            hex: '#7f1d1d',\n        },\n    ],\n\n    orange: [\n        {\n            name: 'orange-50',\n            background: 'bg-orange-50',\n            text: 'text-orange-800',\n            hex: '#fff7ed',\n        },\n        {\n            name: 'orange-100',\n            background: 'bg-orange-100',\n            text: 'text-orange-800',\n            hex: '#ffedd5',\n        },\n        {\n            name: 'orange-200',\n            background: 'bg-orange-200',\n            text: 'text-orange-800',\n            hex: '#fed7aa',\n        },\n        {\n            name: 'orange-300',\n            background: 'bg-orange-300',\n            text: 'text-orange-800',\n            hex: '#fdba74',\n        },\n        {\n            name: 'orange-400',\n            background: 'bg-orange-400',\n            text: 'text-orange-800',\n            hex: '#fb923c',\n        },\n        {\n            name: 'orange-500',\n            background: 'bg-orange-500',\n            text: 'text-orange-800',\n            hex: '#f97316',\n        },\n        {\n            name: 'orange-600',\n            background: 'bg-orange-600',\n            text: 'text-orange-200',\n            hex: '#ea580c',\n        },\n        {\n            name: 'orange-700',\n            background: 'bg-orange-700',\n            text:... [truncated]",
    "url": "/components/color-picker/ColorPicker",
    "source": "components"
  },
  {
    "objectID": "/components/combobox/Combobox",
    "title": "Combobox",
    "content": "<template>\n    <div :class=\"m('relative rounded-lg')\">\n        <Combobox\n            :model-value=\"modelValue\"\n            :multiple=\"multiple\"\n            :nullable=\"nullable\"\n            @update:model-value=\"$emit('update:modelValue', $event)\"\n        >\n            <div class=\"relative\">\n                <div\n                    ref=\"reference\"\n                    :class=\"\n                        m(\n                            'border rounded-md hover:bg-accent/50 shadow-xs focus-within:outline-none focus-within:ring-3 focus-within:ring-ring/40 transition-[box-shadow,color]',\n                            theme.baseDropdownInputContainer\n                        )\n                    \"\n                >\n                    <div class=\"flex items-start flex-wrap gap-1 p-1\">\n                        <template v-if=\"multiple && modelValue?.length\">\n                            <div\n                                v-for=\"item in modelValue\"\n                                :key=\"item[uidProperty]\"\n                                class=\"flex items-center gap-1 rounded-md bg-accent px-2 py-0.5 text-sm\"\n                            >\n                                <span>{{ displayProperty(item) }}</span>\n                                <button\n                                    type=\"button\"\n                                    class=\"ml-1 rounded-full hover:bg-accent-foreground/20\"\n                                    @click.stop=\"removeItem(item)\"\n                                >\n                                    <span class=\"sr-only\"\n                                        >Remove\n                                        {{ displayProperty(item) }}</span\n                                    >\n                                    <svg\n                                        class=\"size-3\"\n                                        viewBox=\"0 0 24 24\"\n                                        fill=\"none\"\n                                        stroke=\"currentColor\"\n                                        stroke-width=\"2\"\n                                    >\n                                        <path d=\"M18 6L6 18M6 6l12 12\" />\n                                    </svg>\n                                </button>\n                            </div>\n                        </template>\n                        <ComboboxInput\n                            :class=\"[\n                                'flex-1 min-w-[120px] rounded-md border-0 bg-transparent pl-2.5 py-0.5 pr-8 text-sm truncate ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground/60 focus-visible:outline-none focus-visible:ring-0 disabled:cursor-not-allowed disabled:opacity-50',\n                                multiple && modelValue?.length ? 'pl-1' : '',\n                                theme.baseDropdownInputText,\n                            ]\"\n                            :displayValue=\"displayProperty\"\n                            :placeholder=\"placeholder\"\n                            autoComplete=\"off\"\n                            @focus=\"open = true\"\n                            @blur=\"open = false\"\n                            @change=\"query = $event.target.value\"\n                            @keydown.delete=\"handleDeleteKey\"\n                        />\n                    </div>\n                    <ComboboxButton\n                        :class=\"[\n                            'absolute inset-y-0 right-0 flex items-center pr-2 text-muted-foreground',\n                        ]\"\n                    >\n                        <ChevronDown class=\"size-4 text-inherit\" />\n                    </ComboboxButton>\n                </div>\n\n                <transition\n                    enter-active-class=\"transition duration-200 ease-out\"\n                    enter-from-class=\"translate-y-1 opacity-0\"\n                    enter-to-class=\"translate-y-0 opacity-100\"\n                    leave-active-class=\"transition duration-150 ease-in\"\n                    leave-from-class=\"translate-y-0 opacity-100\"\n                    leave-to-class=\"translate-y-1 opacity-0\"\n                >\n                    <ComboboxOptions\n                        ref=\"floating\"\n                        :class=\"\n                            m(\n                                'fixed left-0 z-10 overflow-x-hidden overflow-y-auto rounded-lg bg-popover p-1.5 text-base shadow-lg border border-ring focus:outline-hidden sm:text-sm',\n                                theme.generalFloatingPanelContainer\n                            )\n                        \"\n                        :style=\"floatingStyles\"\n                        :static=\"isStatic\"\n                    >\n                        <div v-if=\"filteredItems.length === 0\">\n                            <slot v-if=\"$slots.empty\" name=\"empty\" />\n                            <span v-else>No results</span>\n                        </div>\n\n                        <div v-if=\"groupBy\">\n                            <div\n                                v-for=\"(group, groupName) in groupByFnc(\n                                    items,\n                                    item => item[groupBy as string]\n                                )\"\n                                class=\"border-t border-ring px-2 first:border-t-0 py-2 first:pt-0 last:pb-0\"\n                            >\n                                <div\n                                    class=\"flex items-center text-base font-medium\"\n                                >\n                                    <slot\n                                        v-if=\"$slots.group\"\n                                        name=\"group\"\n                                        v-bind=\"{\n                                            group,\n                                            groupName,\n                                        }\"\n                                    />\n                                    <span v-else>{{\n                                        ![\n                                            'undefined',\n                                            null,\n                                            undefined,\n                                        ].includes(groupName)\n                                            ? groupName\n                                            : 'Uncategorized'\n                                    }}</span>\n                                </div>\n                                <div class=\"-mx-2.5\">\n                                    <ComboboxOption\n                                        v-for=\"item in group\"\n                                        :key=\"item[uidProperty]\"\n                                        :value=\"item\"\n                                        :disabled=\"\n                                            disabledItems?.some(\n                                                disabledItem =>\n                                                    disabledItem[\n                                                        uidProperty\n                                                    ] === item[uidProperty]\n                                            )\n                                        \"\n                                        v-slot=\"{ active, selected, disabled }\"\n                                    >\n                                        <span\n                                            :class=\"[\n                                                'cursor-pointer hover:bg-accent rounded-md px-2 py-1 flex w-full truncate',\n                                                active && 'bg-accent',\n                                                selected && 'bg-accent',\n                                                disabled &&\n                                                    'opacity-50 cursor-not-allowed pointer-events-none',\n                                            ]\"\n                                        >\n                                            <slot\n                                                v-if=\"$slots.item\"\n                                                name=\"item\"\n                                                v-bind=\"{\n                                                    item,\n                                                    active,\n                                                    selected,\n                                                    disabled,\n                                                }\"\n                                            />\n                                            <span v-else>{{\n                                                displayProperty(item)\n                                            }}</span>\n                                        </span>\n                                    </ComboboxOption>\n                                </div>\n                            </div>\n                        </div>\n\n                        <ComboboxOption\n                            v-else\n                            v-for=\"item in filteredItems\"\n                            :key=\"item[uidProperty]\"\n                            :value=\"item\"\n                            :disabled=\"\n                                disabledItems?.some(\n                         ... [truncated]",
    "url": "/components/combobox/Combobox",
    "source": "components"
  },
  {
    "objectID": "/components/drawer/Drawer",
    "title": "Drawer",
    "content": "<script setup lang=\"ts\">\nimport { DrawerOverlay, DrawerPortal, DrawerRoot } from 'vaul-vue'\n</script>\n\n<template>\n    <DrawerRoot should-scale-background>\n        <slot name=\"trigger\" />\n        <DrawerPortal>\n            <DrawerOverlay\n                class=\"fixed bg-black/40 inset-0\"\n                :style=\"{ zIndex: 'var(--z-modal-backdrop)' }\"\n            />\n            <slot />\n        </DrawerPortal>\n    </DrawerRoot>\n</template>\n",
    "url": "/components/drawer/Drawer",
    "source": "components"
  },
  {
    "objectID": "/components/drawer/DrawerContent",
    "title": "DrawerContent",
    "content": "<script setup lang=\"ts\">\nimport { DrawerContent, DrawerHandle } from 'vaul-vue'\nimport { m } from '../../utils'\n\nconst props = defineProps<{\n    class?: string\n}>()\n</script>\n\n<template>\n    <DrawerContent\n        :class=\"\n            m(\n                'bg-card flex flex-col rounded-t-[10px] h-full mt-24 max-h-[96%] fixed bottom-0 left-0 right-0',\n                props.class\n            )\n        \"\n        :style=\"{ zIndex: 'var(--z-modal)' }\"\n    >\n        <div class=\"p-4 bg-card rounded-t-[10px] flex-1\">\n            <DrawerHandle data-testid=\"handle\" class=\"mb-8 mt-2\" />\n            <slot />\n        </div>\n    </DrawerContent>\n</template>\n",
    "url": "/components/drawer/DrawerContent",
    "source": "components"
  },
  {
    "objectID": "/components/drawer/DrawerTrigger",
    "title": "DrawerTrigger",
    "content": "<script setup lang=\"ts\">\nimport { DrawerTrigger } from 'vaul-vue'\n</script>\n\n<template>\n    <DrawerTrigger as-child>\n        <slot />\n    </DrawerTrigger>\n</template>\n",
    "url": "/components/drawer/DrawerTrigger",
    "source": "components"
  },
  {
    "objectID": "/components/drawer-copy/Drawer",
    "title": "Drawer",
    "content": "<template>\n    <DrawerRoot\n        ref=\"drawerRootRef\"\n        :open=\"open\"\n        :position=\"position\"\n        :close-on-backdrop-click=\"closeOnBackdropClick\"\n        :close-on-escape=\"closeOnEscape\"\n        :prevent-body-scroll=\"preventBodyScroll\"\n        :theme=\"theme\"\n        @close=\"$emit('close')\"\n        @update:open=\"$emit('update:open', $event)\"\n    >\n        <DrawerContent\n            ref=\"drawerContentRef\"\n            :open=\"open\"\n            :position=\"position\"\n            :size=\"size\"\n            :drag-to-close=\"dragToClose\"\n            :drag-threshold=\"dragThreshold\"\n            :velocity-threshold=\"velocityThreshold\"\n            :theme=\"theme\"\n            @close=\"$emit('close')\"\n            @update:open=\"$emit('update:open', $event)\"\n            @drag-start=\"handleDragStart\"\n            @drag-end=\"handleDragEnd\"\n        >\n            <slot />\n        </DrawerContent>\n    </DrawerRoot>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport DrawerRoot from './DrawerRoot.vue'\nimport DrawerContent from './DrawerContent.vue'\n\nconst emit = defineEmits<{\n    close: []\n    'update:open': [value: boolean]\n}>()\n\nconst drawerContentRef = ref<InstanceType<typeof DrawerContent>>()\nconst drawerRootRef = ref<InstanceType<typeof DrawerRoot>>()\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * Controls whether the drawer is open or closed.\n         * @type {boolean}\n         */\n        open: boolean\n\n        /**\n         * The position of the drawer on the screen.\n         * @type {'left' | 'right' | 'top' | 'bottom'}\n         */\n        position?: 'left' | 'right' | 'top' | 'bottom'\n\n        /**\n         * The size of the drawer.\n         * @type {'sm' | 'default' | 'lg' | 'xl' | 'full'}\n         */\n        size?: 'sm' | 'default' | 'lg' | 'xl' | 'full'\n\n        /**\n         * Whether to show the close button in the header.\n         * @type {boolean}\n         */\n        showCloseButton?: boolean\n\n        /**\n         * Whether clicking the backdrop closes the drawer.\n         * @type {boolean}\n         */\n        closeOnBackdropClick?: boolean\n\n        /**\n         * Whether pressing the Escape key closes the drawer.\n         * @type {boolean}\n         */\n        closeOnEscape?: boolean\n\n        /**\n         * Whether to prevent body scroll when drawer is open.\n         * @type {boolean}\n         */\n        preventBodyScroll?: boolean\n\n        /**\n         * Whether drag-to-close is enabled.\n         * @type {boolean}\n         */\n        dragToClose?: boolean\n\n        /**\n         * The threshold distance to trigger close on drag end.\n         * @type {number}\n         */\n        dragThreshold?: number\n\n        /**\n         * The velocity threshold to trigger close on flick.\n         * @type {number}\n         */\n        velocityThreshold?: number\n\n        /**\n         * The aria-label for the close button.\n         * @type {string}\n         */\n        closeButtonLabel?: string\n\n        /**\n         * Locally customize the component's theme properties.\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            backdrop?: string\n            container?: string\n            content?: string\n            closeButton?: string\n        }\n    }>(),\n    {\n        open: false,\n        position: 'right',\n        size: 'default',\n        showCloseButton: true,\n        closeOnBackdropClick: true,\n        closeOnEscape: true,\n        preventBodyScroll: true,\n        dragToClose: true,\n        dragThreshold: 100,\n        velocityThreshold: 0.5,\n        closeButtonLabel: 'Close drawer',\n        theme: () => ({\n            backdrop: '',\n            container: '',\n            content: '',\n            closeButton: '',\n        }),\n    }\n)\n\n// Handle drag state changes\nconst handleDragStart = () => {\n    if (drawerRootRef.value) {\n        drawerRootRef.value.setDragging(true)\n    }\n}\n\nconst handleDragEnd = () => {\n    if (drawerRootRef.value) {\n        drawerRootRef.value.setDragging(false)\n    }\n}\n\n// Generate unique IDs for accessibility\nconst titleId = `drawer-title-${Math.random().toString(36).substr(2, 9)}`\n\n// Expose methods\ndefineExpose({\n    close: () => emit('close'),\n})\n</script>\n\n<style scoped>\n/* Ensure drawer is above other content */\n:deep([role='dialog']) {\n    z-index: var(--z-modal-backdrop);\n}\n</style>\n",
    "url": "/components/drawer-copy/Drawer",
    "source": "components"
  },
  {
    "objectID": "/components/drawer-copy/DrawerBody",
    "title": "DrawerBody",
    "content": "<template>\n    <div\n        :class=\"\n            m(\n                'flex-1 overflow-auto',\n                hasHeader && 'p-4 pt-0',\n                hasFooter && 'p-4 pb-0',\n                !hasHeader && !hasFooter && 'p-4',\n                theme.content\n            )\n        \"\n    >\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * Whether the drawer has a header.\n         * @type {boolean}\n         */\n        hasHeader?: boolean\n\n        /**\n         * Whether the drawer has a footer.\n         * @type {boolean}\n         */\n        hasFooter?: boolean\n\n        /**\n         * Locally customize the component's theme properties.\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            content?: string\n        }\n    }>(),\n    {\n        hasHeader: false,\n        hasFooter: false,\n        theme: () => ({\n            content: '',\n        }),\n    }\n)\n</script>\n",
    "url": "/components/drawer-copy/DrawerBody",
    "source": "components"
  },
  {
    "objectID": "/components/drawer-copy/DrawerClose",
    "title": "DrawerClose",
    "content": "<template>\n    <button\n        type=\"button\"\n        :class=\"\n            m(\n                'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background hover:bg-accent hover:text-accent-foreground h-8 w-8 p-0',\n                theme.closeButton\n            )\n        \"\n        :aria-label=\"closeButtonLabel\"\n        @click=\"handleClose\"\n    >\n        <X class=\"h-4 w-4\" />\n        <span class=\"sr-only\">{{ closeButtonLabel }}</span>\n    </button>\n</template>\n\n<script setup lang=\"ts\">\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\nimport { X } from 'lucide-vue-next'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst emit = defineEmits<{\n    close: []\n}>()\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * The aria-label for the close button.\n         * @type {string}\n         */\n        closeButtonLabel?: string\n\n        /**\n         * Locally customize the component's theme properties.\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            closeButton?: string\n        }\n    }>(),\n    {\n        closeButtonLabel: 'Close drawer',\n        theme: () => ({\n            closeButton: '',\n        }),\n    }\n)\n\nconst handleClose = () => {\n    emit('close')\n}\n</script>\n",
    "url": "/components/drawer-copy/DrawerClose",
    "source": "components"
  },
  {
    "objectID": "/components/drawer-copy/DrawerContent",
    "title": "DrawerContent",
    "content": "<template>\n    <div\n        ref=\"drawerRef\"\n        :class=\"\n            m(\n                'relative bg-card shadow-lg border rounded-l-lg border-ring flex flex-col',\n                positionClasses,\n                sizeClasses,\n                theme.container\n            )\n        \"\n        :style=\"dragStyle\"\n        @mousedown=\"handleMouseDown\"\n        @touchstart=\"handleTouchStart\"\n        @touchmove=\"handleTouchMove\"\n        @touchend=\"handleTouchEnd\"\n        @click.stop\n        @keydown=\"focusTrap\"\n    >\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch, nextTick } from 'vue'\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst emit = defineEmits<{\n    close: []\n    'update:open': [value: boolean]\n    'drag-start': []\n    'drag-end': []\n}>()\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * Controls whether the drawer is open or closed.\n         * @type {boolean}\n         */\n        open?: boolean\n\n        /**\n         * The position of the drawer on the screen.\n         * @type {'left' | 'right' | 'top' | 'bottom'}\n         */\n        position?: 'left' | 'right' | 'top' | 'bottom'\n\n        /**\n         * The size of the drawer.\n         * @type {'sm' | 'default' | 'lg' | 'xl' | 'full'}\n         */\n        size?: 'sm' | 'default' | 'lg' | 'xl' | 'full'\n\n        /**\n         * Whether drag-to-close is enabled.\n         * @type {boolean}\n         */\n        dragToClose?: boolean\n\n        /**\n         * The threshold distance to trigger close on drag end.\n         * @type {number}\n         */\n        dragThreshold?: number\n\n        /**\n         * The velocity threshold to trigger close on flick.\n         * @type {number}\n         */\n        velocityThreshold?: number\n\n        /**\n         * Locally customize the component's theme properties.\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            container?: string\n            content?: string\n        }\n    }>(),\n    {\n        open: false,\n        position: 'right',\n        size: 'default',\n        dragToClose: true,\n        dragThreshold: 100,\n        velocityThreshold: 0.5,\n        theme: () => ({\n            container: '',\n            content: '',\n        }),\n    }\n)\n\nconst drawerRef = ref<HTMLElement>()\nconst isDragging = ref(false)\nconst dragOffset = ref({ x: 0, y: 0 })\nconst startPos = ref({ x: 0, y: 0 })\nconst lastPos = ref({ x: 0, y: 0 })\nconst velocity = ref({ x: 0, y: 0 })\nconst lastTime = ref(0)\nconst dragStartTime = ref(0)\nconst shouldAnimateWidthBack = ref(false)\n\n// Position-based classes\nconst positionClasses = computed(() => {\n    switch (props.position) {\n        case 'left':\n            return 'h-full'\n        case 'right':\n            return 'h-full'\n        case 'top':\n            return 'w-full'\n        case 'bottom':\n            return 'w-full'\n        default:\n            return 'h-full'\n    }\n})\n\n// Size-based classes\nconst sizeClasses = computed(() => {\n    switch (props.position) {\n        case 'left':\n        case 'right':\n            switch (props.size) {\n                case 'sm':\n                    return 'w-80'\n                case 'default':\n                    return 'w-96'\n                case 'lg':\n                    return 'w-[28rem]'\n                case 'xl':\n                    return 'w-[32rem]'\n                case 'full':\n                    return 'w-full'\n                default:\n                    return 'w-96'\n            }\n        case 'top':\n        case 'bottom':\n            switch (props.size) {\n                case 'sm':\n                    return 'h-64'\n                case 'default':\n                    return 'h-80'\n                case 'lg':\n                    return 'h-96'\n                case 'xl':\n                    return 'h-[28rem]'\n                case 'full':\n                    return 'h-full'\n                default:\n                    return 'h-80'\n            }\n        default:\n            return 'w-96'\n    }\n})\n\n// Compute the base width in px for the right drawer\nconst baseWidthPx = computed(() => {\n    switch (props.size) {\n        case 'sm':\n            return 320 // w-80\n        case 'default':\n            return 384 // w-96\n        case 'lg':\n            return 448 // w-[28rem]\n        case 'xl':\n            return 512 // w-[32rem]\n        case 'full':\n            return window.innerWidth\n        default:\n            return 384\n    }\n})\n\n// Compute the drag style for the right-anchored drawer\nconst dragStyle = computed(() => {\n    if (props.position === 'right') {\n        if (dragOffset.value.x >= 0) {\n            // Normal drag-to-close (right)\n            return {\n                zIndex: 'var(--z-modal)',\n                transform: `translateX(${dragOffset.value.x}px)`,\n                width: `${baseWidthPx.value}px`,\n                right: '0',\n                transition:\n                    isDragging.value || shouldAnimateWidthBack.value\n                        ? 'none'\n                        : 'transform 0.7s cubic-bezier(0.32,0.72,0,1)',\n            }\n        } else {\n            // Opposite direction: stretch width, keep right edge anchored\n            return {\n                zIndex: 'var(--z-modal)',\n                width: `${baseWidthPx.value - dragOffset.value.x}px`,\n                right: '0',\n                transform: 'none',\n                transition:\n                    shouldAnimateWidthBack.value || !isDragging.value\n                        ? 'width 0.7s cubic-bezier(0.32,0.72,0,1)'\n                        : 'none',\n            }\n        }\n    } else {\n        // Fallback for other positions (not implemented yet)\n        return {\n            zIndex: 'var(--z-modal)',\n            transform: `translate(${dragOffset.value.x}px, ${dragOffset.value.y}px)`,\n            transition: isDragging.value\n                ? 'none'\n                : 'transform 0.7s cubic-bezier(0.32,0.72,0,1)',\n        }\n    }\n})\n\n// Get the primary drag axis and direction for the current position\nconst getDragConfig = () => {\n    switch (props.position) {\n        case 'right':\n            return { axis: 'x', closeDirection: 1, openDirection: -1 }\n        case 'left':\n            return { axis: 'x', closeDirection: -1, openDirection: 1 }\n        case 'top':\n            return { axis: 'y', closeDirection: -1, openDirection: 1 }\n        case 'bottom':\n            return { axis: 'y', closeDirection: 1, openDirection: -1 }\n        default:\n            return { axis: 'x', closeDirection: 1, openDirection: -1 }\n    }\n}\n\n// Drag handlers\nconst handleMouseDown = (event: MouseEvent) => {\n    if (!props.dragToClose || event.button !== 0) return\n\n    event.preventDefault()\n    startDrag(event.clientX, event.clientY, Date.now())\n\n    const handleMouseMove = (e: MouseEvent) => {\n        if (!isDragging.value) return\n        handleDrag(e.clientX, e.clientY, Date.now())\n    }\n\n    const handleMouseUp = (e: MouseEvent) => {\n        if (!isDragging.value) return\n        endDrag(Date.now())\n        document.removeEventListener('mousemove', handleMouseMove)\n        document.removeEventListener('mouseup', handleMouseUp)\n    }\n\n    document.addEventListener('mousemove', handleMouseMove)\n    document.addEventListener('mouseup', handleMouseUp)\n}\n\nconst handleTouchStart = (event: TouchEvent) => {\n    if (!props.dragToClose || event.touches.length !== 1) return\n\n    event.preventDefault()\n    const touch = event.touches[0]\n    startDrag(touch.clientX, touch.clientY, Date.now())\n}\n\nconst handleTouchMove = (event: TouchEvent) => {\n    if (!isDragging.value || event.touches.length !== 1) return\n\n    event.preventDefault()\n    const touch = event.touches[0]\n    handleDrag(touch.clientX, touch.clientY, Date.now())\n}\n\nconst handleTouchEnd = (event: TouchEvent) => {\n    if (!isDragging.value) return\n    endDrag(Date.now())\n}\n\nconst startDrag = (clientX: number, clientY: number, timestamp: number) => {\n    isDragging.value = true\n    startPos.value = { x: clientX, y: clientY }\n    lastPos.value = { x: clientX, y: clientY }\n    lastTime.value = timestamp\n    dragStartTime.value = timestamp\n    velocity.value = { x: 0, y: 0 }\n\n    // Emit drag start event\n    emit('drag-start')\n\n    // Add haptic feedback on mobile\n    if ('vibrate' in navigator) {\n        navigator.vibrate(10)\n    }\n}\n\nconst handleDrag = (clientX: number, clientY: number, timestamp: number) => {\n    const deltaX = clientX - lastPos.value.x\n    const deltaY = clientY - lastPos.value.y\n    const deltaTime = timestamp - lastTime.value\n\n    // Calculate velocity (pixels per millisecond)\n    if (deltaTime > 0) {\n        velocity.value = {\n            x: deltaX / deltaTime,\n            y: deltaY / deltaTime,\n        }\n    }\n\n    const config = getDragConfig()\n    let newOffset = { x: dragOffset.value.x, y: dragOffset.value.y }\n\n    if (props.position === 'right') {\n        // Calculate total drag from anchor\n        const dragFromAnchor = clientX - startPos.value.x\n        if (dragFromAnchor < 0) {\n            // Stretch (opposite direction)\n     ... [truncated]",
    "url": "/components/drawer-copy/DrawerContent",
    "source": "components"
  },
  {
    "objectID": "/components/drawer-copy/DrawerFooter",
    "title": "DrawerFooter",
    "content": "<template>\n    <div\n        :class=\"\n            m(\n                'flex items-center justify-end space-x-2 p-4 border-t border-border',\n                theme.footer\n            )\n        \"\n    >\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * Locally customize the component's theme properties.\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            footer?: string\n        }\n    }>(),\n    {\n        theme: () => ({\n            footer: '',\n        }),\n    }\n)\n</script>\n",
    "url": "/components/drawer-copy/DrawerFooter",
    "source": "components"
  },
  {
    "objectID": "/components/drawer-copy/DrawerHandle",
    "title": "DrawerHandle",
    "content": "<template>\n    <div\n        ref=\"handleRef\"\n        :class=\"\n            m(\n                'flex items-center justify-center cursor-grab touch-none select-none',\n                positionClasses,\n                theme.handle\n            )\n        \"\n    >\n        <div\n            :class=\"\n                m(\n                    'rounded-full bg-muted-foreground/20 transition-colors',\n                    indicatorClasses,\n                    theme.indicator\n                )\n            \"\n        />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * The position of the drawer on the screen.\n         * @type {'left' | 'right' | 'top' | 'bottom'}\n         */\n        position?: 'left' | 'right' | 'top' | 'bottom'\n\n        /**\n         * Locally customize the component's theme properties.\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            handle?: string\n            indicator?: string\n        }\n    }>(),\n    {\n        position: 'right',\n        theme: () => ({\n            handle: '',\n            indicator: '',\n        }),\n    }\n)\n\nconst handleRef = ref<HTMLElement>()\n\n// Position-based classes for handle container\nconst positionClasses = computed(() => {\n    switch (props.position) {\n        case 'left':\n            return 'w-6 h-full' // Vertical handle on left side\n        case 'right':\n            return 'w-6 h-full' // Vertical handle on left side of right drawer\n        case 'top':\n            return 'w-full h-6' // Horizontal handle on top\n        case 'bottom':\n            return 'w-full h-6' // Horizontal handle on bottom\n        default:\n            return 'w-6 h-full'\n    }\n})\n\n// Position-based classes for indicator\nconst indicatorClasses = computed(() => {\n    switch (props.position) {\n        case 'left':\n        case 'right':\n            return 'w-1.5 h-12' // Vertical indicator\n        case 'top':\n        case 'bottom':\n            return 'w-12 h-1.5' // Horizontal indicator\n        default:\n            return 'w-1.5 h-12'\n    }\n})\n\n// Expose ref\ndefineExpose({\n    handleRef,\n})\n</script>\n",
    "url": "/components/drawer-copy/DrawerHandle",
    "source": "components"
  },
  {
    "objectID": "/components/drawer-copy/DrawerHeader",
    "title": "DrawerHeader",
    "content": "<template>\n    <div\n        :class=\"\n            m(\n                'flex items-center justify-between p-4 border-b border-border relative',\n                theme.header\n            )\n        \"\n    >\n        <div class=\"flex items-center space-x-2\">\n            <slot name=\"title\">\n                <slot name=\"default\" />\n            </slot>\n        </div>\n        <DrawerClose\n            v-if=\"showCloseButton\"\n            :close-button-label=\"closeButtonLabel\"\n            :theme=\"{ closeButton: theme.closeButton }\"\n            @close=\"handleClose\"\n        />\n    </div>\n    <DrawerHandle\n        v-if=\"showDragHandle\"\n        :position=\"position\"\n        :class=\"handlePositionClasses\"\n        :theme=\"{ handle: theme.handle, indicator: theme.indicator }\"\n    />\n</template>\n\n<script setup lang=\"ts\">\nimport clsx, { type ClassValue } from 'clsx'\nimport { computed } from 'vue'\nimport { twMerge } from 'tailwind-merge'\nimport DrawerClose from './DrawerClose.vue'\nimport DrawerHandle from './DrawerHandle.vue'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst emit = defineEmits<{\n    close: []\n    'update:open': [value: boolean]\n}>()\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * The position of the drawer on the screen.\n         * @type {'left' | 'right' | 'top' | 'bottom'}\n         */\n        position?: 'left' | 'right' | 'top' | 'bottom'\n\n        /**\n         * Whether to show the close button in the header.\n         * @type {boolean}\n         */\n        showCloseButton?: boolean\n\n        /**\n         * Whether to show the drag handle.\n         * @type {boolean}\n         */\n        showDragHandle?: boolean\n\n        /**\n         * The aria-label for the close button.\n         * @type {string}\n         */\n        closeButtonLabel?: string\n\n        /**\n         * Locally customize the component's theme properties.\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            header?: string\n            closeButton?: string\n            handle?: string\n            indicator?: string\n        }\n    }>(),\n    {\n        position: 'right',\n        showCloseButton: true,\n        showDragHandle: true,\n        closeButtonLabel: 'Close drawer',\n        theme: () => ({\n            header: '',\n            closeButton: '',\n            handle: '',\n            indicator: '',\n        }),\n    }\n)\n\n// Position classes for the handle\nconst handlePositionClasses = computed(() => {\n    switch (props.position) {\n        case 'left':\n            return 'absolute right-0 top-0 bottom-0' // Handle on right side for left drawer\n        case 'right':\n            return 'absolute left-0 top-0 bottom-0' // Handle on left side for right drawer\n        case 'top':\n            return 'absolute left-0 right-0 bottom-0' // Handle on bottom for top drawer\n        case 'bottom':\n            return 'absolute left-0 right-0 top-0' // Handle on top for bottom drawer\n        default:\n            return 'absolute left-0 top-0 bottom-0'\n    }\n})\n\nconst handleClose = () => {\n    emit('close')\n    emit('update:open', false)\n}\n</script>\n",
    "url": "/components/drawer-copy/DrawerHeader",
    "source": "components"
  },
  {
    "objectID": "/components/drawer-copy/DrawerRoot",
    "title": "DrawerRoot",
    "content": "<template>\n    <Teleport to=\"body\">\n        <!-- Backdrop -->\n        <Transition\n            enter-active-class=\"transition-all duration-300 ease-out\"\n            enter-from-class=\"opacity-0\"\n            enter-to-class=\"opacity-100\"\n            leave-active-class=\"transition-all duration-200 ease-in\"\n            leave-from-class=\"opacity-100\"\n            leave-to-class=\"opacity-0\"\n        >\n            <div\n                v-if=\"open\"\n                ref=\"backdropRef\"\n                :class=\"m('fixed inset-0 bg-background/50', theme.backdrop)\"\n                :style=\"{ zIndex: 'var(--z-modal-backdrop)' }\"\n            ></div>\n        </Transition>\n\n        <!-- Drawer Container -->\n        <Transition\n            :enter-active-class=\"enterActiveClass\"\n            :enter-from-class=\"enterFromClass\"\n            :enter-to-class=\"enterToClass\"\n            :leave-active-class=\"leaveActiveClass\"\n            :leave-from-class=\"leaveFromClass\"\n            :leave-to-class=\"leaveToClass\"\n        >\n            <!-- Fixed Drawer Container -->\n            <div\n                v-if=\"open\"\n                ref=\"drawerContainerRef\"\n                @click=\"handleBackdropClick\"\n                :class=\"\n                    m(\n                        'fixed inset-0 z-50 flex',\n                        positionClasses,\n                        theme.backdrop\n                    )\n                \"\n                :style=\"{ zIndex: 'var(--z-modal-backdrop)' }\"\n                @keydown=\"handleKeydown\"\n                tabindex=\"-1\"\n                role=\"dialog\"\n                :aria-modal=\"true\"\n                :aria-labelledby=\"titleId\"\n                :aria-describedby=\"descriptionId\"\n            >\n                <slot />\n            </div>\n        </Transition>\n    </Teleport>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch, nextTick, onMounted, onUnmounted } from 'vue'\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst emit = defineEmits<{\n    close: []\n    'update:open': [value: boolean]\n}>()\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * Controls whether the drawer is open or closed.\n         * @type {boolean}\n         */\n        open: boolean\n\n        /**\n         * The position of the drawer on the screen.\n         * @type {'left' | 'right' | 'top' | 'bottom'}\n         */\n        position?: 'left' | 'right' | 'top' | 'bottom'\n\n        /**\n         * Whether clicking the backdrop closes the drawer.\n         * @type {boolean}\n         */\n        closeOnBackdropClick?: boolean\n\n        /**\n         * Whether pressing the Escape key closes the drawer.\n         * @type {boolean}\n         */\n        closeOnEscape?: boolean\n\n        /**\n         * Whether to prevent body scroll when drawer is open.\n         * @type {boolean}\n         */\n        preventBodyScroll?: boolean\n\n        /**\n         * Locally customize the component's theme properties.\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            backdrop?: string\n        }\n    }>(),\n    {\n        open: false,\n        position: 'right',\n        closeOnBackdropClick: true,\n        closeOnEscape: true,\n        preventBodyScroll: true,\n        theme: () => ({\n            backdrop: '',\n        }),\n    }\n)\n\nconst drawerContainerRef = ref<HTMLElement>()\nconst backdropRef = ref<HTMLElement>()\nconst isDragging = ref(false)\n\n// Generate unique IDs for accessibility\nconst titleId = computed(\n    () => `drawer-title-${Math.random().toString(36).substr(2, 9)}`\n)\nconst descriptionId = computed(\n    () => `drawer-description-${Math.random().toString(36).substr(2, 9)}`\n)\n\n// Position-based classes and transitions\nconst positionClasses = computed(() => {\n    switch (props.position) {\n        case 'left':\n            return 'justify-start'\n        case 'right':\n            return 'justify-end'\n        case 'top':\n            return 'items-start'\n        case 'bottom':\n            return 'items-end'\n        default:\n            return 'justify-end'\n    }\n})\n\nconst enterActiveClass = computed(() => {\n    return 'transition-all duration-300 ease-out'\n})\n\nconst enterFromClass = computed(() => {\n    switch (props.position) {\n        case 'left':\n            return 'opacity-0 -translate-x-full'\n        case 'right':\n            return 'opacity-0 translate-x-full'\n        case 'top':\n            return 'opacity-0 -translate-y-full'\n        case 'bottom':\n            return 'opacity-0 translate-y-full'\n        default:\n            return 'opacity-0 translate-x-full'\n    }\n})\n\nconst enterToClass = computed(() => {\n    return 'opacity-100 translate-x-0 translate-y-0'\n})\n\nconst leaveActiveClass = computed(() => {\n    return 'transition-all duration-200 ease-in'\n})\n\nconst leaveFromClass = computed(() => {\n    return 'opacity-100 translate-x-0 translate-y-0'\n})\n\nconst leaveToClass = computed(() => {\n    switch (props.position) {\n        case 'left':\n            return 'opacity-0 -translate-x-full'\n        case 'right':\n            return 'opacity-0 translate-x-full'\n        case 'top':\n            return 'opacity-0 -translate-y-full'\n        case 'bottom':\n            return 'opacity-0 translate-y-full'\n        default:\n            return 'opacity-0 translate-x-full'\n    }\n})\n\n// Handle body scroll prevention\nlet originalBodyStyle: string | null = null\n\nconst preventScroll = () => {\n    if (!props.preventBodyScroll) return\n\n    originalBodyStyle = document.body.style.overflow\n    document.body.style.overflow = 'hidden'\n}\n\nconst restoreScroll = () => {\n    if (!props.preventBodyScroll) return\n\n    if (originalBodyStyle !== null) {\n        document.body.style.overflow = originalBodyStyle\n        originalBodyStyle = null\n    }\n}\n\n// Handle close events\nconst handleClose = () => {\n    // Don't close if we're currently dragging\n    if (isDragging.value) return\n\n    emit('close')\n    emit('update:open', false)\n}\n\nconst handleBackdropClick = (event: MouseEvent) => {\n    return\n    // Don't close if we're currently dragging\n    if (isDragging.value) return\n\n    if (\n        props.closeOnBackdropClick &&\n        event.target === drawerContainerRef.value\n    ) {\n        handleClose()\n    }\n}\n\nconst handleKeydown = (event: KeyboardEvent) => {\n    if (props.closeOnEscape && event.key === 'Escape') {\n        event.preventDefault()\n        handleClose()\n    }\n}\n\n// Method to track drag state from child components\nconst setDragging = (dragging: boolean) => {\n    isDragging.value = dragging\n}\n\n// Watch for open state changes\nwatch(\n    () => props.open,\n    async newValue => {\n        if (newValue) {\n            preventScroll()\n            await nextTick()\n            // Focus the drawer container for keyboard events\n            if (drawerContainerRef.value) {\n                drawerContainerRef.value.focus()\n            }\n        } else {\n            restoreScroll()\n        }\n    }\n)\n\n// Lifecycle\nonMounted(() => {\n    if (props.open) {\n        preventScroll()\n    }\n\n    // Add global escape key listener as fallback\n    document.addEventListener('keydown', handleGlobalKeydown)\n})\n\nonUnmounted(() => {\n    restoreScroll()\n    document.removeEventListener('keydown', handleGlobalKeydown)\n})\n\n// Global keydown handler for escape key\nconst handleGlobalKeydown = (event: KeyboardEvent) => {\n    if (props.open && props.closeOnEscape && event.key === 'Escape') {\n        event.preventDefault()\n        handleClose()\n    }\n}\n\n// Expose methods and refs\ndefineExpose({\n    close: handleClose,\n    drawerContainerRef,\n    backdropRef,\n    titleId: titleId.value,\n    descriptionId: descriptionId.value,\n    setDragging,\n})\n</script>\n\n<style scoped>\n/* Ensure drawer is above other content */\n:deep([role='dialog']) {\n    z-index: var(--z-modal-backdrop);\n}\n</style>\n",
    "url": "/components/drawer-copy/DrawerRoot",
    "source": "components"
  },
  {
    "objectID": "/components/drawer-copy/DrawerTitle",
    "title": "DrawerTitle",
    "content": "<template>\n    <h2\n        :id=\"titleId\"\n        :class=\"\n            m(\n                'text-lg font-semibold leading-none tracking-tight text-foreground'\n            )\n        \"\n    >\n        <slot />\n    </h2>\n</template>\n\n<script setup lang=\"ts\">\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * The ID for the title element.\n         * @type {string}\n         */\n        titleId?: string\n    }>(),\n    {\n        titleId: '',\n    }\n)\n</script>\n",
    "url": "/components/drawer-copy/DrawerTitle",
    "source": "components"
  },
  {
    "objectID": "/components/drawer-copy/demo",
    "title": "Demo",
    "content": "<template>\n    <div class=\"p-8 space-y-6\">\n        <h1 class=\"text-3xl font-bold\">Drawer Component Demo</h1>\n\n        <div class=\"space-y-4\">\n            <h2 class=\"text-xl font-semibold\">Basic Usage</h2>\n            <div class=\"flex flex-wrap gap-2\">\n                <Button @click=\"openDrawer('right')\">Open Right Drawer</Button>\n                <Button @click=\"openDrawer('left')\">Open Left Drawer</Button>\n                <Button @click=\"openDrawer('top')\">Open Top Drawer</Button>\n                <Button @click=\"openDrawer('bottom')\"\n                    >Open Bottom Drawer</Button\n                >\n            </div>\n        </div>\n\n        <div class=\"space-y-4\">\n            <h2 class=\"text-xl font-semibold\">Different Sizes</h2>\n            <div class=\"flex flex-wrap gap-2\">\n                <Button @click=\"openSizeDrawer('sm')\">Small Drawer</Button>\n                <Button @click=\"openSizeDrawer('default')\"\n                    >Default Drawer</Button\n                >\n                <Button @click=\"openSizeDrawer('lg')\">Large Drawer</Button>\n                <Button @click=\"openSizeDrawer('xl')\"\n                    >Extra Large Drawer</Button\n                >\n                <Button @click=\"openSizeDrawer('full')\"\n                    >Full Screen Drawer</Button\n                >\n            </div>\n        </div>\n\n        <div class=\"space-y-4\">\n            <h2 class=\"text-xl font-semibold\">Custom Examples</h2>\n            <div class=\"flex flex-wrap gap-2\">\n                <Button @click=\"openCustomDrawer\">Custom Theme Drawer</Button>\n                <Button @click=\"openNoCloseDrawer\">No Close Button</Button>\n            </div>\n        </div>\n\n        <div class=\"space-y-4\">\n            <h2 class=\"text-xl font-semibold\">Drag-to-Close Examples</h2>\n            <div class=\"flex flex-wrap gap-2\">\n                <Button @click=\"openDragDrawer\">Draggable Drawer</Button>\n                <Button @click=\"openNonDragDrawer\">Non-Draggable Drawer</Button>\n                <Button @click=\"openHighThresholdDrawer\"\n                    >High Threshold Drawer</Button\n                >\n            </div>\n        </div>\n\n        <!-- Right Drawer -->\n        <Drawer\n            ref=\"drawerRefs.right\"\n            :open=\"drawerState.right\"\n            position=\"right\"\n            @update:open=\"drawerState.right = $event\"\n        >\n            <DrawerHeader\n                :position=\"'right'\"\n                @close=\"drawerState.right = false\"\n                @update:open=\"drawerState.right = $event\"\n            >\n                <DrawerTitle>Right Drawer</DrawerTitle>\n            </DrawerHeader>\n            <DrawerBody>\n                <p class=\"mb-4\">This is a right-positioned drawer.</p>\n                <p class=\"mb-4\">\n                    It slides in from the right side of the screen.\n                </p>\n                <p>\n                    You can close it by clicking the X button, pressing Escape,\n                    clicking the backdrop, or dragging the handle on the left\n                    side.\n                </p>\n            </DrawerBody>\n            <DrawerFooter>\n                <Button variant=\"outline\" @click=\"drawerState.right = false\"\n                    >Cancel</Button\n                >\n                <Button @click=\"drawerState.right = false\">Save</Button>\n            </DrawerFooter>\n        </Drawer>\n\n        <!-- Left Drawer -->\n        <Drawer\n            ref=\"drawerRefs.left\"\n            :open=\"drawerState.left\"\n            position=\"left\"\n            @update:open=\"drawerState.left = $event\"\n        >\n            <DrawerHeader\n                :position=\"'left'\"\n                @close=\"drawerState.left = false\"\n                @update:open=\"drawerState.left = $event\"\n            >\n                <DrawerTitle>Left Drawer</DrawerTitle>\n            </DrawerHeader>\n            <DrawerBody>\n                <p class=\"mb-4\">This is a left-positioned drawer.</p>\n                <p>It slides in from the left side of the screen.</p>\n            </DrawerBody>\n        </Drawer>\n\n        <!-- Top Drawer -->\n        <Drawer\n            ref=\"drawerRefs.top\"\n            :open=\"drawerState.top\"\n            position=\"top\"\n            @update:open=\"drawerState.top = $event\"\n        >\n            <DrawerHeader\n                :position=\"'top'\"\n                @close=\"drawerState.top = false\"\n                @update:open=\"drawerState.top = $event\"\n            >\n                <DrawerTitle>Top Drawer</DrawerTitle>\n            </DrawerHeader>\n            <DrawerBody>\n                <p class=\"mb-4\">This is a top-positioned drawer.</p>\n                <p>It slides in from the top of the screen.</p>\n            </DrawerBody>\n        </Drawer>\n\n        <!-- Bottom Drawer -->\n        <Drawer\n            ref=\"drawerRefs.bottom\"\n            :open=\"drawerState.bottom\"\n            position=\"bottom\"\n            @update:open=\"drawerState.bottom = $event\"\n        >\n            <DrawerHeader\n                :position=\"'bottom'\"\n                @close=\"drawerState.bottom = false\"\n                @update:open=\"drawerState.bottom = $event\"\n            >\n                <DrawerTitle>Bottom Drawer</DrawerTitle>\n            </DrawerHeader>\n            <DrawerBody>\n                <p class=\"mb-4\">This is a bottom-positioned drawer.</p>\n                <p>It slides in from the bottom of the screen.</p>\n            </DrawerBody>\n        </Drawer>\n\n        <!-- Size Drawer -->\n        <Drawer\n            ref=\"drawerRefs.size\"\n            :open=\"drawerState.size\"\n            position=\"right\"\n            :size=\"currentSize\"\n            @update:open=\"drawerState.size = $event\"\n        >\n            <DrawerHeader\n                :position=\"'right'\"\n                @close=\"drawerState.size = false\"\n                @update:open=\"drawerState.size = $event\"\n            >\n                <DrawerTitle>{{ currentSize }} Drawer</DrawerTitle>\n            </DrawerHeader>\n            <DrawerBody>\n                <p class=\"mb-4\">This is a {{ currentSize }} sized drawer.</p>\n                <p>Notice how the size affects the width of the drawer.</p>\n            </DrawerBody>\n        </Drawer>\n\n        <!-- Custom Theme Drawer -->\n        <Drawer\n            ref=\"drawerRefs.custom\"\n            :open=\"drawerState.custom\"\n            position=\"right\"\n            :theme=\"customTheme\"\n            @update:open=\"drawerState.custom = $event\"\n        >\n            <DrawerHeader\n                :position=\"'right'\"\n                @close=\"drawerState.custom = false\"\n                @update:open=\"drawerState.custom = $event\"\n            >\n                <DrawerTitle>Custom Theme</DrawerTitle>\n            </DrawerHeader>\n            <DrawerBody>\n                <p class=\"mb-4\">\n                    This drawer has custom theme styling applied.\n                </p>\n                <p>Notice the blue color scheme and custom styling.</p>\n            </DrawerBody>\n        </Drawer>\n\n        <!-- No Close Button Drawer -->\n        <Drawer\n            ref=\"drawerRefs.noClose\"\n            :open=\"drawerState.noClose\"\n            position=\"right\"\n            :show-close-button=\"false\"\n            @update:open=\"drawerState.noClose = $event\"\n        >\n            <DrawerHeader\n                :position=\"'right'\"\n                @close=\"drawerState.noClose = false\"\n                @update:open=\"drawerState.noClose = $event\"\n            >\n                <DrawerTitle>No Close Button</DrawerTitle>\n            </DrawerHeader>\n            <DrawerBody>\n                <p class=\"mb-4\">\n                    This drawer doesn't have a close button in the header.\n                </p>\n                <p>You can still close it with Escape or backdrop click.</p>\n            </DrawerBody>\n            <DrawerFooter>\n                <Button @click=\"drawerState.noClose = false\">Close</Button>\n            </DrawerFooter>\n        </Drawer>\n\n        <!-- Draggable Drawer -->\n        <Drawer\n            ref=\"drawerRefs.draggable\"\n            :open=\"drawerState.draggable\"\n            position=\"right\"\n            :drag-to-close=\"true\"\n            :drag-threshold=\"100\"\n            @update:open=\"drawerState.draggable = $event\"\n        >\n            <DrawerHeader\n                :position=\"'right'\"\n                @close=\"drawerState.draggable = false\"\n                @update:open=\"drawerState.draggable = $event\"\n            >\n                <DrawerTitle>Draggable Drawer</DrawerTitle>\n            </DrawerHeader>\n            <DrawerBody>\n                <p class=\"mb-4\">\n                    This drawer supports drag-to-close functionality!\n                </p>\n                <p class=\"mb-4\">\n                    Try dragging the handle on the left side to close the\n                    drawer.\n                </p>\n                <div class=\"space-y-2\">\n                    <p><strong>Features:</strong></p>\n                    <ul class=\"list-disc list-inside space-y-1 text-sm\">\n                        <li>Grab the handle and drag to close</li>\n                        <li>Smooth animations with resistance</li>\n                        <li>Haptic feedback on mobile ... [truncated]",
    "url": "/components/drawer-copy/demo",
    "source": "components"
  },
  {
    "objectID": "/components/dropdown/Dropdown",
    "title": "Dropdown",
    "content": "<template>\n    <div class=\"relative\">\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {\n    provide,\n    ref,\n    computed,\n    reactive,\n    onMounted,\n    onUnmounted,\n    type ComputedRef,\n} from 'vue'\n\ninterface DropdownContext {\n    isOpen: ComputedRef<boolean>\n    triggerRef: any\n    open: () => void\n    close: () => void\n    toggle: () => void\n    setTriggerRef: (ref: HTMLElement) => void\n    // Keyboard navigation\n    registerItem: (itemRef: HTMLElement, itemId: string) => void\n    unregisterItem: (itemId: string) => void\n    focusNext: () => void\n    focusPrevious: () => void\n    focusFirst: () => void\n    focusLast: () => void\n    focusItem: (itemId: string) => void\n    getActiveItemId: () => string | null\n}\n\nconst isOpen = ref(false)\nconst triggerRef = ref<HTMLElement>()\nconst registeredItems = ref<Map<string, HTMLElement>>(new Map())\nconst activeItemId = ref<string | null>(null)\n\n// Get items sorted by their DOM position (top to bottom)\nconst getItemsInDOMOrder = (): [string, HTMLElement][] => {\n    const items = Array.from(registeredItems.value.entries())\n\n    // Sort by the element's position in the DOM\n    return items.sort(([, elementA], [, elementB]) => {\n        const position = elementA.compareDocumentPosition(elementB)\n\n        // If elementA comes before elementB in the document\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\n            return -1\n        }\n        // If elementA comes after elementB in the document\n        if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n            return 1\n        }\n        return 0\n    })\n}\n\nconst context = reactive<DropdownContext>({\n    isOpen: computed(() => isOpen.value),\n    triggerRef: triggerRef,\n    open: () => {\n        isOpen.value = true\n    },\n    close: () => {\n        isOpen.value = false\n        activeItemId.value = null\n    },\n    toggle: () => {\n        isOpen.value = !isOpen.value\n        if (!isOpen.value) {\n            activeItemId.value = null\n        }\n    },\n    setTriggerRef: (ref: HTMLElement) => {\n        triggerRef.value = ref\n    },\n    // Keyboard navigation\n    registerItem: (itemRef: HTMLElement, itemId: string) => {\n        registeredItems.value.set(itemId, itemRef)\n    },\n    unregisterItem: (itemId: string) => {\n        registeredItems.value.delete(itemId)\n        if (activeItemId.value === itemId) {\n            activeItemId.value = null\n        }\n    },\n    focusNext: () => {\n        const items = getItemsInDOMOrder()\n        if (items.length === 0) return\n\n        let currentIndex = -1\n        if (activeItemId.value) {\n            currentIndex = items.findIndex(([id]) => id === activeItemId.value)\n        }\n\n        const nextIndex = currentIndex < items.length - 1 ? currentIndex + 1 : 0\n        const [nextId, nextElement] = items[nextIndex]\n\n        activeItemId.value = nextId\n        nextElement?.focus()\n    },\n    focusPrevious: () => {\n        const items = getItemsInDOMOrder()\n        if (items.length === 0) return\n\n        let currentIndex = -1\n        if (activeItemId.value) {\n            currentIndex = items.findIndex(([id]) => id === activeItemId.value)\n        }\n\n        const prevIndex = currentIndex > 0 ? currentIndex - 1 : items.length - 1\n        const [prevId, prevElement] = items[prevIndex]\n\n        activeItemId.value = prevId\n        prevElement?.focus()\n    },\n    focusFirst: () => {\n        const items = getItemsInDOMOrder()\n        if (items.length === 0) return\n\n        const [firstId, firstElement] = items[0]\n        activeItemId.value = firstId\n        firstElement?.focus()\n    },\n    focusLast: () => {\n        const items = getItemsInDOMOrder()\n        if (items.length === 0) return\n\n        const [lastId, lastElement] = items[items.length - 1]\n        activeItemId.value = lastId\n        lastElement?.focus()\n    },\n    focusItem: (itemId: string) => {\n        const element = registeredItems.value.get(itemId)\n        if (element) {\n            activeItemId.value = itemId\n            element.focus()\n        }\n    },\n    getActiveItemId: () => activeItemId.value,\n})\n\nprovide('dropdown', context)\nprovide('triggerRef', triggerRef)\n\n// Handle escape key to close dropdown\nconst handleKeydown = (event: KeyboardEvent) => {\n    if (!isOpen.value) return\n\n    switch (event.key) {\n        case 'Escape':\n            event.preventDefault()\n            isOpen.value = false\n            activeItemId.value = null\n            break\n        // Remove ArrowDown/ArrowUp/Home/End handling - navigation should be handled by the content container\n    }\n}\n\nonMounted(() => {\n    document.addEventListener('keydown', handleKeydown)\n})\n\nonUnmounted(() => {\n    document.removeEventListener('keydown', handleKeydown)\n})\n\ndefineExpose({\n    isOpen,\n    open: context.open,\n    close: context.close,\n    toggle: context.toggle,\n    triggerRef,\n})\n</script>\n",
    "url": "/components/dropdown/Dropdown",
    "source": "components"
  },
  {
    "objectID": "/components/dropdown/DropdownContent",
    "title": "DropdownContent",
    "content": "<template>\n    <div ref=\"contentRef\" class=\"absolute z-50\" :style=\"floatingStyles\">\n        <transition\n            enter-active-class=\"transition-all duration-200 ease-out\"\n            leave-active-class=\"transition-all duration-200 ease-in\"\n            enter-from-class=\"opacity-0 scale-95\"\n            enter-to-class=\"opacity-100 scale-100\"\n            leave-from-class=\"opacity-100 scale-100\"\n            leave-to-class=\"opacity-0 scale-95\"\n        >\n            <div\n                v-show=\"dropdown?.isOpen\"\n                role=\"menu\"\n                :class=\"[\n                    'relative min-w-[8rem] overflow-hidden rounded-md border border-ring bg-popover p-1 text-foreground shadow-lg',\n                ]\"\n                @click=\"handleClick\"\n                @keydown=\"handleKeydown\"\n                tabindex=\"-1\"\n            >\n                <slot />\n            </div>\n        </transition>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {\n    ref,\n    inject,\n    onMounted,\n    onUnmounted,\n    watch,\n    nextTick,\n    type Ref,\n    computed,\n} from 'vue'\nimport {\n    useFloating,\n    offset,\n    flip,\n    shift,\n    autoPlacement,\n    autoUpdate,\n} from '@floating-ui/vue'\n\ninterface Props {\n    side?: 'top' | 'right' | 'bottom' | 'left'\n    align?: 'start' | 'center' | 'end'\n    sideOffset?: number\n    alignOffset?: number\n    avoidCollisions?: boolean\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    side: 'bottom',\n    align: 'start',\n    sideOffset: 4,\n    alignOffset: 0,\n    avoidCollisions: true,\n})\n\ninterface DropdownContext {\n    isOpen: any\n    triggerRef: any\n    open: () => void\n    close: () => void\n    toggle: () => void\n    setTriggerRef: (ref: HTMLElement) => void\n    // Keyboard navigation\n    registerItem: (itemRef: HTMLElement, itemId: string) => void\n    unregisterItem: (itemId: string) => void\n    focusNext: () => void\n    focusPrevious: () => void\n    focusFirst: () => void\n    focusLast: () => void\n    focusItem: (itemId: string) => void\n    getActiveItemId: () => string | null\n}\n\nconst dropdown = inject<DropdownContext>('dropdown')\nconst triggerRef = inject<Ref<HTMLElement>>('triggerRef')\nconst contentRef = ref<HTMLElement>()\n\n// console.log('DropdownContent context:', {\n//     dropdown,\n//     isOpen: dropdown?.isOpen,\n//     hasTriggerRef: !!triggerRef?.value,\n//     triggerRefFromDropdown: !!dropdown?.triggerRef?.value,\n// })\n\n// Use the triggerRef from the dropdown context if the injected one is not available\nconst effectiveTriggerRef = computed(\n    () => triggerRef?.value || dropdown?.triggerRef?.value\n)\n\n// watch(\n//     () => effectiveTriggerRef.value,\n//     value => {\n//         console.log('effectiveTriggerRef', value)\n//     }\n// )\n\nconst { floatingStyles, update } = useFloating(\n    effectiveTriggerRef || ref(null),\n    contentRef,\n    {\n        strategy: 'absolute',\n        placement: `${props.side}-${props.align}` as any,\n        middleware: [\n            offset({\n                mainAxis: props.sideOffset,\n                crossAxis: props.alignOffset,\n            }),\n            ...(props.avoidCollisions ? [flip()] : []),\n            ...(props.avoidCollisions ? [shift()] : []),\n            // autoPlacement(),\n        ],\n    }\n)\n\nconst handleClick = (event: Event) => {\n    event.stopPropagation()\n}\n\nconst handleKeydown = (event: KeyboardEvent) => {\n    if (!dropdown?.isOpen) return\n\n    switch (event.key) {\n        case 'ArrowDown':\n            event.preventDefault()\n            event.stopPropagation()\n            dropdown.focusNext()\n            break\n        case 'ArrowUp':\n            event.preventDefault()\n            event.stopPropagation()\n            dropdown.focusPrevious()\n            break\n        case 'Home':\n            event.preventDefault()\n            event.stopPropagation()\n            dropdown.focusFirst()\n            break\n        case 'End':\n            event.preventDefault()\n            event.stopPropagation()\n            dropdown.focusLast()\n            break\n        case 'Escape':\n            event.preventDefault()\n            event.stopPropagation()\n            dropdown.close()\n            break\n        case 'Enter':\n        case ' ':\n            // Allow Enter and Space to bubble up for item selection\n            // but prevent them from reaching other page elements\n            event.stopPropagation()\n            break\n        default:\n            // For all other keys, prevent them from bubbling up to other page elements\n            // This prevents other components from responding to key presses while dropdown is open\n            event.stopPropagation()\n            break\n    }\n}\n\n// Handle click outside to close dropdown\nconst handleClickOutside = (event: MouseEvent) => {\n    console.log('Click outside detected', {\n        isOpen: dropdown?.isOpen,\n        hasContent: !!contentRef.value,\n        target: event.target,\n    })\n\n    if (!dropdown?.isOpen || !contentRef.value) return\n\n    const target = event.target as Element\n    const triggerElement = effectiveTriggerRef.value\n\n    console.log('Checking click outside', {\n        triggerElement,\n        isInTrigger: triggerElement?.contains(target),\n        isInContent: contentRef.value.contains(target),\n    })\n\n    // Check if click is outside both trigger and content\n    if (\n        triggerElement &&\n        !triggerElement.contains(target) &&\n        !contentRef.value.contains(target)\n    ) {\n        console.log('Closing dropdown')\n        dropdown.close()\n    }\n}\n\n// Ensure position is calculated when dropdown opens\nwatch(\n    () => dropdown?.isOpen,\n    async isOpen => {\n        if (isOpen) {\n            console.log('Dropdown opened, adding click outside handler')\n            // Calculate position immediately when dropdown opens\n            // await nextTick()\n            // if (update) {\n            //     update()\n            // }\n            document.addEventListener('click', handleClickOutside, true)\n\n            // Focus the first item after a short delay to ensure items are registered\n            setTimeout(() => {\n                dropdown?.focusFirst()\n            }, 50)\n        } else {\n            console.log('Dropdown closed, removing click outside handler')\n            document.removeEventListener('click', handleClickOutside, true)\n        }\n    }\n)\n\n// Watch for changes in the trigger ref to recalculate position when needed\nwatch(\n    () => effectiveTriggerRef.value,\n    async newTriggerRef => {\n        if (newTriggerRef && dropdown?.isOpen) {\n            // Recalculate position when trigger ref changes and dropdown is open\n            await nextTick()\n            // update()\n        }\n    }\n)\n\nonMounted(async () => {\n    await nextTick()\n    if (update) {\n        update()\n    }\n})\n\nonUnmounted(() => {\n    console.log('DropdownContent unmounted')\n    document.removeEventListener('click', handleClickOutside, true)\n})\n</script>\n",
    "url": "/components/dropdown/DropdownContent",
    "source": "components"
  },
  {
    "objectID": "/components/dropdown/DropdownItem",
    "title": "DropdownItem",
    "content": "<template>\n    <div\n        ref=\"itemRef\"\n        role=\"menuitem\"\n        tabindex=\"-1\"\n        :class=\"[\n            'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground',\n            isFocused\n                ? 'text-accent-foreground bg-accent'\n                : 'text-foreground/70 hover:text-accent-foreground',\n            disabled && 'pointer-events-none opacity-50',\n        ]\"\n        @click=\"handleClick\"\n        @keydown=\"handleKeydown\"\n        @mouseenter=\"handleMouseEnter\"\n        @mouseleave=\"handleMouseLeave\"\n        @focus=\"handleFocus\"\n    >\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, inject, onMounted, onUnmounted, computed } from 'vue'\n\ninterface Props {\n    disabled?: boolean\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    disabled: false,\n})\n\nconst emit = defineEmits<{\n    click: [event: MouseEvent]\n    select: []\n}>()\n\ninterface DropdownContext {\n    isOpen: any\n    triggerRef: any\n    open: () => void\n    close: () => void\n    toggle: () => void\n    setTriggerRef: (ref: HTMLElement) => void\n    // Keyboard navigation\n    registerItem: (itemRef: HTMLElement, itemId: string) => void\n    unregisterItem: (itemId: string) => void\n    focusNext: () => void\n    focusPrevious: () => void\n    focusFirst: () => void\n    focusLast: () => void\n    focusItem: (itemId: string) => void\n    getActiveItemId: () => string | null\n}\n\nconst dropdown = inject<DropdownContext>('dropdown')\nconst itemRef = ref<HTMLElement>()\nconst itemId = ref<string>()\n\n// Generate a unique ID for this item\nonMounted(() => {\n    itemId.value = `dropdown-item-${Math.random().toString(36).substr(2, 9)}`\n    if (dropdown?.registerItem && itemRef.value && itemId.value) {\n        dropdown.registerItem(itemRef.value, itemId.value)\n    }\n})\n\nonUnmounted(() => {\n    if (dropdown?.unregisterItem && itemId.value) {\n        dropdown.unregisterItem(itemId.value)\n    }\n})\n\n// Check if this item is currently focused\nconst isFocused = computed(() => {\n    return dropdown?.getActiveItemId?.() === itemId.value\n})\n\nconst handleClick = (event: MouseEvent) => {\n    if (props.disabled) return\n\n    event.preventDefault()\n    event.stopPropagation()\n    emit('click', event)\n    emit('select')\n    dropdown?.close?.()\n}\n\nconst handleKeydown = (event: KeyboardEvent) => {\n    if (props.disabled) return\n\n    switch (event.key) {\n        case 'Enter':\n        case ' ':\n            event.preventDefault()\n            emit('select')\n            dropdown?.close?.()\n            break\n    }\n}\n\nconst handleMouseEnter = () => {\n    if (props.disabled) return\n    if (dropdown?.focusItem && itemId.value) {\n        dropdown.focusItem(itemId.value)\n    }\n}\n\nconst handleMouseLeave = () => {\n    if (props.disabled) return\n    // Don't blur on mouse leave to maintain keyboard navigation state\n}\n\nconst handleFocus = () => {\n    if (props.disabled) return\n    if (dropdown?.focusItem && itemId.value) {\n        dropdown.focusItem(itemId.value)\n    }\n}\n\ndefineExpose({\n    itemRef,\n})\n</script>\n",
    "url": "/components/dropdown/DropdownItem",
    "source": "components"
  },
  {
    "objectID": "/components/dropdown/DropdownLabel",
    "title": "DropdownLabel",
    "content": "<template>\n    <div :class=\"['px-2 py-1.5 text-sm font-semibold text-foreground']\">\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\n// No props or logic needed for label\n</script>\n",
    "url": "/components/dropdown/DropdownLabel",
    "source": "components"
  },
  {
    "objectID": "/components/dropdown/DropdownSeparator",
    "title": "DropdownSeparator",
    "content": "<template>\n    <div\n        role=\"separator\"\n        :class=\"['-mx-1 my-1 h-px bg-gray-200', 'dark:bg-gray-700']\"\n    />\n</template>\n\n<script setup lang=\"ts\">\n// No props or logic needed for separator\n</script>\n",
    "url": "/components/dropdown/DropdownSeparator",
    "source": "components"
  },
  {
    "objectID": "/components/dropdown/DropdownSub",
    "title": "DropdownSub",
    "content": "<template>\n    <div class=\"relative\">\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { provide, ref, computed, watch } from 'vue'\nimport {\n    useFloating,\n    offset,\n    flip,\n    shift,\n    autoPlacement,\n    autoUpdate,\n} from '@floating-ui/vue'\n\ninterface Props {\n    side?: 'top' | 'right' | 'bottom' | 'left'\n    align?: 'start' | 'center' | 'end'\n    sideOffset?: number\n    alignOffset?: number\n    avoidCollisions?: boolean\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    side: 'right',\n    align: 'start',\n    sideOffset: 0,\n    alignOffset: 0,\n    avoidCollisions: true,\n})\n\nconst emit = defineEmits<{\n    open: []\n    close: []\n}>()\n\nconst isOpen = ref(false)\nconst triggerRef = ref<HTMLElement>()\nconst contentRef = ref<HTMLElement>()\n\n// Create submenu context with keyboard navigation support\nconst registeredItems = ref<Map<string, HTMLElement>>(new Map())\nconst activeItemId = ref<string | null>(null)\n\n// Get items sorted by their DOM position (top to bottom)\nconst getItemsInDOMOrder = (): [string, HTMLElement][] => {\n    const items = Array.from(registeredItems.value.entries())\n    return items.sort(([, elementA], [, elementB]) => {\n        const position = elementA.compareDocumentPosition(elementB)\n        if (position & Node.DOCUMENT_POSITION_FOLLOWING) {\n            return -1\n        }\n        if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n            return 1\n        }\n        return 0\n    })\n}\n\nconst submenuContext = {\n    isOpen: computed(() => isOpen.value),\n    triggerRef: triggerRef,\n    open: () => {\n        isOpen.value = true\n        emit('open')\n    },\n    close: () => {\n        isOpen.value = false\n        activeItemId.value = null\n        emit('close')\n    },\n    toggle: () => {\n        if (isOpen.value) {\n            isOpen.value = false\n            activeItemId.value = null\n            emit('close')\n        } else {\n            isOpen.value = true\n            emit('open')\n        }\n    },\n    setTriggerRef: (ref: HTMLElement) => {\n        triggerRef.value = ref\n    },\n    // Keyboard navigation\n    registerItem: (itemRef: HTMLElement, itemId: string) => {\n        registeredItems.value.set(itemId, itemRef)\n    },\n    unregisterItem: (itemId: string) => {\n        registeredItems.value.delete(itemId)\n        if (activeItemId.value === itemId) {\n            activeItemId.value = null\n        }\n    },\n    focusNext: () => {\n        const items = getItemsInDOMOrder()\n        if (items.length === 0) return\n\n        let currentIndex = -1\n        if (activeItemId.value) {\n            currentIndex = items.findIndex(([id]) => id === activeItemId.value)\n        }\n\n        const nextIndex = currentIndex < items.length - 1 ? currentIndex + 1 : 0\n        const [nextId, nextElement] = items[nextIndex]\n\n        activeItemId.value = nextId\n        nextElement?.focus()\n    },\n    focusPrevious: () => {\n        const items = getItemsInDOMOrder()\n        if (items.length === 0) return\n\n        let currentIndex = -1\n        if (activeItemId.value) {\n            currentIndex = items.findIndex(([id]) => id === activeItemId.value)\n        }\n\n        const prevIndex = currentIndex > 0 ? currentIndex - 1 : items.length - 1\n        const [prevId, prevElement] = items[prevIndex]\n\n        activeItemId.value = prevId\n        prevElement?.focus()\n    },\n    focusFirst: () => {\n        const items = getItemsInDOMOrder()\n        if (items.length === 0) return\n\n        const [firstId, firstElement] = items[0]\n        activeItemId.value = firstId\n        firstElement?.focus()\n    },\n    focusLast: () => {\n        const items = getItemsInDOMOrder()\n        if (items.length === 0) return\n\n        const [lastId, lastElement] = items[items.length - 1]\n        activeItemId.value = lastId\n        lastElement?.focus()\n    },\n    focusItem: (itemId: string) => {\n        const element = registeredItems.value.get(itemId)\n        if (element) {\n            activeItemId.value = itemId\n            element.focus()\n        }\n    },\n    getActiveItemId: () => activeItemId.value,\n}\n\n// Provide submenu context\nprovide('dropdown', submenuContext)\n\n// Use floating UI for positioning\nconst { floatingStyles, placement } = useFloating(triggerRef, contentRef, {\n    placement: `${props.side}-${props.align}` as any,\n    middleware: [\n        offset({ mainAxis: props.sideOffset, crossAxis: props.alignOffset }),\n        ...(props.avoidCollisions ? [flip()] : []),\n        ...(props.avoidCollisions ? [shift()] : []),\n        autoPlacement(),\n    ],\n    whileElementsMounted: autoUpdate,\n})\n\n// Extract the actual side from the computed placement\nconst actualSide = computed(() => {\n    if (!placement.value) return props.side\n    return placement.value.split('-')[0] as 'top' | 'right' | 'bottom' | 'left'\n})\n\n// Get the transform origin based on the side\nconst transformOrigin = computed(() => {\n    switch (actualSide.value) {\n        case 'top':\n            return 'bottom'\n        case 'bottom':\n            return 'top'\n        case 'left':\n            return 'right'\n        case 'right':\n            return 'left'\n        default:\n            return 'top'\n    }\n})\n\n// Expose refs and context for use in other components\ndefineExpose({\n    isOpen,\n    open: submenuContext.open,\n    close: submenuContext.close,\n    toggle: submenuContext.toggle,\n    triggerRef,\n    contentRef,\n    floatingStyles,\n    actualSide,\n    transformOrigin,\n})\n</script>\n",
    "url": "/components/dropdown/DropdownSub",
    "source": "components"
  },
  {
    "objectID": "/components/dropdown/DropdownSubContent",
    "title": "DropdownSubContent",
    "content": "<template>\n    <Teleport to=\"body\">\n        <transition\n            enter-active-class=\"transition-all duration-200 ease-out\"\n            leave-active-class=\"transition-all duration-150 ease-in\"\n            enter-from-class=\"opacity-0 scale-95\"\n            enter-to-class=\"opacity-100 scale-100\"\n            leave-from-class=\"opacity-100 scale-100\"\n            leave-to-class=\"opacity-0 scale-95\"\n        >\n            <div\n                v-show=\"dropdown?.isOpen\"\n                ref=\"contentRef\"\n                role=\"menu\"\n                :class=\"[\n                    'fixed z-50 min-w-[8rem] overflow-hidden rounded-md border bg-white p-1 text-gray-900 shadow-lg',\n                    'dark:bg-gray-800 dark:text-gray-100 dark:border-gray-700',\n                ]\"\n                :style=\"{\n                    ...floatingStyles,\n                    transformOrigin: `${transformOrigin} center`,\n                }\"\n                @click=\"handleClick\"\n            >\n                <slot />\n            </div>\n        </transition>\n    </Teleport>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, inject, onMounted, onUnmounted, getCurrentInstance } from 'vue'\n\ninterface DropdownContext {\n    isOpen: any\n    triggerRef: any\n    open: () => void\n    close: () => void\n    toggle: () => void\n    setTriggerRef: (ref: HTMLElement) => void\n}\n\nconst dropdown = inject<DropdownContext>('dropdown')\nconst contentRef = ref<HTMLElement>()\n\n// Get the floating styles and placement from the parent DropdownSub\nconst floatingStyles = ref({})\nconst transformOrigin = ref('left')\n\nonMounted(() => {\n    if (contentRef.value) {\n        // Access the parent DropdownSub component and get its exposed properties\n        const parentComponent = getCurrentInstance()?.parent\n        if (parentComponent && parentComponent.exposed) {\n            // Set the content ref in the parent\n            parentComponent.exposed.contentRef = contentRef.value\n\n            // Get floating styles and transform origin from parent\n            if (parentComponent.exposed.floatingStyles) {\n                floatingStyles.value =\n                    parentComponent.exposed.floatingStyles.value\n            }\n            if (parentComponent.exposed.transformOrigin) {\n                transformOrigin.value =\n                    parentComponent.exposed.transformOrigin.value\n            }\n        }\n    }\n})\n\nconst handleClick = (event: Event) => {\n    event.stopPropagation()\n}\n\n// Handle click outside to close submenu\nconst handleClickOutside = (event: MouseEvent) => {\n    if (!dropdown?.isOpen || !contentRef.value) return\n\n    const target = event.target as Element\n    const triggerElement = dropdown.triggerRef?.value\n\n    if (\n        triggerElement &&\n        !triggerElement.contains(target) &&\n        !contentRef.value.contains(target)\n    ) {\n        dropdown.close()\n    }\n}\n\nonMounted(() => {\n    // Use a small delay to ensure the event listener is added after the submenu opens\n    setTimeout(() => {\n        document.addEventListener('click', handleClickOutside, true)\n    }, 0)\n})\n\nonUnmounted(() => {\n    document.removeEventListener('click', handleClickOutside, true)\n})\n</script>\n",
    "url": "/components/dropdown/DropdownSubContent",
    "source": "components"
  },
  {
    "objectID": "/components/dropdown/DropdownSubTrigger",
    "title": "DropdownSubTrigger",
    "content": "<template>\n    <div\n        ref=\"triggerRef\"\n        role=\"menuitem\"\n        tabindex=\"-1\"\n        :class=\"[\n            'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors',\n            'focus:bg-gray-100 focus:text-gray-900',\n            'dark:focus:bg-gray-700 dark:focus:text-gray-100',\n            'hover:bg-gray-100 hover:text-gray-900',\n            'dark:hover:bg-gray-700 dark:hover:text-gray-100',\n            'data-[state=open]:bg-gray-100 data-[state=open]:text-gray-900',\n            'dark:data-[state=open]:bg-gray-700 dark:data-[state=open]:text-gray-100',\n        ]\"\n        :data-state=\"dropdown?.isOpen ? 'open' : 'closed'\"\n        @click=\"handleClick\"\n        @keydown=\"handleKeydown\"\n        @mouseenter=\"handleMouseEnter\"\n        @mouseleave=\"handleMouseLeave\"\n    >\n        <slot />\n        <svg\n            class=\"ml-auto h-4 w-4\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            stroke-width=\"2\"\n            stroke-linecap=\"round\"\n            stroke-linejoin=\"round\"\n        >\n            <polyline points=\"6,9 12,15 18,9\" />\n        </svg>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, inject, onMounted } from 'vue'\n\nconst emit = defineEmits<{\n    click: [event: MouseEvent]\n    keydown: [event: KeyboardEvent]\n}>()\n\ninterface DropdownContext {\n    isOpen: any\n    triggerRef: any\n    open: () => void\n    close: () => void\n    toggle: () => void\n    setTriggerRef: (ref: HTMLElement) => void\n}\n\nconst dropdown = inject<DropdownContext>('dropdown')\nconst triggerRef = ref<HTMLElement>()\n\nonMounted(() => {\n    if (dropdown && triggerRef.value) {\n        dropdown.setTriggerRef(triggerRef.value)\n    }\n})\n\nconst handleClick = (event: MouseEvent) => {\n    event.preventDefault()\n    event.stopPropagation()\n    dropdown?.toggle()\n    emit('click', event)\n}\n\nconst handleKeydown = (event: KeyboardEvent) => {\n    switch (event.key) {\n        case 'Enter':\n        case ' ':\n            event.preventDefault()\n            dropdown?.toggle()\n            break\n        case 'ArrowRight':\n            event.preventDefault()\n            dropdown?.open()\n            break\n        case 'ArrowLeft':\n            event.preventDefault()\n            dropdown?.close()\n            break\n    }\n    emit('keydown', event)\n}\n\nconst handleMouseEnter = () => {\n    dropdown?.open()\n}\n\nconst handleMouseLeave = () => {\n    // Optional: close on mouse leave\n    // dropdown?.close()\n}\n\ndefineExpose({\n    triggerRef,\n})\n</script>\n",
    "url": "/components/dropdown/DropdownSubTrigger",
    "source": "components"
  },
  {
    "objectID": "/components/dropdown/DropdownTrigger",
    "title": "DropdownTrigger",
    "content": "<template>\n    <div\n        ref=\"triggerRef\"\n        role=\"button\"\n        tabindex=\"0\"\n        :class=\"[\n            'inline-flex items-center justify-center',\n            'focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500',\n        ]\"\n        @click=\"handleClick\"\n        @keydown=\"handleKeydown\"\n    >\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, inject, onMounted } from 'vue'\n\ninterface DropdownContext {\n    isOpen: any\n    triggerRef: any\n    open: () => void\n    close: () => void\n    toggle: () => void\n    setTriggerRef: (ref: HTMLElement) => void\n}\n\nconst dropdown = inject<DropdownContext>('dropdown')\nconst triggerRef = ref<HTMLElement>()\n\nconsole.log('DropdownTrigger context:', {\n    dropdown,\n    isOpen: dropdown?.isOpen?.value,\n})\n\nonMounted(() => {\n    console.log('DropdownTrigger mounted')\n    if (dropdown && triggerRef.value) {\n        dropdown.setTriggerRef(triggerRef.value)\n    }\n})\n\nconst handleClick = (event: MouseEvent) => {\n    console.log('Trigger clicked')\n    event.preventDefault()\n    event.stopPropagation()\n    dropdown?.toggle()\n}\n\nconst handleKeydown = (event: KeyboardEvent) => {\n    console.log('Trigger keydown', event.key)\n    switch (event.key) {\n        case 'Enter':\n        case ' ':\n            event.preventDefault()\n            dropdown?.toggle()\n            break\n    }\n}\n\ndefineExpose({\n    triggerRef,\n})\n</script>\n",
    "url": "/components/dropdown/DropdownTrigger",
    "source": "components"
  },
  {
    "objectID": "/components/empty-state/EmptyState",
    "title": "EmptyState",
    "content": "<template>\n    <div\n        :class=\"\n            m(\n                'bg-card border border-ring border-dashed rounded-lg p-6',\n                theme.container\n            )\n        \"\n    >\n        <h3\n            :class=\"m('text-base font-semibold text-foreground', theme.title)\"\n            v-html=\"title\"\n        />\n        <div :class=\"m('mt-1 text-muted-foreground', theme.description)\">\n            <slot />\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { m } from '../../utils'\n\nwithDefaults(\n    defineProps<{\n        theme?: {\n            container?: string\n            title?: string\n            description?: string\n        }\n        title: string\n    }>(),\n    {\n        theme: () => ({\n            container: '',\n            title: '',\n            description: '',\n        }),\n    }\n)\n</script>\n",
    "url": "/components/empty-state/EmptyState",
    "source": "components"
  },
  {
    "objectID": "/components/input/Input",
    "title": "Input",
    "content": "<template>\n    <input\n        :disabled=\"disabled\"\n        :type=\"type\"\n        :placeholder=\"placeholder\"\n        :value=\"modelValue ?? value\"\n        @input=\"onInput\"\n        :class=\"\n            m(\n                'flex w-full rounded-md border border-ring bg-background px-3 py-2 shadow-xs text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground/70 focus-visible:outline-none focus-visible:ring-3 focus-visible:ring-ring/40 transition-[box-shadow,color] disabled:cursor-not-allowed disabled:opacity-50',\n                theme?.input || ''\n            )\n        \"\n    />\n</template>\n\n<script setup lang=\"ts\">\nimport { m } from '../../utils'\n\ndefineProps<{\n    disabled?: boolean\n    type: string\n    placeholder: string\n    value?: string\n    modelValue?: string\n    theme?: {\n        input?: string\n    }\n}>()\n\nconst emit = defineEmits<{\n    (e: 'update:modelValue', value: string): void\n    (e: 'update:value', value: string): void\n    (e: 'input', value: string): void\n}>()\n\nconst onInput = (event: Event) => {\n    const target = event.target as HTMLInputElement\n    emit('update:modelValue', target.value)\n    emit('update:value', target.value)\n    emit('input', target.value)\n}\n</script>\n",
    "url": "/components/input/Input",
    "source": "components"
  },
  {
    "objectID": "/components/label/Label",
    "title": "Label",
    "content": "<template>\n    <label\n        class=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n    >\n        <slot />\n    </label>\n</template>\n",
    "url": "/components/label/Label",
    "source": "components"
  },
  {
    "objectID": "/components/modal/Modal",
    "title": "Modal",
    "content": "<template>\n    <ModalRoot\n        :open=\"open\"\n        :close-on-backdrop-click=\"closeOnBackdropClick\"\n        :close-on-escape=\"closeOnEscape\"\n        :prevent-body-scroll=\"preventBodyScroll\"\n        :theme=\"theme\"\n        @close=\"$emit('close')\"\n        @update:open=\"$emit('update:open', $event)\"\n    >\n        <ModalContent :size=\"size\" :theme=\"theme\">\n            <ModalClose\n                :close-button-label=\"closeButtonLabel\"\n                :theme=\"theme\"\n                @close=\"$emit('close')\"\n            />\n            <slot />\n        </ModalContent>\n    </ModalRoot>\n</template>\n\n<script setup lang=\"ts\">\nimport ModalRoot from './ModalRoot.vue'\nimport ModalContent from './ModalContent.vue'\nimport ModalClose from './ModalClose.vue'\n\nconst emit = defineEmits<{\n    close: []\n    'update:open': [value: boolean]\n}>()\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * Controls whether the modal is open or closed.\n         * @type {boolean}\n         */\n        open: boolean\n\n        /**\n         * The size of the modal.\n         * @type {'sm' | 'default' | 'lg' | 'xl' | 'full'}\n         */\n        size?: 'sm' | 'default' | 'lg' | 'xl' | 'full'\n\n        /**\n         * Whether to show the close button in the header.\n         * @type {boolean}\n         */\n        showCloseButton?: boolean\n\n        /**\n         * Whether clicking the backdrop closes the modal.\n         * @type {boolean}\n         */\n        closeOnBackdropClick?: boolean\n\n        /**\n         * Whether pressing the Escape key closes the modal.\n         * @type {boolean}\n         */\n        closeOnEscape?: boolean\n\n        /**\n         * Whether to prevent body scroll when modal is open.\n         * @type {boolean}\n         */\n        preventBodyScroll?: boolean\n\n        /**\n         * The aria-label for the close button.\n         * @type {string}\n         */\n        closeButtonLabel?: string\n\n        /**\n         * Locally customize the component's theme properties.\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            backdrop?: string\n            container?: string\n            header?: string\n            content?: string\n            footer?: string\n            closeButton?: string\n        }\n    }>(),\n    {\n        open: false,\n        size: 'default',\n        showCloseButton: true,\n        closeOnBackdropClick: true,\n        closeOnEscape: true,\n        preventBodyScroll: true,\n        closeButtonLabel: 'Close modal',\n        theme: () => ({\n            backdrop: '',\n            container: '',\n            header: '',\n            content: '',\n            footer: '',\n            closeButton: '',\n        }),\n    }\n)\n\n// Generate unique IDs for accessibility\nconst titleId = `modal-title-${Math.random().toString(36).substr(2, 9)}`\n\n// Expose methods\ndefineExpose({\n    close: () => emit('close'),\n})\n</script>\n\n<style scoped>\n/* Ensure modal is above other content */\n:deep([role='dialog']) {\n    z-index: var(--z-modal-backdrop);\n}\n</style>\n",
    "url": "/components/modal/Modal",
    "source": "components"
  },
  {
    "objectID": "/components/modal/ModalBody",
    "title": "ModalBody",
    "content": "<template>\n    <div :class=\"m('flex-1 grow overflow-auto px-6', theme.content)\">\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * Whether the modal has a header.\n         * @type {boolean}\n         */\n        hasHeader?: boolean\n\n        /**\n         * Whether the modal has a footer.\n         * @type {boolean}\n         */\n        hasFooter?: boolean\n\n        /**\n         * Locally customize the component's theme properties.\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            content?: string\n        }\n    }>(),\n    {\n        hasHeader: false,\n        hasFooter: false,\n        theme: () => ({\n            content: '',\n        }),\n    }\n)\n</script>\n",
    "url": "/components/modal/ModalBody",
    "source": "components"
  },
  {
    "objectID": "/components/modal/ModalClose",
    "title": "ModalClose",
    "content": "<template>\n    <button\n        @click=\"$emit('close')\"\n        :class=\"\n            m(\n                'absolute top-6 right-6 p-1 rounded-md text-muted-foreground hover:text-foreground hover:bg-accent transition-colors',\n                theme.closeButton\n            )\n        \"\n        type=\"button\"\n        :aria-label=\"closeButtonLabel\"\n    >\n        <XIcon class=\"size-4\" />\n    </button>\n</template>\n\n<script setup lang=\"ts\">\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\nimport { XIcon } from 'lucide-vue-next'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst emit = defineEmits<{\n    close: []\n}>()\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * The aria-label for the close button.\n         * @type {string}\n         */\n        closeButtonLabel?: string\n\n        /**\n         * Locally customize the component's theme properties.\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            closeButton?: string\n        }\n    }>(),\n    {\n        closeButtonLabel: 'Close modal',\n        theme: () => ({\n            closeButton: '',\n        }),\n    }\n)\n</script>\n",
    "url": "/components/modal/ModalClose",
    "source": "components"
  },
  {
    "objectID": "/components/modal/ModalContent",
    "title": "ModalContent",
    "content": "<template>\n    <div\n        ref=\"modalRef\"\n        :class=\"\n            m(\n                'relative w-full max-w-lg max-h-[90vh] overflow-hidden rounded-lg bg-card shadow-lg border border-ring flex flex-col',\n                size === 'sm' && 'max-w-md',\n                size === 'lg' && 'max-w-2xl',\n                size === 'xl' && 'max-w-4xl',\n                size === 'full' && 'max-w-[95vw] max-h-[95vh]',\n                theme.container\n            )\n        \"\n        :style=\"{ zIndex: 'var(--z-modal)' }\"\n        @click.stop\n        @keydown=\"focusTrap\"\n    >\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, watch, nextTick } from 'vue'\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * The size of the modal.\n         * @type {'sm' | 'default' | 'lg' | 'xl' | 'full'}\n         */\n        size?: 'sm' | 'default' | 'lg' | 'xl' | 'full'\n\n        /**\n         * Locally customize the component's theme properties.\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            container?: string\n        }\n    }>(),\n    {\n        size: 'default',\n        theme: () => ({\n            container: '',\n        }),\n    }\n)\n\nconst modalRef = ref<HTMLElement>()\n\n// Focus management\nconst focusTrap = (event: KeyboardEvent) => {\n    if (!modalRef.value || event.key !== 'Tab') return\n\n    const focusableElements = modalRef.value.querySelectorAll(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    )\n\n    if (focusableElements.length === 0) return\n\n    const firstElement = focusableElements[0] as HTMLElement\n    const lastElement = focusableElements[\n        focusableElements.length - 1\n    ] as HTMLElement\n\n    if (event.shiftKey) {\n        if (document.activeElement === firstElement) {\n            event.preventDefault()\n            lastElement.focus()\n        }\n    } else {\n        if (document.activeElement === lastElement) {\n            event.preventDefault()\n            firstElement.focus()\n        }\n    }\n}\n\n// Focus the first focusable element when modal opens\nconst focusFirstElement = async () => {\n    await nextTick()\n    const firstFocusable = modalRef.value?.querySelector(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    ) as HTMLElement\n    if (firstFocusable) {\n        firstFocusable.focus()\n    } else if (modalRef.value) {\n        modalRef.value.focus()\n    }\n}\n\n// Expose methods and refs\ndefineExpose({\n    modalRef,\n    focusFirstElement,\n})\n</script>\n",
    "url": "/components/modal/ModalContent",
    "source": "components"
  },
  {
    "objectID": "/components/modal/ModalFooter",
    "title": "ModalFooter",
    "content": "<template>\n    <div :class=\"m('flex items-center justify-end gap-3 p-6', theme.footer)\">\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * Locally customize the component's theme properties.\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            footer?: string\n        }\n    }>(),\n    {\n        theme: () => ({\n            footer: '',\n        }),\n    }\n)\n</script>\n",
    "url": "/components/modal/ModalFooter",
    "source": "components"
  },
  {
    "objectID": "/components/modal/ModalHeader",
    "title": "ModalHeader",
    "content": "<template>\n    <div :class=\"m('flex items-center justify-between p-6', theme.header)\">\n        <div class=\"flex-1 min-w-0\">\n            <slot />\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\nimport ModalClose from './ModalClose.vue'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst emit = defineEmits<{\n    close: []\n}>()\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * Whether to show the close button in the header.\n         * @type {boolean}\n         */\n        showCloseButton?: boolean\n\n        /**\n         * The aria-label for the close button.\n         * @type {string}\n         */\n        closeButtonLabel?: string\n\n        /**\n         * Locally customize the component's theme properties.\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            header?: string\n            closeButton?: string\n        }\n    }>(),\n    {\n        showCloseButton: true,\n        closeButtonLabel: 'Close modal',\n        theme: () => ({\n            header: '',\n            closeButton: '',\n        }),\n    }\n)\n</script>\n",
    "url": "/components/modal/ModalHeader",
    "source": "components"
  },
  {
    "objectID": "/components/modal/ModalRoot",
    "title": "ModalRoot",
    "content": "<template>\n    <Teleport to=\"body\">\n        <!-- Backdrop -->\n        <Transition\n            enter-active-class=\"transition-all duration-300 ease-out\"\n            enter-from-class=\"opacity-0\"\n            enter-to-class=\"opacity-100\"\n            leave-active-class=\"transition-all duration-200 ease-in\"\n            leave-from-class=\"opacity-100\"\n            leave-to-class=\"opacity-0\"\n        >\n            <div\n                v-if=\"open\"\n                ref=\"backdropRef\"\n                :class=\"\n                    m(\n                        'fixed inset-0 bg-primary/20 backdrop-blur-sm',\n                        theme.backdrop\n                    )\n                \"\n                :style=\"{ zIndex: 'var(--z-modal-backdrop)' }\"\n            ></div>\n        </Transition>\n\n        <!-- Modal Container -->\n        <Transition\n            enter-active-class=\"transition-all duration-150 ease-out\"\n            enter-from-class=\"opacity-0 scale-95 translate-y-4\"\n            enter-to-class=\"opacity-100 scale-100 translate-y-0\"\n            leave-active-class=\"transition-all duration-150 ease-in\"\n            leave-from-class=\"opacity-100 scale-100 translate-y-0\"\n            leave-to-class=\"opacity-0 scale-95 translate-y-4\"\n        >\n            <!-- Fixed Modal Container -->\n            <div\n                v-if=\"open\"\n                ref=\"modalContainerRef\"\n                @click=\"handleBackdropClick\"\n                :class=\"\n                    m(\n                        'fixed inset-0 z-50 flex items-center justify-center',\n                        theme.backdrop\n                    )\n                \"\n                :style=\"{ zIndex: 'var(--z-modal-backdrop)' }\"\n                @keydown=\"handleKeydown\"\n                tabindex=\"-1\"\n                role=\"dialog\"\n                :aria-modal=\"true\"\n                :aria-labelledby=\"titleId\"\n                :aria-describedby=\"descriptionId\"\n            >\n                <slot />\n            </div>\n        </Transition>\n    </Teleport>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch, nextTick, onMounted, onUnmounted } from 'vue'\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst emit = defineEmits<{\n    close: []\n    'update:open': [value: boolean]\n}>()\n\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * Controls whether the modal is open or closed.\n         * @type {boolean}\n         */\n        open: boolean\n\n        /**\n         * Whether clicking the backdrop closes the modal.\n         * @type {boolean}\n         */\n        closeOnBackdropClick?: boolean\n\n        /**\n         * Whether pressing the Escape key closes the modal.\n         * @type {boolean}\n         */\n        closeOnEscape?: boolean\n\n        /**\n         * Whether to prevent body scroll when modal is open.\n         * @type {boolean}\n         */\n        preventBodyScroll?: boolean\n\n        /**\n         * Locally customize the component's theme properties.\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            backdrop?: string\n        }\n    }>(),\n    {\n        open: false,\n        closeOnBackdropClick: true,\n        closeOnEscape: true,\n        preventBodyScroll: true,\n        theme: () => ({\n            backdrop: '',\n        }),\n    }\n)\n\nconst modalContainerRef = ref<HTMLElement>()\nconst backdropRef = ref<HTMLElement>()\n\n// Generate unique IDs for accessibility\nconst titleId = computed(\n    () => `modal-title-${Math.random().toString(36).substr(2, 9)}`\n)\nconst descriptionId = computed(\n    () => `modal-description-${Math.random().toString(36).substr(2, 9)}`\n)\n\n// Handle body scroll prevention\nlet originalBodyStyle: string | null = null\n\nconst preventScroll = () => {\n    if (!props.preventBodyScroll) return\n\n    originalBodyStyle = document.body.style.overflow\n    document.body.style.overflow = 'hidden'\n}\n\nconst restoreScroll = () => {\n    if (!props.preventBodyScroll) return\n\n    if (originalBodyStyle !== null) {\n        document.body.style.overflow = originalBodyStyle\n        originalBodyStyle = null\n    }\n}\n\n// Handle close events\nconst handleClose = () => {\n    emit('close')\n    emit('update:open', false)\n}\n\nconst handleBackdropClick = (event: MouseEvent) => {\n    if (\n        props.closeOnBackdropClick &&\n        event.target === modalContainerRef.value\n    ) {\n        handleClose()\n    }\n}\n\nconst handleKeydown = (event: KeyboardEvent) => {\n    if (props.closeOnEscape && event.key === 'Escape') {\n        event.preventDefault()\n        handleClose()\n    }\n}\n\n// Watch for open state changes\nwatch(\n    () => props.open,\n    async newValue => {\n        if (newValue) {\n            preventScroll()\n            await nextTick()\n            // Focus the modal container for keyboard events\n            if (modalContainerRef.value) {\n                modalContainerRef.value.focus()\n            }\n        } else {\n            restoreScroll()\n        }\n    }\n)\n\n// Lifecycle\nonMounted(() => {\n    if (props.open) {\n        preventScroll()\n    }\n\n    // Add global escape key listener as fallback\n    document.addEventListener('keydown', handleGlobalKeydown)\n})\n\nonUnmounted(() => {\n    restoreScroll()\n    document.removeEventListener('keydown', handleGlobalKeydown)\n})\n\n// Global keydown handler for escape key\nconst handleGlobalKeydown = (event: KeyboardEvent) => {\n    if (props.open && props.closeOnEscape && event.key === 'Escape') {\n        event.preventDefault()\n        handleClose()\n    }\n}\n\n// Expose methods and refs\ndefineExpose({\n    close: handleClose,\n    modalContainerRef,\n    backdropRef,\n    titleId: titleId.value,\n    descriptionId: descriptionId.value,\n})\n</script>\n\n<style scoped>\n/* Ensure modal is above other content */\n:deep([role='dialog']) {\n    z-index: var(--z-modal-backdrop);\n}\n</style>\n",
    "url": "/components/modal/ModalRoot",
    "source": "components"
  },
  {
    "objectID": "/components/modal/ModalTitle",
    "title": "ModalTitle",
    "content": "<template>\n    <h2 :id=\"titleId\" class=\"text-lg font-semibold text-foreground\">\n        <slot />\n    </h2>\n</template>\n\n<script setup lang=\"ts\">\nconst props = defineProps<{\n    /**\n     * The ID for the title element (for accessibility).\n     * @type {string}\n     */\n    titleId?: string\n}>()\n</script>\n",
    "url": "/components/modal/ModalTitle",
    "source": "components"
  },
  {
    "objectID": "/components/popover/Popover",
    "title": "Popover",
    "content": "<template>\n    <Popover\n        :class=\"m('relative inline-block text-left', theme.popoverMenu)\"\n        v-slot=\"{ open: isOpen }\"\n        :open=\"isOpen\"\n        @update:open=\"handleOpenUpdate\"\n    >\n        <div>\n            <PopoverButton\n                ref=\"reference\"\n                :class=\"\n                    m(isOpen ? 'is-open' : 'is-closed', theme.popoverMenuButton)\n                \"\n            >\n                <slot name=\"trigger\"></slot>\n            </PopoverButton>\n        </div>\n\n        <transition\n            enter-active-class=\"transition duration-200 ease-out\"\n            enter-from-class=\"translate-y-1 opacity-0\"\n            enter-to-class=\"translate-y-0 opacity-100\"\n            leave-active-class=\"transition duration-150 ease-in\"\n            leave-from-class=\"translate-y-0 opacity-100\"\n            leave-to-class=\"translate-y-1 opacity-0\"\n        >\n            <PopoverPanel\n                ref=\"floating\"\n                :class=\"\n                    m(\n                        'fixed z-50 transform overflow-x-hidden overflow-y-auto rounded-lg bg-background p-3 text-base shadow-lg ring-1 ring-ring focus:outline-hidden sm:text-sm',\n                        theme.popoverMenuItems\n                    )\n                \"\n                :style=\"floatingStyles\"\n                v-slot=\"{ close }\"\n            >\n                <slot v-bind=\"{ close }\"></slot>\n            </PopoverPanel>\n        </transition>\n    </Popover>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, watch } from 'vue'\nimport { m } from '../../utils'\nimport { Popover, PopoverButton, PopoverPanel } from '@headlessui/vue'\nimport {\n    autoPlacement,\n    autoUpdate,\n    limitShift,\n    offset,\n    shift,\n    size,\n    useFloating,\n} from '@floating-ui/vue'\n\ntype AllowedPlacement =\n    | 'bottom'\n    | 'bottom-end'\n    | 'bottom-start'\n    | 'left'\n    | 'left-end'\n    | 'left-start'\n    | 'right'\n    | 'right-end'\n    | 'right-start'\n    | 'top'\n    | 'top-end'\n    | 'top-start'\n\n/**\n * Props for the BasePopover component\n */\nconst props = withDefaults(\n    defineProps<{\n        /**\n         * Locally customize the component's theme properties.\n         *\n         * @type {Object}\n         */\n        theme?: {\n            /** Theme classes for the menu container */\n            popoverMenu?: string\n            /** Theme classes for the menu button */\n            popoverMenuButton?: string\n            /** Theme classes for the menu items container */\n            popoverMenuItems?: string\n            /** Theme classes for individual menu items */\n            popoverMenuItem?: string\n            /** Theme classes for menu item icons */\n            popoverMenuItemIcon?: string\n        }\n\n        /**\n         * Additional context data to be passed to the popover.\n         *\n         * @type {any}\n         */\n        context?: any\n\n        /**\n         * Allowed placement positions for the popover.\n         *\n         * @type {Array<AllowedPlacement>}\n         */\n        allowedPlacements?: AllowedPlacement[]\n\n        /**\n         * Configuration options for floating UI.\n         *\n         * @type {Object}\n         */\n        floatingOptions?: {\n            /** The positioning strategy to use */\n            strategy?: 'absolute' | 'fixed'\n            /** Whether to transform the floating element */\n            transform?: boolean\n            /** The placement of the floating element */\n            placement?: AllowedPlacement\n            /** The middleware to use for positioning */\n            middleware?: any[]\n            /** Whether to update the position on scroll */\n            open?: boolean\n            /** The function to call when elements are mounted */\n            whileElementsMounted?: (\n                reference: HTMLElement,\n                floating: HTMLElement,\n                update: () => void\n            ) => () => void\n        }\n\n        /**\n         * Controls whether the popover is open.\n         *\n         * @type {boolean}\n         */\n        open?: boolean\n    }>(),\n    {\n        buffer: 20,\n        theme: () => ({\n            popoverMenu: '',\n            popoverMenuButton: '',\n            popoverMenuItems: '',\n            popoverMenuItem: '',\n            popoverMenuItemIcon: '',\n        }),\n        context: () => ({}),\n        allowedPlacements: () => ['top-start', 'bottom-start'],\n        floatingOptions: () => ({\n            strategy: 'fixed',\n            transform: false,\n            middleware: [\n                shift({\n                    padding: 10,\n                    limiter: limitShift({\n                        offset: 10,\n                    }),\n                }),\n                autoPlacement({\n                    allowedPlacements: ['top-start', 'bottom-start'],\n                }),\n                offset(10),\n                size({\n                    apply({ availableHeight, elements }) {\n                        const minMaxWidth =\n                            elements.reference.getBoundingClientRect().width\n                        Object.assign(elements.floating.style, {\n                            minWidth: `${minMaxWidth}px`,\n                            maxHeight: `${availableHeight - 20}px`,\n                        })\n                    },\n                }),\n            ],\n            whileElementsMounted: autoUpdate,\n        }),\n        open: undefined,\n    }\n)\n\n/**\n * Emits for the BasePopover component\n */\nconst emit = defineEmits<{\n    /** Emitted when the open state changes */\n    (e: 'update:open', value: boolean): void\n}>()\n\nconst reference = ref()\nconst floating = ref()\nconst isOpen = ref(props.open ?? false)\n\nwatch(\n    () => props.open,\n    newValue => {\n        if (newValue !== undefined) {\n            isOpen.value = newValue\n        }\n    },\n    { immediate: true }\n)\n\nconst handleOpenUpdate = (value: boolean) => {\n    isOpen.value = value\n    emit('update:open', value)\n}\n\nconst { floatingStyles } = useFloating(reference, floating, {\n    strategy: props.floatingOptions.strategy,\n    transform: props.floatingOptions.transform,\n    placement: props.floatingOptions.placement,\n    middleware: props.floatingOptions.middleware,\n    open: isOpen.value,\n    whileElementsMounted: props.floatingOptions.whileElementsMounted,\n})\n\n/**\n * Closes the popover and emits the update event\n */\nconst close = () => {\n    handleOpenUpdate(false)\n}\n\n/**\n * Exposed methods and refs for the component\n */\ndefineExpose({\n    /** Reference to the floating element */\n    floating,\n    /** Reference to the trigger element */\n    reference,\n    /** Method to close the popover */\n    close,\n    /** Current open state of the popover */\n    isOpen,\n})\n</script>\n",
    "url": "/components/popover/Popover",
    "source": "components"
  },
  {
    "objectID": "/components/sortable/MultiGroupSortable",
    "title": "MultiGroupSortable",
    "content": "<template>\n    <div class=\"multi-group-sortable\">\n        <slot name=\"header\"></slot>\n\n        <div class=\"sortable-groups\">\n            <div\n                v-for=\"group in groups\"\n                :key=\"group.id\"\n                class=\"sortable-group-container\"\n            >\n                <div class=\"group-header\">\n                    <slot name=\"group-header\" :group=\"group\">\n                        <h3>{{ group.title }}</h3>\n                    </slot>\n                </div>\n\n                <div\n                    class=\"sortable-drop-zone\"\n                    :class=\"{\n                        'drag-over': isDragOver && draggedGroupId !== group.id,\n                    }\"\n                    @drop=\"event => handleDrop(group.id, event)\"\n                    @dragover=\"handleDragOver\"\n                    @dragleave=\"handleDragLeave\"\n                >\n                    <Sortable\n                        :items=\"group.items\"\n                        :group-id=\"group.id\"\n                        :shared-group=\"sharedGroupId\"\n                        :disabled=\"disabled\"\n                        @update:items=\"\n                            items => updateGroupItems(group.id, items)\n                        \"\n                        @drag-start=\"handleDragStart\"\n                        @drag-end=\"handleDragEnd\"\n                        @item-moved=\"handleItemMoved\"\n                        @cross-group-drag=\"handleCrossGroupDrag\"\n                    >\n                        <template #item=\"slotProps\">\n                            <slot\n                                name=\"item\"\n                                v-bind=\"slotProps\"\n                                :group=\"group\"\n                            />\n                        </template>\n                    </Sortable>\n\n                    <!-- Empty state when group has no items -->\n                    <div\n                        v-if=\"group.items.length === 0\"\n                        class=\"empty-state\"\n                        :class=\"{\n                            'drag-over':\n                                isDragOver && draggedGroupId !== group.id,\n                        }\"\n                    >\n                        <slot name=\"empty-state\" :group=\"group\">\n                            <div class=\"empty-content\">\n                                <div class=\"empty-icon\">üìÅ</div>\n                                <p>Drop items here</p>\n                            </div>\n                        </slot>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed } from 'vue'\nimport Sortable from './Sortable.vue'\n\ninterface SortableGroup {\n    id: string\n    title: string\n    items: any[]\n}\n\ninterface Props {\n    groups: SortableGroup[]\n    disabled?: boolean\n    sharedGroupId?: string\n}\n\ninterface Emits {\n    (e: 'update:groups', groups: SortableGroup[]): void\n    (\n        e: 'item-moved',\n        payload: {\n            item: any\n            fromGroup: string\n            toGroup: string\n            fromIndex: number\n            toIndex: number\n        }\n    ): void\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    disabled: false,\n    sharedGroupId: 'shared-sortable-group',\n})\n\nconst emit = defineEmits<Emits>()\n\nconst isDragOver = ref(false)\nconst draggedGroupId = ref<string>('')\n\nconst updateGroupItems = (groupId: string, items: any[]) => {\n    const updatedGroups = props.groups.map(group =>\n        group.id === groupId ? { ...group, items } : group\n    )\n    emit('update:groups', updatedGroups)\n}\n\nconst handleDragStart = (payload: {\n    item: any\n    groupId: string\n    index: number\n}) => {\n    draggedGroupId.value = payload.groupId\n}\n\nconst handleDragEnd = () => {\n    draggedGroupId.value = ''\n    isDragOver.value = false\n}\n\nconst handleDragOver = (event: DragEvent) => {\n    event.preventDefault()\n    isDragOver.value = true\n}\n\nconst handleDragLeave = (event: DragEvent) => {\n    // Only set drag over to false if we're leaving the drop zone entirely\n    const target = event.target as HTMLElement\n    if (!target.closest('.sortable-drop-zone')) {\n        isDragOver.value = false\n    }\n}\n\nconst handleDrop = (targetGroupId: string, event: DragEvent) => {\n    event.preventDefault()\n    isDragOver.value = false\n\n    if (draggedGroupId.value === targetGroupId) {\n        return // Same group, let Motion Vue handle it\n    }\n\n    // Try to get drag data from the event\n    let dragData = null\n    try {\n        const dataTransfer = event.dataTransfer\n        if (dataTransfer && dataTransfer.types.includes('application/json')) {\n            const jsonData = dataTransfer.getData('application/json')\n            dragData = JSON.parse(jsonData)\n        }\n    } catch (error) {\n        console.warn('Failed to parse drag data:', error)\n    }\n\n    if (!dragData || dragData.sourceGroupId === targetGroupId) {\n        return\n    }\n\n    // Handle cross-group movement\n    const sourceGroup = props.groups.find(g => g.id === dragData.sourceGroupId)\n    const targetGroup = props.groups.find(g => g.id === targetGroupId)\n\n    if (!sourceGroup || !targetGroup) return\n\n    const sourceItems = sourceGroup.items.filter(\n        (_, index) => index !== dragData.sourceIndex\n    )\n    const targetItems = [...targetGroup.items, dragData.item]\n\n    // Update both groups\n    const updatedGroups = props.groups.map(group => {\n        if (group.id === dragData.sourceGroupId) {\n            return { ...group, items: sourceItems }\n        }\n        if (group.id === targetGroupId) {\n            return { ...group, items: targetItems }\n        }\n        return group\n    })\n\n    emit('update:groups', updatedGroups)\n    emit('item-moved', {\n        item: dragData.item,\n        fromGroup: dragData.sourceGroupId,\n        toGroup: targetGroupId,\n        fromIndex: dragData.sourceIndex,\n        toIndex: targetGroup.items.length,\n    })\n}\n\nconst handleItemMoved = (payload: any) => {\n    emit('item-moved', payload)\n}\n\nconst handleCrossGroupDrag = (payload: any) => {\n    // This event is emitted when a cross-group drop is detected\n    // The actual handling is done in handleDrop\n    console.log('Cross-group drag detected:', payload)\n}\n</script>\n\n<style scoped>\n.multi-group-sortable {\n    width: 100%;\n}\n\n.sortable-groups {\n    display: flex;\n    flex-direction: column;\n    gap: 24px;\n    max-width: 600px;\n    margin: 0 auto;\n}\n\n.sortable-group-container {\n    border: 1px solid #e5e7eb;\n    border-radius: 8px;\n    overflow: hidden;\n}\n\n.group-header {\n    background-color: #f9fafb;\n    padding: 12px 16px;\n    border-bottom: 1px solid #e5e7eb;\n}\n\n.group-header h3 {\n    margin: 0;\n    font-size: 16px;\n    font-weight: 500;\n    color: #374151;\n}\n\n.sortable-drop-zone {\n    min-height: 100px;\n    padding: 8px;\n    background-color: #ffffff;\n    transition: all 0.2s ease;\n    border: 2px dashed transparent;\n}\n\n.sortable-drop-zone.drag-over {\n    background-color: #f0f9ff;\n    border: 2px dashed #3b82f6;\n}\n\n.empty-state {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    min-height: 100px;\n    border: 2px dashed #d1d5db;\n    border-radius: 6px;\n    background-color: #f9fafb;\n    transition: all 0.2s ease;\n}\n\n.empty-state.drag-over {\n    background-color: #f0f9ff;\n    border-color: #3b82f6;\n}\n\n.empty-content {\n    text-align: center;\n    color: #6b7280;\n}\n\n.empty-icon {\n    font-size: 24px;\n    margin-bottom: 8px;\n}\n\n.empty-content p {\n    margin: 0;\n    font-size: 14px;\n}\n\n@media (max-width: 768px) {\n    .sortable-groups {\n        gap: 16px;\n    }\n\n    .group-header {\n        padding: 10px 12px;\n    }\n\n    .sortable-drop-zone {\n        padding: 6px;\n    }\n}\n</style>\n",
    "url": "/components/sortable/MultiGroupSortable",
    "source": "components"
  },
  {
    "objectID": "/components/sortable/Sortable",
    "title": "Sortable",
    "content": "<script setup lang=\"ts\">\nimport { ref, watch } from 'vue'\n\ninterface Props {\n    items: any[]\n    groupId: string\n    disabled?: boolean\n    sharedGroup?: string // For cross-group dragging\n}\n\ninterface Emits {\n    (e: 'update:items', items: any[]): void\n    (\n        e: 'item-moved',\n        payload: {\n            item: any\n            fromGroup: string\n            toGroup: string\n            fromIndex: number\n            toIndex: number\n        }\n    ): void\n    (\n        e: 'drag-start',\n        payload: { item: any; groupId: string; index: number }\n    ): void\n    (\n        e: 'drag-end',\n        payload: { item: any; groupId: string; index: number }\n    ): void\n    (\n        e: 'cross-group-drag',\n        payload: { item: any; fromGroup: string; fromIndex: number }\n    ): void\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    disabled: false,\n    sharedGroup: undefined,\n})\n\nconst emit = defineEmits<Emits>()\n\nconst localItems = ref([...props.items])\nconst isDragging = ref(false)\nconst draggedItem = ref<any>(null)\nconst draggedIndex = ref(-1)\nconst dropTargetIndex = ref(-1)\nconst dropProcessed = ref(false)\n\n// Watch for external changes to items\nwatch(\n    () => props.items,\n    newItems => {\n        localItems.value = [...newItems]\n    },\n    { deep: true }\n)\n\nconst handleReorder = (newItems: any[]) => {\n    localItems.value = newItems\n    // Emit the update event\n    emit('update:items', newItems)\n}\n\nconst handleItemMove = (item: any, fromIndex: number, toIndex: number) => {\n    emit('item-moved', {\n        item,\n        fromGroup: props.groupId,\n        toGroup: props.groupId,\n        fromIndex,\n        toIndex,\n    })\n}\n\n// Unified drag handling for both within-group and cross-group\nconst handleDragStart = (event: DragEvent, item: any, index: number) => {\n    if (props.disabled) return\n\n    event.stopPropagation()\n\n    console.log('Drag start:', { item, index, groupId: props.groupId })\n\n    isDragging.value = true\n    draggedItem.value = item\n    draggedIndex.value = index\n\n    // Set drag data for cross-group operations\n    if (event.dataTransfer) {\n        const dragData = {\n            item,\n            sourceGroupId: props.groupId,\n            sourceIndex: index,\n        }\n        event.dataTransfer.setData('application/json', JSON.stringify(dragData))\n        event.dataTransfer.effectAllowed = 'move'\n        console.log('Drag data set:', dragData)\n    }\n\n    emit('drag-start', { item, groupId: props.groupId, index })\n}\n\nconst handleDragEnd = (event: DragEvent, item: any, index: number) => {\n    console.log('Drag end:', {\n        item,\n        groupId: props.groupId,\n        index,\n        isDragging: isDragging.value,\n    })\n\n    // Clear drag state\n    isDragging.value = false\n    draggedItem.value = null\n    draggedIndex.value = -1\n    dropTargetIndex.value = -1\n    dropProcessed.value = false\n\n    emit('drag-end', { item, groupId: props.groupId, index })\n}\n\n// Handle drop events for both within-group and cross-group operations\nconst handleDrop = (event: DragEvent, targetIndex?: number) => {\n    event.preventDefault()\n\n    console.log('Drop event triggered:', {\n        isDragging: isDragging.value,\n        draggedItem: draggedItem.value,\n        draggedIndex: draggedIndex.value,\n        targetIndex,\n        groupId: props.groupId,\n    })\n\n    // Check if this is a cross-group drop first\n    const dragData = event.dataTransfer?.getData('application/json')\n    let isCrossGroup = false\n\n    if (dragData) {\n        try {\n            const data = JSON.parse(dragData)\n            console.log('Drag data:', data)\n            if (data.sourceGroupId !== props.groupId) {\n                // This is a cross-group drop - emit event for parent to handle\n                console.log('Cross-group drop detected')\n                isCrossGroup = true\n                emit('cross-group-drag', {\n                    item: data.item,\n                    fromGroup: data.sourceGroupId,\n                    fromIndex: data.sourceIndex,\n                })\n                return // Exit early for cross-group drops\n            }\n        } catch (error) {\n            console.warn('Failed to parse drag data:', error)\n        }\n    }\n\n    // Handle within-group reordering\n    if (!isDragging.value || !draggedItem.value) {\n        console.log('No drag state or item - returning early')\n        return\n    }\n\n    if (targetIndex !== undefined && targetIndex !== draggedIndex.value) {\n        console.log('Within-group reorder:', {\n            from: draggedIndex.value,\n            to: targetIndex,\n        })\n        const newItems = [...localItems.value]\n        const [removed] = newItems.splice(draggedIndex.value, 1)\n        newItems.splice(targetIndex, 0, removed)\n        localItems.value = newItems\n        emit('update:items', newItems)\n\n        emit('item-moved', {\n            item: draggedItem.value,\n            fromGroup: props.groupId,\n            toGroup: props.groupId,\n            fromIndex: draggedIndex.value,\n            toIndex: targetIndex,\n        })\n    }\n}\n\nconst handleDragOver = (event: DragEvent) => {\n    event.preventDefault()\n    if (event.dataTransfer) {\n        event.dataTransfer.dropEffect = 'move'\n    }\n}\n\nconst handleItemDrop = (event: DragEvent, index: number) => {\n    console.log(\n        'Item drop at index:',\n        index,\n        'dragged from:',\n        draggedIndex.value\n    )\n    handleDrop(event, index)\n}\n\nconst handleItemDragOver = (event: DragEvent, index: number) => {\n    event.preventDefault()\n    if (event.dataTransfer) {\n        event.dataTransfer.dropEffect = 'move'\n    }\n\n    // Update drop target\n    if (index !== draggedIndex.value) {\n        dropTargetIndex.value = index\n    }\n}\n\nconst handleItemDragLeave = (event: DragEvent) => {\n    const target = event.currentTarget as HTMLElement\n    if (target) {\n        target.style.opacity = '1'\n    }\n}\n\nconst handleGroupDragLeave = () => {\n    dropTargetIndex.value = -1\n}\n\nconst handleContainerDrop = (event: DragEvent) => {\n    console.log('Container drop event')\n    handleDrop(event)\n}\n</script>\n\n<template>\n    <div\n        class=\"w-full rounded-lg relative transition-colors\"\n        :class=\"{\n            'min-h-[100px]': localItems.length === 0,\n            'ring-2 ring-primary/20 bg-primary/5':\n                localItems.length === 0 && isDragging,\n        }\"\n        :data-group-id=\"groupId\"\n        :data-shared-group=\"sharedGroup\"\n        @drop=\"event => handleContainerDrop(event)\"\n        @dragover=\"handleDragOver\"\n        @dragleave=\"handleGroupDragLeave\"\n    >\n        <div class=\"flex flex-col\">\n            <div\n                v-for=\"(item, index) in localItems\"\n                :key=\"`${groupId}-${item.id || item}`\"\n                class=\"cursor-grab select-none transition-all duration-200 ease-in-out relative\"\n                :class=\"{\n                    'opacity-50 rotate-1 z-10 shadow-none':\n                        isDragging && index === draggedIndex,\n                    'translate-y-1':\n                        false &&\n                        isDragging &&\n                        index === dropTargetIndex &&\n                        index !== draggedIndex,\n                }\"\n                draggable=\"true\"\n                @dragstart=\"\n                    (event: DragEvent) => handleDragStart(event, item, index)\n                \"\n                @dragend=\"\n                    (event: DragEvent) => handleDragEnd(event, item, index)\n                \"\n                @dragover=\"\n                    (event: DragEvent) => handleItemDragOver(event, index)\n                \"\n                @drop=\"(event: DragEvent) => handleItemDrop(event, index)\"\n                @dragleave=\"handleItemDragLeave\"\n            >\n                <div\n                    class=\"w-full rounded-md transition-all duration-200 ease-in-out flex items-center justify-between gap-3\"\n                    :class=\"{\n                        'ring-1 ring-ring shadow-md shadow-ring':\n                            isDragging && index === draggedIndex,\n                        'ring-1 ring-accent shadow-md':\n                            isDragging &&\n                            index === dropTargetIndex &&\n                            index !== draggedIndex,\n                    }\"\n                >\n                    <!-- Default item content -->\n                    <template v-if=\"$slots.item\">\n                        <slot\n                            name=\"item\"\n                            :item=\"item\"\n                            :index=\"index\"\n                            :is-dragging=\"isDragging && index === draggedIndex\"\n                            :is-drop-target=\"\n                                isDragging &&\n                                index === dropTargetIndex &&\n                                index !== draggedIndex\n                            \"\n                        />\n                    </template>\n\n                    <!-- Fallback to default item display -->\n                    <template v-else>\n                        <div class=\"\">\n                            <div class=\"flex-1 min-w-0\">\n                                {{ item.label || item }}\n                            </div>\n                            <div\n                                class=\"text-muted-foreground text-sm font-bold opacity-60 transition-opacity duration-200 select-none\"\n      ... [truncated]",
    "url": "/components/sortable/Sortable",
    "source": "components"
  },
  {
    "objectID": "/components/sortable/demo",
    "title": "Demo",
    "content": "<template>\n    <div class=\"sortable-demo\">\n        <h2 class=\"demo-title\">Multi-Group Sortable Demo</h2>\n        <p class=\"demo-description\">\n            Drag items between the different groups below:\n        </p>\n\n        <MultiGroupSortable\n            :groups=\"sortableGroups\"\n            @update:groups=\"updateGroups\"\n            @item-moved=\"handleItemMoved\"\n        />\n\n        <div class=\"demo-controls\">\n            <button @click=\"resetItems\" class=\"reset-button\">\n                Reset Items\n            </button>\n            <button @click=\"addRandomItem\" class=\"add-button\">\n                Add Random Item\n            </button>\n        </div>\n\n        <div class=\"demo-info\">\n            <h4>Current State:</h4>\n            <div class=\"state-display\">\n                <div\n                    v-for=\"group in sortableGroups\"\n                    :key=\"group.id\"\n                    class=\"state-group\"\n                >\n                    <strong>{{ group.title }}:</strong>\n                    {{ group.items.map(item => item.label || item).join(', ') }}\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nimport MultiGroupSortable from './MultiGroupSortable.vue'\n\n// Sample data with objects that have labels\nconst createItem = (id: string, label: string) => ({ id, label })\n\nconst sortableGroups = ref([\n    {\n        id: 'group-a',\n        title: 'Group A',\n        items: [\n            createItem('a1', 'Item A1'),\n            createItem('a2', 'Item A2'),\n            createItem('a3', 'Item A3'),\n        ],\n    },\n    {\n        id: 'group-b',\n        title: 'Group B',\n        items: [createItem('b1', 'Item B1'), createItem('b2', 'Item B2')],\n    },\n    {\n        id: 'group-c',\n        title: 'Group C',\n        items: [\n            createItem('c1', 'Item C1'),\n            createItem('c2', 'Item C2'),\n            createItem('c3', 'Item C3'),\n            createItem('c4', 'Item C4'),\n        ],\n    },\n])\n\nconst updateGroups = (groups: any[]) => {\n    sortableGroups.value = groups\n}\n\nconst handleItemMoved = (payload: any) => {\n    console.log('Item moved:', payload)\n    // Cross-group move has been handled by the component\n}\n\nconst resetItems = () => {\n    sortableGroups.value = [\n        {\n            id: 'group-a',\n            title: 'Group A',\n            items: [\n                createItem('a1', 'Item A1'),\n                createItem('a2', 'Item A2'),\n                createItem('a3', 'Item A3'),\n            ],\n        },\n        {\n            id: 'group-b',\n            title: 'Group B',\n            items: [createItem('b1', 'Item B1'), createItem('b2', 'Item B2')],\n        },\n        {\n            id: 'group-c',\n            title: 'Group C',\n            items: [\n                createItem('c1', 'Item C1'),\n                createItem('c2', 'Item C2'),\n                createItem('c3', 'Item C3'),\n                createItem('c4', 'Item C4'),\n            ],\n        },\n    ]\n}\n\nconst addRandomItem = () => {\n    const groups = sortableGroups.value\n    const randomGroup = groups[Math.floor(Math.random() * groups.length)]\n    const randomId = Math.random().toString(36).substr(2, 9)\n    const randomLabel = `Random ${randomId}`\n\n    randomGroup.items.push(createItem(randomId, randomLabel))\n}\n</script>\n\n<style scoped>\n.sortable-demo {\n    padding: 24px;\n    max-width: 1200px;\n    margin: 0 auto;\n}\n\n.demo-title {\n    font-size: 24px;\n    font-weight: 600;\n    margin-bottom: 8px;\n    color: #1f2937;\n}\n\n.demo-description {\n    color: #6b7280;\n    margin-bottom: 24px;\n}\n\n.demo-controls {\n    display: flex;\n    gap: 12px;\n    margin-bottom: 24px;\n    justify-content: center;\n}\n\n.reset-button,\n.add-button {\n    padding: 8px 16px;\n    border: 1px solid #d1d5db;\n    border-radius: 6px;\n    background-color: white;\n    color: #374151;\n    font-size: 14px;\n    cursor: pointer;\n    transition: all 0.2s ease;\n}\n\n.reset-button:hover,\n.add-button:hover {\n    background-color: #f3f4f6;\n    border-color: #9ca3af;\n}\n\n.add-button {\n    background-color: #3b82f6;\n    color: white;\n    border-color: #3b82f6;\n}\n\n.add-button:hover {\n    background-color: #2563eb;\n    border-color: #2563eb;\n}\n\n.demo-info {\n    background-color: #f9fafb;\n    border: 1px solid #e5e7eb;\n    border-radius: 8px;\n    padding: 16px;\n}\n\n.demo-info h4 {\n    margin: 0 0 12px 0;\n    font-size: 16px;\n    font-weight: 500;\n    color: #374151;\n}\n\n.state-display {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n}\n\n.state-group {\n    font-size: 14px;\n    color: #6b7280;\n}\n\n.state-group strong {\n    color: #374151;\n}\n\n@media (max-width: 768px) {\n    .demo-controls {\n        flex-direction: column;\n        align-items: center;\n    }\n\n    .reset-button,\n    .add-button {\n        width: 200px;\n    }\n}\n</style>\n",
    "url": "/components/sortable/demo",
    "source": "components"
  },
  {
    "objectID": "/components/table/Table",
    "title": "Table",
    "content": "<template>\n    <div class=\"relative w-full overflow-auto\">\n        <table\n            :class=\"classes\"\n            class=\"group/table w-full caption-bottom text-sm\"\n        >\n            <slot />\n        </table>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { m } from '../../utils'\n\nconst props = defineProps<{\n    class?: string\n    striped?: boolean\n    spacing?: 'normal' | 'compact'\n}>()\n\nconst classes = m(\n    'relative w-full overflow-auto',\n    props.class,\n    props.striped && 'table-striped',\n    props.spacing === 'compact' && 'table-compact',\n    props.spacing === 'normal' && 'table-normal'\n)\n</script>\n",
    "url": "/components/table/Table",
    "source": "components"
  },
  {
    "objectID": "/components/table/TableBody",
    "title": "TableBody",
    "content": "<template>\n    <tbody class=\"[&_tr:last-child]:border-0\">\n        <slot />\n    </tbody>\n</template>\n",
    "url": "/components/table/TableBody",
    "source": "components"
  },
  {
    "objectID": "/components/table/TableCaption",
    "title": "TableCaption",
    "content": "<template>\n    <caption class=\"mt-4 text-sm text-muted-foreground\">\n        <slot />\n    </caption>\n</template>\n",
    "url": "/components/table/TableCaption",
    "source": "components"
  },
  {
    "objectID": "/components/table/TableCell",
    "title": "TableCell",
    "content": "<template>\n    <td\n        class=\"p-4 align-middle [&:has([role=checkbox])]:pr-0 group-[.table-compact]/table:p-2\"\n    >\n        <slot />\n    </td>\n</template>\n",
    "url": "/components/table/TableCell",
    "source": "components"
  },
  {
    "objectID": "/components/table/TableFooter",
    "title": "TableFooter",
    "content": "<template>\n    <tfoot class=\"border-t bg-muted/50 [&>tr]:last:border-b-0\">\n        <slot />\n    </tfoot>\n</template>\n",
    "url": "/components/table/TableFooter",
    "source": "components"
  },
  {
    "objectID": "/components/table/TableHead",
    "title": "TableHead",
    "content": "<template>\n    <th\n        class=\"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 group-[.table-compact]/table:h-9 group-[.table-compact]/table:px-2\"\n    >\n        <slot />\n    </th>\n</template>\n",
    "url": "/components/table/TableHead",
    "source": "components"
  },
  {
    "objectID": "/components/table/TableHeader",
    "title": "TableHeader",
    "content": "<template>\n    <thead class=\"[&_tr]:border-b\">\n        <slot />\n    </thead>\n</template>\n",
    "url": "/components/table/TableHeader",
    "source": "components"
  },
  {
    "objectID": "/components/table/TableRow",
    "title": "TableRow",
    "content": "<template>\n    <tr\n        class=\"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted group-[.table-striped]/table:even:bg-muted\"\n    >\n        <slot />\n    </tr>\n</template>\n",
    "url": "/components/table/TableRow",
    "source": "components"
  },
  {
    "objectID": "/components/table/demo",
    "title": "Demo",
    "content": "<template>\n    <div class=\"space-y-8\">\n        <div>\n            <h2 class=\"text-2xl font-bold mb-4\">Basic Table</h2>\n            <Table>\n                <TableHeader>\n                    <TableRow>\n                        <TableHead>Name</TableHead>\n                        <TableHead>Email</TableHead>\n                        <TableHead>Role</TableHead>\n                    </TableRow>\n                </TableHeader>\n                <TableBody>\n                    <TableRow>\n                        <TableCell>John Doe</TableCell>\n                        <TableCell>john@example.com</TableCell>\n                        <TableCell>Admin</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>Jane Smith</TableCell>\n                        <TableCell>jane@example.com</TableCell>\n                        <TableCell>User</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>Bob Johnson</TableCell>\n                        <TableCell>bob@example.com</TableCell>\n                        <TableCell>Editor</TableCell>\n                    </TableRow>\n                </TableBody>\n            </Table>\n        </div>\n\n        <div>\n            <h2 class=\"text-2xl font-bold mb-4\">\n                Table with Caption and Footer\n            </h2>\n            <Table>\n                <TableCaption\n                    >A list of classic books in our library.</TableCaption\n                >\n                <TableHeader>\n                    <TableRow>\n                        <TableHead class=\"w-[100px]\">ID</TableHead>\n                        <TableHead>Title</TableHead>\n                        <TableHead>Author</TableHead>\n                        <TableHead>Genre</TableHead>\n                        <TableHead class=\"text-right\">Price</TableHead>\n                    </TableRow>\n                </TableHeader>\n                <TableBody>\n                    <TableRow v-for=\"book in books\" :key=\"book.id\">\n                        <TableCell class=\"font-medium\">{{ book.id }}</TableCell>\n                        <TableCell>{{ book.title }}</TableCell>\n                        <TableCell>{{ book.author }}</TableCell>\n                        <TableCell>{{ book.genre }}</TableCell>\n                        <TableCell class=\"text-right\">{{\n                            book.price\n                        }}</TableCell>\n                    </TableRow>\n                </TableBody>\n                <TableFooter>\n                    <TableRow>\n                        <TableCell colspan=\"4\">Total</TableCell>\n                        <TableCell class=\"text-right\">$91.93</TableCell>\n                    </TableRow>\n                </TableFooter>\n            </Table>\n        </div>\n\n        <div>\n            <h2 class=\"text-2xl font-bold mb-4\">Book Sales Report</h2>\n            <Table>\n                <TableCaption\n                    >Monthly book sales report for Q1 2024</TableCaption\n                >\n                <TableHeader>\n                    <TableRow>\n                        <TableHead>Genre</TableHead>\n                        <TableHead>Books Sold</TableHead>\n                        <TableHead>Revenue</TableHead>\n                        <TableHead>Growth</TableHead>\n                    </TableRow>\n                </TableHeader>\n                <TableBody>\n                    <TableRow>\n                        <TableCell>Classic</TableCell>\n                        <TableCell>1,250</TableCell>\n                        <TableCell>$18,750</TableCell>\n                        <TableCell class=\"text-green-600\">+15%</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>Fantasy</TableCell>\n                        <TableCell>980</TableCell>\n                        <TableCell>$16,660</TableCell>\n                        <TableCell class=\"text-green-600\">+21%</TableCell>\n                    </TableRow>\n                    <TableRow>\n                        <TableCell>Dystopian</TableCell>\n                        <TableCell>720</TableCell>\n                        <TableCell>$8,640</TableCell>\n                        <TableCell class=\"text-green-600\">+12%</TableCell>\n                    </TableRow>\n                </TableBody>\n                <TableFooter>\n                    <TableRow>\n                        <TableCell colspan=\"2\">Total</TableCell>\n                        <TableCell>$44,050</TableCell>\n                        <TableCell class=\"text-green-600\">+16%</TableCell>\n                    </TableRow>\n                </TableFooter>\n            </Table>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport {\n    Table,\n    TableBody,\n    TableCaption,\n    TableCell,\n    TableFooter,\n    TableHead,\n    TableHeader,\n    TableRow,\n} from './index'\n\nconst books = [\n    {\n        id: 'BK001',\n        title: 'The Great Gatsby',\n        author: 'F. Scott Fitzgerald',\n        genre: 'Classic',\n        publishedYear: 1925,\n        price: '$12.99',\n    },\n    {\n        id: 'BK002',\n        title: 'To Kill a Mockingbird',\n        author: 'Harper Lee',\n        genre: 'Classic',\n        publishedYear: 1960,\n        price: '$14.99',\n    },\n    {\n        id: 'BK003',\n        title: '1984',\n        author: 'George Orwell',\n        genre: 'Dystopian',\n        publishedYear: 1949,\n        price: '$11.99',\n    },\n    {\n        id: 'BK004',\n        title: 'Pride and Prejudice',\n        author: 'Jane Austen',\n        genre: 'Romance',\n        publishedYear: 1813,\n        price: '$9.99',\n    },\n    {\n        id: 'BK005',\n        title: 'The Hobbit',\n        author: 'J.R.R. Tolkien',\n        genre: 'Fantasy',\n        publishedYear: 1937,\n        price: '$16.99',\n    },\n    {\n        id: 'BK006',\n        title: 'The Catcher in the Rye',\n        author: 'J.D. Salinger',\n        genre: 'Coming-of-age',\n        publishedYear: 1951,\n        price: '$13.99',\n    },\n    {\n        id: 'BK007',\n        title: 'Lord of the Flies',\n        author: 'William Golding',\n        genre: 'Allegory',\n        publishedYear: 1954,\n        price: '$10.99',\n    },\n]\n</script>\n",
    "url": "/components/table/demo",
    "source": "components"
  },
  {
    "objectID": "/components/textarea/Textarea",
    "title": "Textarea",
    "content": "<template>\n    <textarea\n        :disabled=\"disabled\"\n        :placeholder=\"placeholder\"\n        :value=\"modelValue ?? value\"\n        @input=\"onInput\"\n        :class=\"\n            m(\n                'flex w-full rounded-md border border-ring bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground/70 focus-visible:outline-none focus-visible:ring-3 focus-visible:ring-ring/40 transition-[box-shadow,color] disabled:cursor-not-allowed disabled:opacity-50',\n                theme?.textarea || ''\n            )\n        \"\n    />\n</template>\n\n<script setup lang=\"ts\">\nimport { m } from '../../utils'\n\ndefineProps<{\n    disabled?: boolean\n    placeholder: string\n    value?: string\n    modelValue?: string\n    theme?: {\n        textarea?: string\n    }\n}>()\n\nconst emit = defineEmits<{\n    (e: 'update:modelValue', value: string): void\n    (e: 'update:value', value: string): void\n    (e: 'input', value: string): void\n}>()\n\nconst onInput = (event: Event) => {\n    const target = event.target as HTMLTextAreaElement\n    emit('update:modelValue', target.value)\n    emit('update:value', target.value)\n    emit('input', target.value)\n}\n</script>\n",
    "url": "/components/textarea/Textarea",
    "source": "components"
  },
  {
    "objectID": "/components/theme-toggle/ThemeToggle",
    "title": "ThemeToggle",
    "content": "<template>\n    <Button variant=\"outline\" size=\"icon\" @click=\"toggleTheme\">\n        <SunIcon v-if=\"!isDark\" class=\"size-4\" />\n        <MoonIcon v-else class=\"size-4\" />\n    </Button>\n</template>\n\n<script setup lang=\"ts\">\nimport { useStorybookTheme } from '../../composables'\nimport { SunIcon, MoonIcon } from 'lucide-vue-next'\nimport { Button } from '../button/Button'\n\ninterface Props {\n    variant?: 'default' | 'compact' | 'minimal'\n    showDetails?: boolean\n    theme?: {\n        container?: string\n        text?: string\n        button?: string\n    }\n}\n\nwithDefaults(defineProps<Props>(), {\n    variant: 'default',\n    showDetails: true,\n    theme: () => ({\n        container: '',\n        text: '',\n        button: '',\n    }),\n})\n\nconst { isDark, toggleTheme } = useStorybookTheme()\n</script>\n",
    "url": "/components/theme-toggle/ThemeToggle",
    "source": "components"
  },
  {
    "objectID": "/components/tooltip/Tooltip",
    "title": "Tooltip",
    "content": "<template>\n    <div class=\"relative\">\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { provide, ref, computed, reactive, type ComputedRef } from 'vue'\n\ninterface TooltipContext {\n    isVisible: ComputedRef<boolean>\n    triggerRef: any\n    show: () => void\n    hide: () => void\n    setTriggerRef: (ref: HTMLElement) => void\n    portalTarget: ComputedRef<string>\n}\n\nconst isVisible = ref(false)\nconst triggerRef = ref<HTMLElement>()\nconst portalTarget = ref('body')\n\nconst context = reactive<TooltipContext>({\n    isVisible: computed(() => isVisible.value),\n    triggerRef: triggerRef,\n    show: () => {\n        isVisible.value = true\n    },\n    hide: () => {\n        isVisible.value = false\n    },\n    setTriggerRef: (ref: HTMLElement) => {\n        triggerRef.value = ref\n    },\n    portalTarget: computed(() => portalTarget.value),\n})\n\nprovide('tooltip', context)\nprovide('triggerRef', triggerRef)\n\ndefineExpose({\n    isVisible,\n    show: context.show,\n    hide: context.hide,\n    triggerRef,\n    portalTarget,\n})\n</script>\n",
    "url": "/components/tooltip/Tooltip",
    "source": "components"
  },
  {
    "objectID": "/components/tooltip/TooltipBasicTest",
    "title": "TooltipBasicTest",
    "content": "<template>\n    <div class=\"p-8\">\n        <h2 class=\"text-xl font-bold mb-4\">Basic Tooltip Test</h2>\n\n        <!-- Single tooltip test -->\n        <div class=\"mb-8\">\n            <Tooltip>\n                <TooltipTrigger>\n                    <button class=\"px-4 py-2 bg-blue-500 text-white rounded\">\n                        Test Tooltip\n                    </button>\n                </TooltipTrigger>\n                <TooltipContent side=\"top\"> Basic tooltip test </TooltipContent>\n            </Tooltip>\n        </div>\n\n        <!-- Multiple tooltips test -->\n        <div class=\"space-y-4\">\n            <h3 class=\"text-lg font-semibold\">Multiple Tooltips</h3>\n            <div class=\"flex gap-4\">\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-1 bg-red-500 text-white rounded text-sm\"\n                        >\n                            Red\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"top\"> Red tooltip </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-1 bg-green-500 text-white rounded text-sm\"\n                        >\n                            Green\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"top\"> Green tooltip </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-1 bg-blue-500 text-white rounded text-sm\"\n                        >\n                            Blue\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"top\"> Blue tooltip </TooltipContent>\n                </Tooltip>\n            </div>\n        </div>\n\n        <!-- Debug info -->\n        <div class=\"mt-8 p-4 bg-gray-100 rounded\">\n            <h3 class=\"text-lg font-semibold mb-2\">Debug Info</h3>\n            <p>Check browser console for debug information.</p>\n            <p>Hover over buttons to see tooltips.</p>\n            <p>Look for:</p>\n            <ul class=\"list-disc list-inside ml-4\">\n                <li>TooltipTrigger mounted logs</li>\n                <li>Tooltip positioning logs</li>\n                <li>Any error messages</li>\n            </ul>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport Tooltip from './Tooltip.vue'\nimport TooltipTrigger from './TooltipTrigger.vue'\nimport TooltipContent from './TooltipContent.vue'\n</script>\n",
    "url": "/components/tooltip/TooltipBasicTest",
    "source": "components"
  },
  {
    "objectID": "/components/tooltip/TooltipContent",
    "title": "TooltipContent",
    "content": "<!-- \n  Tailwind classes used in this component:\n  relative max-w-xs rounded-md bg-primary px-3 py-2 text-sm text-primary-foreground shadow-lg \n  bottom-[-4px] left-1/2 transform -translate-x-1/2 \n  absolute w-2 h-2 bg-primary rotate-45 \n  transition-all duration-200 ease-out opacity-0 scale-95 translate-y-1 \n  opacity-100 scale-100 translate-y-0 \n  opacity-0 scale-95 translate-y-1 transition-all duration-150 ease-in \n  top-[-4px] left-1/2 transform -translate-x-1/2\n  left-4 right-4 top-4 bottom-4\n  transform-gpu pointer-events-none pointer-events-auto\n  fixed z-[9999]\n-->\n\n<template>\n    <Teleport :to=\"tooltip?.portalTarget || 'body'\">\n        <div\n            ref=\"contentRef\"\n            class=\"fixed z-[9999] pointer-events-none\"\n            :style=\"floatingStyles\"\n        >\n            <transition\n                enter-active-class=\"transition-all duration-200 ease-out\"\n                leave-active-class=\"transition-all duration-150 ease-in\"\n                enter-from-class=\"opacity-0 scale-95 translate-y-1\"\n                enter-to-class=\"opacity-100 scale-100 translate-y-0\"\n                leave-from-class=\"opacity-100 scale-100 translate-y-0\"\n                leave-to-class=\"opacity-0 scale-95 translate-y-1\"\n            >\n                <div\n                    v-show=\"tooltip?.isVisible\"\n                    role=\"tooltip\"\n                    class=\"relative max-w-xs rounded-md bg-tooltip px-3 py-2 text-sm text-tooltip-foreground shadow-lg pointer-events-auto transform-gpu\"\n                >\n                    <slot />\n                    <!-- Tooltip arrow -->\n                    <div\n                        ref=\"arrowRef\"\n                        class=\"absolute w-2 h-2 bg-tooltip rotate-45\"\n                        :class=\"arrowClasses\"\n                        :style=\"arrowStyles\"\n                    />\n                </div>\n            </transition>\n        </div>\n    </Teleport>\n</template>\n\n<script setup lang=\"ts\">\nimport {\n    ref,\n    inject,\n    computed,\n    type Ref,\n    onMounted,\n    nextTick,\n    watch,\n} from 'vue'\nimport { useFloating, offset, flip, shift, arrow } from '@floating-ui/vue'\n\ninterface Props {\n    side?: 'top' | 'right' | 'bottom' | 'left'\n    align?: 'start' | 'center' | 'end'\n    sideOffset?: number\n    alignOffset?: number\n    avoidCollisions?: boolean\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    side: 'top',\n    align: 'center',\n    sideOffset: 8,\n    alignOffset: 0,\n    avoidCollisions: true,\n})\n\ninterface TooltipContext {\n    isVisible: any\n    triggerRef: any\n    show: () => void\n    hide: () => void\n    setTriggerRef: (ref: HTMLElement) => void\n    portalTarget: any\n}\n\nconst tooltip = inject<TooltipContext>('tooltip')\nconst triggerRef = inject<Ref<HTMLElement>>('triggerRef')\nconst contentRef = ref<HTMLElement>()\nconst arrowRef = ref<HTMLElement>()\n\nconst effectiveTriggerRef = computed(\n    () => triggerRef?.value || tooltip?.triggerRef?.value\n)\n\n// Create reactive placement based on props\nconst placement = computed(() => `${props.side}-${props.align}` as any)\n\nconst { floatingStyles, middlewareData, update } = useFloating(\n    effectiveTriggerRef || ref(null),\n    contentRef,\n    {\n        strategy: 'fixed',\n        placement,\n        middleware: [\n            offset({\n                mainAxis: props.sideOffset,\n                crossAxis: props.alignOffset,\n            }),\n            ...(props.avoidCollisions ? [flip()] : []),\n            ...(props.avoidCollisions ? [shift()] : []),\n            arrow({ element: arrowRef }),\n        ],\n    }\n)\n\n// Get the actual placement after middleware processing\nconst actualPlacement = computed(() => {\n    const flipData = middlewareData.value?.flip\n    if (flipData && flipData.overflows && flipData.overflows.length > 0) {\n        return flipData.overflows[0].placement\n    }\n    return props.side\n})\n\n// Watch for prop changes and update positioning\nwatch(\n    [\n        () => props.side,\n        () => props.align,\n        () => props.sideOffset,\n        () => props.alignOffset,\n    ],\n    () => {\n        nextTick(() => {\n            update()\n        })\n    }\n)\n\n// Watch for tooltip visibility changes to update positioning\nwatch(\n    () => tooltip?.isVisible,\n    isVisible => {\n        if (isVisible) {\n            // Use a longer delay to ensure DOM is ready\n            nextTick(() => {\n                update()\n            })\n        }\n    },\n    { immediate: true }\n)\n\n// Debug positioning (remove in production)\nwatch(floatingStyles, styles => {\n    if (process.env.NODE_ENV === 'development') {\n        console.log('Tooltip positioning:', {\n            requestedPlacement: placement.value,\n            actualPlacement: actualPlacement.value,\n            styles,\n            triggerRef: effectiveTriggerRef.value,\n            contentRef: contentRef.value,\n        })\n    }\n})\n\n// Calculate arrow position based on actual placement\nconst arrowClasses = computed(() => {\n    const placement = actualPlacement.value\n\n    // Extract side and alignment from placement\n    const [side, align] = placement.split('-')\n    const alignment = align || 'center'\n\n    switch (side) {\n        case 'top':\n            // Arrow points down from top of tooltip\n            switch (alignment) {\n                case 'start':\n                    return 'bottom-[-4px] left-4'\n                case 'end':\n                    return 'bottom-[-4px] right-4'\n                default: // center\n                    return 'bottom-[-4px] left-1/2 transform -translate-x-1/2'\n            }\n        case 'bottom':\n            // Arrow points up from bottom of tooltip\n            switch (alignment) {\n                case 'start':\n                    return 'top-[-4px] left-4'\n                case 'end':\n                    return 'top-[-4px] right-4'\n                default: // center\n                    return 'top-[-4px] left-1/2 transform -translate-x-1/2'\n            }\n        case 'left':\n            // Arrow points right from left side of tooltip\n            switch (alignment) {\n                case 'start':\n                    return 'right-[-4px] top-4'\n                case 'end':\n                    return 'right-[-4px] bottom-4'\n                default: // center\n                    return 'right-[-4px] top-1/2 transform -translate-y-1/2'\n            }\n        case 'right':\n            // Arrow points left from right side of tooltip\n            switch (alignment) {\n                case 'start':\n                    return 'left-[-4px] top-4'\n                case 'end':\n                    return 'left-[-4px] bottom-4'\n                default: // center\n                    return 'left-[-4px] top-1/2 transform -translate-y-1/2'\n            }\n        default:\n            return 'bottom-[-4px] left-1/2 transform -translate-x-1/2'\n    }\n})\n\n// Get arrow styles from floating UI\nconst arrowStyles = computed(() => {\n    return middlewareData.value?.arrow || {}\n})\n\nonMounted(async () => {\n    await nextTick()\n    // Use a longer delay to ensure everything is mounted\n    setTimeout(() => {\n        update()\n    }, 100)\n})\n</script>\n",
    "url": "/components/tooltip/TooltipContent",
    "source": "components"
  },
  {
    "objectID": "/components/tooltip/TooltipSimpleTest",
    "title": "TooltipSimpleTest",
    "content": "<template>\n    <div class=\"p-8\">\n        <h2 class=\"text-xl font-bold mb-4\">Simple Tooltip Test</h2>\n\n        <!-- Basic positioning test -->\n        <div class=\"space-y-4\">\n            <div class=\"flex gap-4\">\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-4 py-2 bg-blue-500 text-white rounded\"\n                        >\n                            Top\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"top\"> Top tooltip </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-4 py-2 bg-green-500 text-white rounded\"\n                        >\n                            Right\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"right\">\n                        Right tooltip\n                    </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-4 py-2 bg-purple-500 text-white rounded\"\n                        >\n                            Bottom\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"bottom\">\n                        Bottom tooltip\n                    </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button class=\"px-4 py-2 bg-red-500 text-white rounded\">\n                            Left\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"left\"> Left tooltip </TooltipContent>\n                </Tooltip>\n            </div>\n        </div>\n\n        <!-- Edge test with different alignments -->\n        <div class=\"mt-8\">\n            <h3 class=\"text-lg font-semibold mb-2\">\n                Edge Positioning with Alignments\n            </h3>\n            <div class=\"flex justify-between\">\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-1 bg-orange-500 text-white rounded text-sm\"\n                        >\n                            Top Start\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"top\" align=\"start\">\n                        Top start aligned\n                    </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-1 bg-orange-500 text-white rounded text-sm\"\n                        >\n                            Top Center\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"top\" align=\"center\">\n                        Top center aligned\n                    </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-1 bg-orange-500 text-white rounded text-sm\"\n                        >\n                            Top End\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"top\" align=\"end\">\n                        Top end aligned\n                    </TooltipContent>\n                </Tooltip>\n            </div>\n\n            <div class=\"flex justify-center space-x-4 mt-4\">\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-1 bg-teal-500 text-white rounded text-sm\"\n                        >\n                            Left Start\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"left\" align=\"start\">\n                        Left start aligned\n                    </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-1 bg-teal-500 text-white rounded text-sm\"\n                        >\n                            Left Center\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"left\" align=\"center\">\n                        Left center aligned\n                    </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-1 bg-teal-500 text-white rounded text-sm\"\n                        >\n                            Left End\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"left\" align=\"end\">\n                        Left end aligned\n                    </TooltipContent>\n                </Tooltip>\n            </div>\n\n            <div class=\"flex justify-center space-x-4 mt-4\">\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-1 bg-pink-500 text-white rounded text-sm\"\n                        >\n                            Right Start\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"right\" align=\"start\">\n                        Right start aligned\n                    </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-1 bg-pink-500 text-white rounded text-sm\"\n                        >\n                            Right Center\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"right\" align=\"center\">\n                        Right center aligned\n                    </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-1 bg-pink-500 text-white rounded text-sm\"\n                        >\n                            Right End\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"right\" align=\"end\">\n                        Right end aligned\n                    </TooltipContent>\n                </Tooltip>\n            </div>\n\n            <div class=\"flex justify-between mt-4\">\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-1 bg-purple-500 text-white rounded text-sm\"\n                        >\n                            Bottom Start\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"bottom\" align=\"start\">\n                        Bottom start aligned\n                    </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-1 bg-purple-500 text-white rounded text-sm\"\n                        >\n                            Bottom Center\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"bottom\" align=\"center\">\n                        Bottom center aligned\n                    </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-1 bg-purple-500 text-white rounded text-sm\"\n                        >\n                            Bottom End\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"bottom\" align=\"end\">\n                        Bottom end aligned\n                    </TooltipContent>\n                </Tooltip>\n            </div>\n        </div>\n\n        <!-- Debug info -->\n        <div class=\"mt-8 p-4 bg-gray-100 rounded\">\n            <h3 class=\"text-lg font-semibold mb-2\">Debug Info</h3>\n            <p>Check browser console for positioning debug information.</p>\n            <p>Hover over the buttons above to see tooltip positioning.</p>\n            <p>Look for arrow positioning at different alignments.</p>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport Tooltip from './Tooltip.vue'\nimport TooltipTrigger from './TooltipTrigger.vue'\nimport TooltipContent from './TooltipContent.vue'\n</script>\n",
    "url": "/components/tooltip/TooltipSimpleTest",
    "source": "components"
  },
  {
    "objectID": "/components/tooltip/TooltipTest",
    "title": "TooltipTest",
    "content": "<template>\n    <div class=\"p-8 space-y-8\">\n        <h2 class=\"text-xl font-bold\">Tooltip Positioning Test</h2>\n\n        <!-- Test different positions -->\n        <div class=\"space-y-4\">\n            <h3 class=\"text-lg font-semibold\">Position Tests</h3>\n            <div class=\"flex gap-4 flex-wrap\">\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-2 bg-blue-500 text-white rounded\"\n                        >\n                            Top\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"top\"> Tooltip on top </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-2 bg-green-500 text-white rounded\"\n                        >\n                            Right\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"right\">\n                        Tooltip on right\n                    </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-2 bg-purple-500 text-white rounded\"\n                        >\n                            Bottom\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"bottom\">\n                        Tooltip on bottom\n                    </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button class=\"px-3 py-2 bg-red-500 text-white rounded\">\n                            Left\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"left\">\n                        Tooltip on left\n                    </TooltipContent>\n                </Tooltip>\n            </div>\n        </div>\n\n        <!-- Test edge positioning -->\n        <div class=\"space-y-4\">\n            <h3 class=\"text-lg font-semibold\">Edge Positioning Tests</h3>\n            <div class=\"relative border-2 border-gray-300 p-4 rounded\">\n                <div class=\"flex justify-between\">\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <button\n                                class=\"px-2 py-1 bg-orange-500 text-white rounded text-sm\"\n                            >\n                                Top Left\n                            </button>\n                        </TooltipTrigger>\n                        <TooltipContent side=\"top\" align=\"start\">\n                            Top left tooltip\n                        </TooltipContent>\n                    </Tooltip>\n\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <button\n                                class=\"px-2 py-1 bg-orange-500 text-white rounded text-sm\"\n                            >\n                                Top Right\n                            </button>\n                        </TooltipTrigger>\n                        <TooltipContent side=\"top\" align=\"end\">\n                            Top right tooltip\n                        </TooltipContent>\n                    </Tooltip>\n                </div>\n\n                <div class=\"flex justify-center mt-4\">\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <button\n                                class=\"px-2 py-1 bg-teal-500 text-white rounded text-sm\"\n                            >\n                                Center\n                            </button>\n                        </TooltipTrigger>\n                        <TooltipContent side=\"top\" align=\"center\">\n                            Center tooltip\n                        </TooltipContent>\n                    </Tooltip>\n                </div>\n\n                <div class=\"flex justify-between mt-4\">\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <button\n                                class=\"px-2 py-1 bg-pink-500 text-white rounded text-sm\"\n                            >\n                                Bottom Left\n                            </button>\n                        </TooltipTrigger>\n                        <TooltipContent side=\"bottom\" align=\"start\">\n                            Bottom left tooltip\n                        </TooltipContent>\n                    </Tooltip>\n\n                    <Tooltip>\n                        <TooltipTrigger>\n                            <button\n                                class=\"px-2 py-1 bg-pink-500 text-white rounded text-sm\"\n                            >\n                                Bottom Right\n                            </button>\n                        </TooltipTrigger>\n                        <TooltipContent side=\"bottom\" align=\"end\">\n                            Bottom right tooltip\n                        </TooltipContent>\n                    </Tooltip>\n                </div>\n            </div>\n        </div>\n\n        <!-- Test collision detection -->\n        <div class=\"space-y-4\">\n            <h3 class=\"text-lg font-semibold\">Collision Detection Tests</h3>\n            <div class=\"flex gap-4\">\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-2 bg-indigo-500 text-white rounded\"\n                        >\n                            Near Edge\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"top\" :avoid-collisions=\"true\">\n                        This should flip if near viewport edge\n                    </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-2 bg-indigo-500 text-white rounded\"\n                        >\n                            No Collision Avoidance\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"top\" :avoid-collisions=\"false\">\n                        This won't flip even if clipped\n                    </TooltipContent>\n                </Tooltip>\n            </div>\n        </div>\n\n        <!-- Test custom offsets -->\n        <div class=\"space-y-4\">\n            <h3 class=\"text-lg font-semibold\">Custom Offset Tests</h3>\n            <div class=\"flex gap-4\">\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-2 bg-yellow-500 text-white rounded\"\n                        >\n                            Large Offset\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"top\" :side-offset=\"20\">\n                        Tooltip with 20px offset\n                    </TooltipContent>\n                </Tooltip>\n\n                <Tooltip>\n                    <TooltipTrigger>\n                        <button\n                            class=\"px-3 py-2 bg-yellow-500 text-white rounded\"\n                        >\n                            Align Offset\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent side=\"top\" :align-offset=\"10\">\n                        Tooltip with align offset\n                    </TooltipContent>\n                </Tooltip>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport Tooltip from './Tooltip.vue'\nimport TooltipTrigger from './TooltipTrigger.vue'\nimport TooltipContent from './TooltipContent.vue'\n</script>\n",
    "url": "/components/tooltip/TooltipTest",
    "source": "components"
  },
  {
    "objectID": "/components/tooltip/TooltipTrigger",
    "title": "TooltipTrigger",
    "content": "<template>\n    <div\n        ref=\"triggerRef\"\n        @mouseenter=\"handleMouseEnter\"\n        @mouseleave=\"handleMouseLeave\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n    >\n        <slot />\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, inject, onMounted, onUnmounted, type Ref } from 'vue'\n\ninterface TooltipContext {\n    isVisible: any\n    triggerRef: any\n    show: () => void\n    hide: () => void\n    setTriggerRef: (ref: HTMLElement) => void\n}\n\ninterface Props {\n    delay?: number\n    hideDelay?: number\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n    delay: 300,\n    hideDelay: 0,\n})\n\nconst tooltip = inject<TooltipContext>('tooltip')\nconst triggerRef = ref<HTMLElement>()\nlet showTimeout: number | null = null\nlet hideTimeout: number | null = null\n\nconst handleMouseEnter = () => {\n    if (hideTimeout) {\n        clearTimeout(hideTimeout)\n        hideTimeout = null\n    }\n\n    if (props.delay > 0) {\n        showTimeout = window.setTimeout(() => {\n            tooltip?.show()\n        }, props.delay)\n    } else {\n        tooltip?.show()\n    }\n}\n\nconst handleMouseLeave = () => {\n    if (showTimeout) {\n        clearTimeout(showTimeout)\n        showTimeout = null\n    }\n\n    if (props.hideDelay > 0) {\n        hideTimeout = window.setTimeout(() => {\n            tooltip?.hide()\n        }, props.hideDelay)\n    } else {\n        tooltip?.hide()\n    }\n}\n\nconst handleFocus = () => {\n    if (props.delay > 0) {\n        showTimeout = window.setTimeout(() => {\n            tooltip?.show()\n        }, props.delay)\n    } else {\n        tooltip?.show()\n    }\n}\n\nconst handleBlur = () => {\n    if (showTimeout) {\n        clearTimeout(showTimeout)\n        showTimeout = null\n    }\n    tooltip?.hide()\n}\n\nonMounted(() => {\n    if (triggerRef.value) {\n        tooltip?.setTriggerRef(triggerRef.value)\n        if (process.env.NODE_ENV === 'development') {\n            console.log('TooltipTrigger mounted:', {\n                triggerRef: triggerRef.value,\n                tooltip: tooltip,\n            })\n        }\n    }\n})\n\nonUnmounted(() => {\n    if (showTimeout) {\n        clearTimeout(showTimeout)\n    }\n    if (hideTimeout) {\n        clearTimeout(hideTimeout)\n    }\n})\n</script>\n",
    "url": "/components/tooltip/TooltipTrigger",
    "source": "components"
  },
  {
    "objectID": "/components/typeahead/Typeahead",
    "title": "Typeahead",
    "content": "<template>\n    <div :class=\"m('relative rounded-lg')\">\n        <Combobox\n            :model-value=\"activeItem\"\n            :immediate=\"immediate\"\n            :nullable=\"nullable\"\n            :multiple=\"multiple\"\n            @update:model-value=\"activeItem = $event\"\n        >\n            <div class=\"relative\">\n                <div\n                    ref=\"reference\"\n                    :class=\"m(theme.baseDropdownInputContainer)\"\n                >\n                    <ComboboxInput\n                        :class=\"\n                            m(\n                                'flex w-full rounded-md border bg-background pl-2.5 py-1.5 pr-8 text-sm truncate ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground/60 focus-visible:outline-none focus-visible:ring-3 focus-visible:ring-ring/40 transition-[box-shadow,color] disabled:cursor-not-allowed disabled:opacity-50 shadow-xs',\n                                theme.baseDropdownInputText\n                            )\n                        \"\n                        :displayValue=\"displayProperty\"\n                        :placeholder=\"placeholder\"\n                        autoComplete=\"off\"\n                        @focus=\"\n                            () => {\n                                open = true\n                                focused = true\n                            }\n                        \"\n                        @blur=\"focused = false\"\n                        @change=\"query = $event.target.value\"\n                    />\n                    <ComboboxButton\n                        :class=\"[\n                            'absolute inset-y-0 right-0 flex items-center pr-2 text-muted-foreground',\n                        ]\"\n                    >\n                        <ChevronDown class=\"size-4 text-inherit\" />\n                    </ComboboxButton>\n                </div>\n\n                <transition\n                    enter-active-class=\"transition duration-200 ease-out\"\n                    enter-from-class=\"translate-y-1 opacity-0\"\n                    enter-to-class=\"translate-y-0 opacity-100\"\n                    leave-active-class=\"transition duration-150 ease-in\"\n                    leave-from-class=\"translate-y-0 opacity-100\"\n                    leave-to-class=\"translate-y-1 opacity-0\"\n                >\n                    <!-- <Teleport to=\"body\" :disabled=\"isStatic\"> -->\n                    <ComboboxOptions\n                        ref=\"floating\"\n                        :class=\"\n                            m(\n                                'fixed left-0 z-10 overflow-x-hidden overflow-y-auto rounded-lg bg-popover p-3 text-base shadow-lg ring-1 ring-black/5 focus:outline-hidden sm:text-sm',\n                                theme.generalFloatingPanelContainer\n                            )\n                        \"\n                        :style=\"floatingStyles\"\n                        :static=\"isStatic\"\n                    >\n                        <div v-if=\"$slots.static\">\n                            <slot name=\"static\" v-bind=\"{ query, searching }\" />\n                        </div>\n\n                        <!-- <div v-if=\"searching\">\n                            <slot name=\"searching\" />\n                        </div> -->\n\n                        <slot v-if=\"searching\" name=\"searching\">\n                            <span class=\"flex items-center gap-2\">\n                                <Loader class=\"size-4 animate-spin\" />\n                                <span>Searching...</span>\n                            </span>\n                        </slot>\n\n                        <div v-if=\"filteredItems.length === 0 && !searching\">\n                            <slot v-if=\"$slots.empty\" name=\"empty\" />\n                            <span v-else>No results</span>\n                        </div>\n\n                        <div v-if=\"groupBy && !searching\">\n                            <div\n                                v-for=\"(group, groupName) in groupByFnc(\n                                    [\n                                        ...prependItems,\n                                        ...filteredItems,\n                                        ...postpendItems,\n                                    ],\n                                    item => item[groupBy as string]\n                                )\"\n                                class=\"border-t border-border px-2 first:border-t-0 py-2 first:pt-0 last:pb-0\"\n                            >\n                                <div\n                                    class=\"flex items-center text-base font-medium\"\n                                >\n                                    <slot\n                                        v-if=\"$slots.group\"\n                                        name=\"group\"\n                                        v-bind=\"{\n                                            group,\n                                            groupName,\n                                        }\"\n                                    />\n                                    <span v-else>{{\n                                        ![\n                                            'undefined',\n                                            null,\n                                            undefined,\n                                        ].includes(groupName)\n                                            ? groupName\n                                            : 'Uncategorized'\n                                    }}</span>\n                                </div>\n                                <div class=\"-mx-2.5\">\n                                    <ComboboxOption\n                                        v-if=\"!searching\"\n                                        v-for=\"item in group\"\n                                        :key=\"item[uidProperty]\"\n                                        :value=\"item\"\n                                        v-slot=\"{ active, selected }\"\n                                    >\n                                        <span\n                                            :class=\"[\n                                                'cursor-pointer hover:bg-accent rounded-md px-2 py-1 flex w-full truncate',\n                                                active && 'bg-accent',\n                                                selected && 'bg-accent',\n                                            ]\"\n                                        >\n                                            <slot\n                                                v-if=\"$slots.item\"\n                                                name=\"item\"\n                                                v-bind=\"{\n                                                    item,\n                                                    active,\n                                                    selected,\n                                                }\"\n                                            />\n                                            <span v-else>{{\n                                                displayProperty(item)\n                                            }}</span>\n                                        </span>\n                                    </ComboboxOption>\n                                </div>\n                            </div>\n                        </div>\n\n                        <ComboboxOption\n                            v-else-if=\"!searching\"\n                            v-for=\"item in filteredItems\"\n                            :key=\"item[uidProperty]\"\n                            :value=\"item\"\n                            v-slot=\"{ active, selected }\"\n                        >\n                            <span\n                                :class=\"[\n                                    'cursor-pointer hover:bg-accent rounded-md px-2 py-1 flex w-full truncate',\n                                    active && 'bg-accent',\n                                    selected && 'bg-accent',\n                                ]\"\n                            >\n                                <slot\n                                    v-if=\"$slots.item\"\n                                    name=\"item\"\n                                    v-bind=\"{ item, active, selected }\"\n                                />\n                                <span v-else>{{ displayProperty(item) }}</span>\n                            </span>\n                        </ComboboxOption>\n\n                        <slot\n                            v-if=\"$slots.options\"\n                            name=\"options\"\n                            v-bind=\"{ filteredItems }\"\n                        />\n                    </ComboboxOptions>\n                    <!-- </Teleport> -->\n                </transition>\n                <!--/TransitionRoot-->\n            </div>\n        </Combobox>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, inject, ref, watch } from 'vue'\nimport { debounce, m } from '../../utils'\nimport { type AllowedPlacement } from '../../types'\nimport {\n    autoPlacement,\n    autoUpdate,\n    limitShift,\n    offset,\n   ... [truncated]",
    "url": "/components/typeahead/Typeahead",
    "source": "components"
  }
]