[
  {
    "objectID": "/docs/[component]",
    "title": "[component]",
    "content": "<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { useRoute } from 'vue-router'\nimport DocsLayout from '@/components/docs/DocsLayout.vue'\n\nconst route = useRoute()\nconst componentName = computed(() => route.params.component as string)\n\n// This would typically come from your component metadata\nconst componentData = computed(() => ({\n    title:\n        componentName.value.charAt(0).toUpperCase() +\n        componentName.value.slice(1),\n    description: `The ${componentName.value} component is a reusable UI element that can be used to build user interfaces.`,\n    props: [\n        {\n            name: 'variant',\n            type: 'string',\n            default: 'primary',\n            description: 'The visual style of the component',\n            options: ['primary', 'secondary', 'outline', 'ghost'],\n        },\n        {\n            name: 'size',\n            type: 'string',\n            default: 'md',\n            description: 'The size of the component',\n            options: ['sm', 'md', 'lg'],\n        },\n        {\n            name: 'disabled',\n            type: 'boolean',\n            default: 'false',\n            description: 'Whether the component is disabled',\n        },\n    ],\n    events: [\n        {\n            name: 'click',\n            description: 'Emitted when the component is clicked',\n        },\n        {\n            name: 'change',\n            description: 'Emitted when the component value changes',\n        },\n    ],\n    slots: [\n        {\n            name: 'default',\n            description: 'The default slot for the component content',\n        },\n        {\n            name: 'icon',\n            description: 'Slot for adding an icon to the component',\n        },\n    ],\n}))\n</script>\n\n<template>\n    <DocsLayout>\n        <div class=\"prose prose-gray max-w-none\">\n            <h1>{{ componentData.title }}</h1>\n            <p class=\"lead\">{{ componentData.description }}</p>\n\n            <h2>Usage</h2>\n            <div class=\"rounded-lg bg-gray-50 p-4\">\n                <pre class=\"language-vue\"><code>&lt;template&gt;\n  &lt;{{ componentName }}\n    variant=\"primary\"\n    size=\"md\"\n  &gt;\n    Click me\n  &lt;/{{ componentName }}&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { {{ componentName }} } from '@pickle-jar/ui'\n&lt;/script&gt;</code></pre>\n            </div>\n\n            <h2>Props</h2>\n            <div class=\"overflow-x-auto\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Type</th>\n                            <th>Default</th>\n                            <th>Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr\n                            v-for=\"prop in componentData.props\"\n                            :key=\"prop.name\"\n                        >\n                            <td>\n                                <code>{{ prop.name }}</code>\n                            </td>\n                            <td>\n                                <code>{{ prop.type }}</code>\n                            </td>\n                            <td>\n                                <code>{{ prop.default }}</code>\n                            </td>\n                            <td>\n                                {{ prop.description }}\n                                <div\n                                    v-if=\"prop.options\"\n                                    class=\"mt-1 text-sm text-gray-500\"\n                                >\n                                    Options: {{ prop.options.join(', ') }}\n                                </div>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <h2>Events</h2>\n            <div class=\"overflow-x-auto\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr\n                            v-for=\"event in componentData.events\"\n                            :key=\"event.name\"\n                        >\n                            <td>\n                                <code>{{ event.name }}</code>\n                            </td>\n                            <td>{{ event.description }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <h2>Slots</h2>\n            <div class=\"overflow-x-auto\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr\n                            v-for=\"slot in componentData.slots\"\n                            :key=\"slot.name\"\n                        >\n                            <td>\n                                <code>{{ slot.name }}</code>\n                            </td>\n                            <td>{{ slot.description }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <h2>Examples</h2>\n            <div class=\"space-y-8\">\n                <div>\n                    <h3>Basic Usage</h3>\n                    <div class=\"rounded-lg bg-gray-50 p-4\">\n                        <pre\n                            class=\"language-vue\"\n                        ><code>&lt;{{ componentName }}&gt;\n  Click me\n&lt;/{{ componentName }}&gt;</code></pre>\n                    </div>\n                </div>\n\n                <div>\n                    <h3>With Variants</h3>\n                    <div class=\"rounded-lg bg-gray-50 p-4\">\n                        <pre\n                            class=\"language-vue\"\n                        ><code>&lt;div class=\"space-x-4\"&gt;\n  &lt;{{ componentName }} variant=\"primary\"&gt;Primary&lt;/{{ componentName }}&gt;\n  &lt;{{ componentName }} variant=\"secondary\"&gt;Secondary&lt;/{{ componentName }}&gt;\n  &lt;{{ componentName }} variant=\"outline\"&gt;Outline&lt;/{{ componentName }}&gt;\n  &lt;{{ componentName }} variant=\"ghost\"&gt;Ghost&lt;/{{ componentName }}&gt;\n&lt;/div&gt;</code></pre>\n                    </div>\n                </div>\n\n                <div>\n                    <h3>With Icon</h3>\n                    <div class=\"rounded-lg bg-gray-50 p-4\">\n                        <pre\n                            class=\"language-vue\"\n                        ><code>&lt;{{ componentName }}&gt;\n  &lt;template #icon&gt;\n    &lt;svg class=\"h-4 w-4\" ... /&gt;\n  &lt;/template&gt;\n  With Icon\n&lt;/{{ componentName }}&gt;</code></pre>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </DocsLayout>\n</template>\n\n<style>\n.prose table {\n    @apply w-full border-collapse;\n}\n\n.prose th {\n    @apply border-b border-gray-200 bg-gray-50 px-4 py-2 text-left text-sm font-semibold text-gray-900;\n}\n\n.prose td {\n    @apply border-b border-gray-200 px-4 py-2 text-sm;\n}\n\n.prose code {\n    @apply rounded bg-gray-100 px-1.5 py-0.5 text-sm text-gray-900;\n}\n</style>\n",
    "url": "/docs/[component]",
    "source": "docs"
  },
  {
    "objectID": "/docs/component",
    "title": "Component",
    "content": "<script setup lang=\"ts\">\nimport { computed } from 'vue'\nimport { useRoute } from 'vue-router'\nimport DocsLayout from '@/components/docs/DocsLayout.vue'\n\nconst route = useRoute()\nconst componentName = computed(() => route.params.component as string)\n\n// This would typically come from your component metadata\nconst componentData = computed(() => ({\n    title:\n        componentName.value.charAt(0).toUpperCase() +\n        componentName.value.slice(1),\n    description: `The ${componentName.value} component is a reusable UI element that can be used to build user interfaces.`,\n    props: [\n        {\n            name: 'variant',\n            type: 'string',\n            default: 'primary',\n            description: 'The visual style of the component',\n            options: ['primary', 'secondary', 'outline', 'ghost'],\n        },\n        {\n            name: 'size',\n            type: 'string',\n            default: 'md',\n            description: 'The size of the component',\n            options: ['sm', 'md', 'lg'],\n        },\n        {\n            name: 'disabled',\n            type: 'boolean',\n            default: 'false',\n            description: 'Whether the component is disabled',\n        },\n    ],\n    events: [\n        {\n            name: 'click',\n            description: 'Emitted when the component is clicked',\n        },\n        {\n            name: 'change',\n            description: 'Emitted when the component value changes',\n        },\n    ],\n    slots: [\n        {\n            name: 'default',\n            description: 'The default slot for the component content',\n        },\n        {\n            name: 'icon',\n            description: 'Slot for adding an icon to the component',\n        },\n    ],\n}))\n</script>\n\n<template>\n    <DocsLayout>\n        <div class=\"prose prose-gray max-w-none\">\n            <h1>{{ componentData.title }}</h1>\n            <p class=\"lead\">{{ componentData.description }}</p>\n\n            <h2>Usage</h2>\n            <div class=\"rounded-lg bg-gray-50 p-4\">\n                <pre class=\"language-vue\"><code>&lt;template&gt;\n  &lt;{{ componentName }}\n    variant=\"primary\"\n    size=\"md\"\n  &gt;\n    Click me\n  &lt;/{{ componentName }}&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { {{ componentName }} } from '@pickle-jar/ui'\n&lt;/script&gt;</code></pre>\n            </div>\n\n            <h2>Props</h2>\n            <div class=\"overflow-x-auto\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Type</th>\n                            <th>Default</th>\n                            <th>Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr\n                            v-for=\"prop in componentData.props\"\n                            :key=\"prop.name\"\n                        >\n                            <td>\n                                <code>{{ prop.name }}</code>\n                            </td>\n                            <td>\n                                <code>{{ prop.type }}</code>\n                            </td>\n                            <td>\n                                <code>{{ prop.default }}</code>\n                            </td>\n                            <td>\n                                {{ prop.description }}\n                                <div\n                                    v-if=\"prop.options\"\n                                    class=\"mt-1 text-sm text-gray-500\"\n                                >\n                                    Options: {{ prop.options.join(', ') }}\n                                </div>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <h2>Events</h2>\n            <div class=\"overflow-x-auto\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr\n                            v-for=\"event in componentData.events\"\n                            :key=\"event.name\"\n                        >\n                            <td>\n                                <code>{{ event.name }}</code>\n                            </td>\n                            <td>{{ event.description }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <h2>Slots</h2>\n            <div class=\"overflow-x-auto\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Name</th>\n                            <th>Description</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr\n                            v-for=\"slot in componentData.slots\"\n                            :key=\"slot.name\"\n                        >\n                            <td>\n                                <code>{{ slot.name }}</code>\n                            </td>\n                            <td>{{ slot.description }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <h2>Examples</h2>\n            <div class=\"space-y-8\">\n                <div>\n                    <h3>Basic Usage</h3>\n                    <div class=\"rounded-lg bg-gray-50 p-4\">\n                        <pre\n                            class=\"language-vue\"\n                        ><code>&lt;{{ componentName }}&gt;\n  Click me\n&lt;/{{ componentName }}&gt;</code></pre>\n                    </div>\n                </div>\n\n                <div>\n                    <h3>With Variants</h3>\n                    <div class=\"rounded-lg bg-gray-50 p-4\">\n                        <pre\n                            class=\"language-vue\"\n                        ><code>&lt;div class=\"space-x-4\"&gt;\n  &lt;{{ componentName }} variant=\"primary\"&gt;Primary&lt;/{{ componentName }}&gt;\n  &lt;{{ componentName }} variant=\"secondary\"&gt;Secondary&lt;/{{ componentName }}&gt;\n  &lt;{{ componentName }} variant=\"outline\"&gt;Outline&lt;/{{ componentName }}&gt;\n  &lt;{{ componentName }} variant=\"ghost\"&gt;Ghost&lt;/{{ componentName }}&gt;\n&lt;/div&gt;</code></pre>\n                    </div>\n                </div>\n\n                <div>\n                    <h3>With Icon</h3>\n                    <div class=\"rounded-lg bg-gray-50 p-4\">\n                        <pre\n                            class=\"language-vue\"\n                        ><code>&lt;{{ componentName }}&gt;\n  &lt;template #icon&gt;\n    &lt;svg class=\"h-4 w-4\" ... /&gt;\n  &lt;/template&gt;\n  With Icon\n&lt;/{{ componentName }}&gt;</code></pre>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </DocsLayout>\n</template>\n\n<style>\n.prose table {\n    @apply w-full border-collapse;\n}\n\n.prose th {\n    @apply border-b border-gray-200 bg-gray-50 px-4 py-2 text-left text-sm font-semibold text-gray-900;\n}\n\n.prose td {\n    @apply border-b border-gray-200 px-4 py-2 text-sm;\n}\n\n.prose code {\n    @apply rounded bg-gray-100 px-1.5 py-0.5 text-sm text-gray-900;\n}\n</style>\n",
    "url": "/docs/component",
    "source": "docs"
  },
  {
    "objectID": "/docs/installation",
    "title": "Installation",
    "content": "<script setup lang=\"ts\">\nimport DocsLayout from '@/components/docs/DocsLayout.vue'\n</script>\n\n<template>\n    <DocsLayout>\n        <div class=\"prose prose-gray max-w-none\">\n            <h1>Installation</h1>\n            <p class=\"lead\">\n                Get started with Pickle UI by installing it in your Vue 3\n                project.\n            </p>\n\n            <h2>Prerequisites</h2>\n            <p>Before you begin, make sure you have the following installed:</p>\n            <ul>\n                <li>Node.js 16.x or later</li>\n                <li>Vue 3.x</li>\n                <li>Tailwind CSS 3.x</li>\n            </ul>\n\n            <h2>Installation Steps</h2>\n            <p>\n                You can install Pickle UI using your preferred package manager:\n            </p>\n\n            <div class=\"rounded-lg bg-gray-50 p-4\">\n                <h3 class=\"mt-0\">Using pnpm</h3>\n                <pre><code>pnpm add @pickle-jar/ui</code></pre>\n            </div>\n\n            <div class=\"rounded-lg bg-gray-50 p-4 mt-4\">\n                <h3 class=\"mt-0\">Using npm</h3>\n                <pre><code>npm install @pickle-jar/ui</code></pre>\n            </div>\n\n            <div class=\"rounded-lg bg-gray-50 p-4 mt-4\">\n                <h3 class=\"mt-0\">Using yarn</h3>\n                <pre><code>yarn add @pickle-jar/ui</code></pre>\n            </div>\n\n            <h2>Configuration</h2>\n            <p>\n                After installation, you'll need to configure your project to use\n                Pickle UI components.\n            </p>\n\n            <div class=\"rounded-lg bg-gray-50 p-4\">\n                <h3 class=\"mt-0\">1. Import Components</h3>\n                <pre class=\"language-vue\"><code>&lt;script setup&gt;\nimport { Button, Input } from '@pickle-jar/ui'\n&lt;/script&gt;</code></pre>\n            </div>\n\n            <div class=\"rounded-lg bg-gray-50 p-4 mt-4\">\n                <h3 class=\"mt-0\">2. Configure Tailwind CSS</h3>\n                <p>\n                    Add the following to your <code>tailwind.config.js</code>:\n                </p>\n                <pre\n                    class=\"language-js\"\n                ><code>/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    \"./index.html\",\n    \"./src/**/*.{vue,js,ts,jsx,tsx}\",\n    \"./node_modules/@pickle-jar/ui/**/*.{vue,js,ts,jsx,tsx}\"\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [\n    require('@tailwindcss/forms'),\n  ],\n}</code></pre>\n            </div>\n\n            <h2>Next Steps</h2>\n            <p>Now that you have Pickle UI installed, you can:</p>\n            <ul>\n                <li>\n                    Check out the\n                    <a href=\"/docs/quick-start\">Quick Start</a> guide\n                </li>\n                <li>\n                    Browse the <a href=\"/docs/components\">Components</a> section\n                </li>\n                <li>\n                    Learn about <a href=\"/docs/theming\">Theming</a> and\n                    customization\n                </li>\n            </ul>\n        </div>\n    </DocsLayout>\n</template>\n",
    "url": "/docs/installation",
    "source": "docs"
  },
  {
    "objectID": "/docs/introduction",
    "title": "Introduction",
    "content": "<script setup lang=\"ts\">\nimport DocsLayout from '@/components/docs/DocsLayout.vue'\n</script>\n\n<template>\n    <DocsLayout>\n        <div class=\"prose prose-gray max-w-none\">\n            <h1>Introduction</h1>\n            <p class=\"lead\">\n                Pickle UI is a collection of reusable Vue components that you\n                can copy and paste into your apps. Accessible. Customizable.\n                Open Source.\n            </p>\n\n            <h2>Why Pickle UI?</h2>\n            <p>\n                Pickle UI provides a set of reusable components that you can\n                copy and paste into your apps. These components are built on top\n                of Tailwind CSS and Vue.js, making them highly customizable and\n                easy to integrate into your existing projects.\n            </p>\n\n            <h2>Features</h2>\n            <ul>\n                <li>Built with Vue 3 and TypeScript</li>\n                <li>Fully accessible components</li>\n                <li>Customizable with Tailwind CSS</li>\n                <li>Dark mode support</li>\n                <li>Responsive design</li>\n            </ul>\n\n            <h2>Getting Started</h2>\n            <p>\n                To get started with Pickle UI, you'll need to have a Vue 3\n                project set up with Tailwind CSS. Then you can start copying\n                components into your project.\n            </p>\n\n            <div class=\"rounded-lg bg-gray-50 p-4\">\n                <h3 class=\"mt-0\">Quick Example</h3>\n                <pre class=\"language-vue\"><code>&lt;template&gt;\n  &lt;Button variant=\"primary\"&gt;\n    Click me\n  &lt;/Button&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { Button } from '@pickle-jar/ui'\n&lt;/script&gt;</code></pre>\n            </div>\n        </div>\n    </DocsLayout>\n</template>\n",
    "url": "/docs/introduction",
    "source": "docs"
  },
  {
    "objectID": "/docs/quick-start",
    "title": "Quick Start",
    "content": "<script setup lang=\"ts\">\nimport DocsLayout from '@/components/docs/DocsLayout.vue'\n</script>\n\n<template>\n    <DocsLayout>\n        <div class=\"prose prose-gray max-w-none\">\n            <h1>Quick Start</h1>\n            <p class=\"lead\">\n                Learn how to use Pickle UI components in your Vue 3 application.\n            </p>\n\n            <h2>Basic Usage</h2>\n            <p>\n                Here's a simple example of how to use Pickle UI components in\n                your Vue application:\n            </p>\n\n            <div class=\"rounded-lg bg-gray-50 p-4\">\n                <pre class=\"language-vue\"><code>&lt;template&gt;\n  &lt;div class=\"space-y-4\"&gt;\n    &lt;Button variant=\"primary\"&gt;\n      Click me\n    &lt;/Button&gt;\n\n    &lt;Input\n      v-model=\"name\"\n      label=\"Name\"\n      placeholder=\"Enter your name\"\n    /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { ref } from 'vue'\nimport { Button, Input } from '@pickle-jar/ui'\n\nconst name = ref('')\n&lt;/script&gt;</code></pre>\n            </div>\n\n            <h2>Component Variants</h2>\n            <p>\n                Most components come with different variants that you can use to\n                match your design:\n            </p>\n\n            <div class=\"rounded-lg bg-gray-50 p-4\">\n                <pre class=\"language-vue\"><code>&lt;template&gt;\n  &lt;div class=\"space-x-4\"&gt;\n    &lt;Button variant=\"primary\"&gt;Primary&lt;/Button&gt;\n    &lt;Button variant=\"secondary\"&gt;Secondary&lt;/Button&gt;\n    &lt;Button variant=\"outline\"&gt;Outline&lt;/Button&gt;\n    &lt;Button variant=\"ghost\"&gt;Ghost&lt;/Button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;</code></pre>\n            </div>\n\n            <h2>Form Components</h2>\n            <p>\n                Pickle UI provides a set of form components that work seamlessly\n                together:\n            </p>\n\n            <div class=\"rounded-lg bg-gray-50 p-4\">\n                <pre class=\"language-vue\"><code>&lt;template&gt;\n  &lt;form @submit.prevent=\"handleSubmit\" class=\"space-y-4\"&gt;\n    &lt;Input\n      v-model=\"form.name\"\n      label=\"Name\"\n      required\n    /&gt;\n\n    &lt;Select\n      v-model=\"form.country\"\n      label=\"Country\"\n      :options=\"countries\"\n    /&gt;\n\n    &lt;Checkbox\n      v-model=\"form.terms\"\n      label=\"I agree to the terms\"\n    /&gt;\n\n    &lt;Button type=\"submit\" variant=\"primary\"&gt;\n      Submit\n    &lt;/Button&gt;\n  &lt;/form&gt;\n&lt;/template&gt;\n\n&lt;script setup&gt;\nimport { ref } from 'vue'\nimport { Input, Select, Checkbox, Button } from '@pickle-jar/ui'\n\nconst form = ref({\n  name: '',\n  country: '',\n  terms: false\n})\n\nconst countries = [\n  { value: 'us', label: 'United States' },\n  { value: 'ca', label: 'Canada' },\n  { value: 'uk', label: 'United Kingdom' }\n]\n\nconst handleSubmit = () => {\n  console.log('Form submitted:', form.value)\n}\n&lt;/script&gt;</code></pre>\n            </div>\n\n            <h2>Layout Components</h2>\n            <p>\n                Use layout components to create consistent spacing and\n                alignment:\n            </p>\n\n            <div class=\"rounded-lg bg-gray-50 p-4\">\n                <pre class=\"language-vue\"><code>&lt;template&gt;\n  &lt;Container&gt;\n    &lt;Stack spacing=\"4\"&gt;\n      &lt;Card&gt;\n        &lt;CardHeader&gt;\n          &lt;CardTitle&gt;Welcome&lt;/CardTitle&gt;\n          &lt;CardDescription&gt;This is a card component&lt;/CardDescription&gt;\n        &lt;/CardHeader&gt;\n        &lt;CardContent&gt;\n          &lt;p&gt;Card content goes here&lt;/p&gt;\n        &lt;/CardContent&gt;\n        &lt;CardFooter&gt;\n          &lt;Button variant=\"primary\"&gt;Learn More&lt;/Button&gt;\n        &lt;/CardFooter&gt;\n      &lt;/Card&gt;\n    &lt;/Stack&gt;\n  &lt;/Container&gt;\n&lt;/template&gt;</code></pre>\n            </div>\n\n            <h2>Next Steps</h2>\n            <p>Now that you've learned the basics, you can:</p>\n            <ul>\n                <li>\n                    Explore the\n                    <a href=\"/docs/components\">Components</a> section for\n                    detailed documentation\n                </li>\n                <li>\n                    Learn about <a href=\"/docs/theming\">Theming</a> and\n                    customization\n                </li>\n                <li>\n                    Check out the <a href=\"/docs/examples\">Examples</a> for more\n                    use cases\n                </li>\n            </ul>\n        </div>\n    </DocsLayout>\n</template>\n",
    "url": "/docs/quick-start",
    "source": "docs"
  },
  {
    "objectID": "/components/button/BaseButton",
    "title": "BaseButton",
    "content": "<template>\n    <button\n        @click=\"handleClick\"\n        :class=\"\n            m(\n                'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n                // Variant styles\n                variant === 'default' &&\n                    'bg-primary text-primary-foreground hover:bg-primary/90',\n                variant === 'destructive' &&\n                    'bg-destructive text-destructive-foreground hover:bg-destructive/90',\n                variant === 'outline' &&\n                    'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n                variant === 'secondary' &&\n                    'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n                variant === 'ghost' &&\n                    'hover:bg-accent hover:text-accent-foreground',\n                variant === 'link' &&\n                    'text-primary underline-offset-4 hover:underline',\n\n                // Size styles\n                size === 'default' && 'h-10 px-4 py-2',\n                size === 'sm' && 'h-9 rounded-md px-3',\n                size === 'lg' && 'h-11 rounded-md px-8',\n                size === 'icon' && 'h-10 w-10',\n                theme.baseButton\n            )\n        \"\n        :aria-disabled=\"disabled\"\n        :aria-busy=\"processing\"\n        :disabled=\"disabled\"\n    >\n        <slot></slot>\n        <span v-if=\"processing\" aria-hidden=\"true\">\n            <span v-if=\"$slots.processing\">\n                <slot name=\"processing\" />\n            </span>\n        </span>\n    </button>\n</template>\n\n<script setup lang=\"ts\">\nimport clsx, { type ClassValue } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nfunction m(...inputs: ClassValue[]) {\n    return twMerge(clsx(inputs))\n}\n\nconst emit = defineEmits(['click'])\n\nwithDefaults(\n    defineProps<{\n        /**\n         * The variant of the button.\n         * @type {'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link'}\n         */\n        variant?:\n            | 'default'\n            | 'destructive'\n            | 'outline'\n            | 'secondary'\n            | 'ghost'\n            | 'link'\n\n        /**\n         * The size of the button.\n         * @type {'default' | 'sm' | 'lg' | 'icon'}\n         */\n        size?: 'default' | 'sm' | 'lg' | 'icon'\n\n        /**\n         * Whether the button is disabled.\n         * When true, the button cannot be clicked and shows a disabled state.\n         *\n         * @type {boolean}\n         */\n        disabled?: boolean\n\n        /**\n         * Whether the button is in a processing state.\n         * When true, displays a loading indicator before the button content.\n         *\n         * @type {boolean}\n         */\n        processing?: boolean\n\n        /**\n         * Locally customize the component's theme properties.\n         *\n         * @type {Partial<ThemeParams>}\n         */\n        theme?: {\n            baseButton?: string\n            baseButtonDisabled?: string\n            baseButtonIcon?: string\n        }\n    }>(),\n    {\n        disabled: false,\n        processing: false,\n        size: 'default',\n        theme: () => ({\n            baseButton: '',\n            baseButtonDisabled: '',\n            baseButtonIcon: '',\n        }),\n        variant: 'default',\n    }\n)\n\nfunction handleClick(evt: MouseEvent) {\n    evt.preventDefault()\n    emit('click', evt)\n}\n</script>\n\n<style scoped>\n.sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    margin: -1px;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border-width: 0;\n}\n</style>\n",
    "url": "/components/button/BaseButton",
    "source": "components"
  },
  {
    "objectID": "/components/input/Input",
    "title": "Input",
    "content": "<template>\n    <input\n        :type=\"type\"\n        :placeholder=\"placeholder\"\n        :value=\"modelValue ?? value\"\n        @input=\"onInput\"\n        :class=\"\n            m(\n                'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n                theme?.input || ''\n            )\n        \"\n    />\n</template>\n\n<script setup lang=\"ts\">\nimport { m } from '../../utils'\n\ndefineProps<{\n    type: string\n    placeholder: string\n    value?: string\n    modelValue?: string\n    theme?: {\n        input?: string\n    }\n}>()\n\nconst emit = defineEmits<{\n    (e: 'update:modelValue', value: string): void\n    (e: 'update:value', value: string): void\n    (e: 'input', value: string): void\n}>()\n\nconst onInput = (event: Event) => {\n    const target = event.target as HTMLInputElement\n    emit('update:modelValue', target.value)\n    emit('update:value', target.value)\n    emit('input', target.value)\n}\n</script>\n",
    "url": "/components/input/Input",
    "source": "components"
  }
]